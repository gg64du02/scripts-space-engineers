using Sandbox.Game.EntityComponents;
using Sandbox.ModAPI.Ingame;
using Sandbox.ModAPI.Interfaces;
using SpaceEngineers.Game.ModAPI.Ingame;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using VRage;
using VRage.Collections;
using VRage.Game;
using VRage.Game.Components;
using VRage.Game.GUI.TextPanel;
using VRage.Game.ModAPI.Ingame;
using VRage.Game.ModAPI.Ingame.Utilities;
using VRage.Game.ObjectBuilders.Definitions;
using VRageMath;

namespace IngameScript
{
	partial class Program : MyGridProgram
	{
		public List<IMyMotorSuspension> Wheels = new List<IMyMotorSuspension>();
		public IMyRemoteControl RemoteControl;
		public IMySensorBlock Sensor;

		public Vector3D myTerrainTarget = new Vector3D(0, 0, 0);

		MyWaypointInfo myWaypointInfoTerrainTarget = new MyWaypointInfo("target", 0, 0, 0);

		IMyRadioAntenna theAntenna = null;

		IMyCockpit theCockpit = null;

		string str_to_display = "";

		List<faceRegionPolygon> faceRegionPolygonList = new List<faceRegionPolygon>();

		string planetRegionPolygonsLoaded = "Pertam";

		List<Point> testPointRegionsLinked = new List<Point>();

		List<Node> nodes = new List<Node>();

		String encodedGraph = "M0M0Ko0WT0ma0WS|M0M0IY0lM0WT|M0M04A0WR0fc|M0M06c0cZ0WR|M0L-Kr0mc0Wv0WM|M0L-I_0lR0mc0WP|M0L-FG0k_0lb0Wx|M0LZ690ea0Wo0cX|M0LWBV0ju0k_0We|M0LDIS0Wy0WH0WT|M0LwdP09S0aX0WN|M0Lqdo0b90WL0WO|M0LoK90Wv0Wy0WS|M0Lkdk0VA0Wc0WN|M0LiGq0Wz0WA|M0LiAF0ju0Wd0WK|M0LiAD0Wu0WJ|M0LaI30WF0WP|M0L8Hy0Wz0WF|M0KZHJ0WB0WH0WG|M0KY7X0bT0WC0WD|M0KT7C0Ww0WE|M0KS850b90VZ0WE|M0KNHK0Wm0Wp0WF|M0KLJs0Wt0WM0WP|M0KLG_0Wg0WG0WI|M0KLG00Wg0Wx0WI|M0KHFq0We0WA0WU|M0KD730Wk0Wn0WD|M0KzLu0WS0Ws0WM|M0KyyP0Vd0Wr0WK|M0KrLv0yd0W80Wv|M0KrJn0Wh0Wq0Wy|M0Kqyq0VC0Wu|M0KnJo0W70Wf0Wt|M0KlI80Wi0Wm0WB|M0Kk5F0Wj0Wn0WR|M0Kj5K0Wl0Wo0Ww|M0KcHY0W40Wp0WB|M0K45Z0VS0Wk0Wn|M0K07j0VU0Wl0Ww|M0JZIK0Wf0Wi0Wt|M0JZII0W10Wh0Wp|M0JZ5e0W30W90Wo|M0JWGu0V_0WA0Wz|M0JTJ50W50Wh0Wq|M0JPDg0Vy0WQ0Wx|M0JNAI0Vp0Vv0WJ|M0JLbI0Vx0Wb0WL|M0Jwbp0Wa0Wa0Wc|M0Jvbo0VH0VZ0Wb0Wb|M0Jt4m0VY0Wj|M0JnKU0VW0W60Ws|M0JmKC0W50W60Wq|M0JlKN0VP0W80W7|M0J6J40W10W70Wf|M0J1H40W00W10Wm|M0J05E0W20W20Wj|M0I_5F0VF0VI0W30W3|M0IVIO0VX0W50W40Wi|M0IPGO0VR0V-0W4|M0IMGm0Vy0V-0Wg|M0IJGu0Vs0W00V_|M0II8W0VV0Wa0WC|M0IA3n0VL0VN0W9|M0IxIG0VR0VT0W1|M0IwLe0Vh0VQ0W8|M0Iu8x0Vb0VU0VZ|M0It8g0VS0VV0Wk|M0IsIH0VK0VP0VX|M0Im7D0VJ0VU0Wl|M0IiLT0wX0Vm0VW|M0IiI10Vo0VX0W0|M0IfJJ0Vr0W60VT|M0IdfP07e09S0V6|M0I44t0VM0VY0VM|M0I34u0Vf0VF0VN0VN|M0I12i0V50VG0VY|M0H-II0Vt0Vu0VT|M0HZ6q0V10VI0VS|M0HY6g0VE0VJ0W2|M0HW1U0VD0VL|M0HWaB0UE0Vz0Wa|M0HU5S0VM0VE0W2|M0HT5X0Vj0VF0VI|M0HRwt0Va0Vw0Wr|M0HR1Q0Uv0VB0VG|M0HL1J0Tz0Vw0VD|M0HKdc0U_0V20WL|M0HIax0Uz0UA0VH|M0HGDF0Vq0V_0We|M0HEbC0Uw0Uz0Wc|M0HA1a0Tv0VC0VB|M0HzIA0Vl0Vt0VK|M0HzAE0V30Vg0Wd|M0HvI_0Vu0Vr0VK|M0HuJn0UZ0Vt0VP|M0HuGC0Vk0Vn0V-|M0HtDA0Ux0Vp0Vy|M0HoDt0Vc0Vq0Wd|M0HkHu0Vl0Vn0VR|M0HjH80UM0Vo0Vs|M0HeLz0wg0V40VQ|M0HbHY0Vi0Vu0Vo|M0HaGq0UF0UU0Vs|M0H5HZ0UL0V90Vl|M0H55z0V10Vf0VE|M0H4Ky0Ul0V40VW|M0G_Ac0UY0Vd0Vv|M0GZC_0TR0V30Vp|M0GZA30Vg0Wu|M0GZA20UI0V7|M0GZ5h0V80Vj0VM|M0GY7Z0UC0UV0VV|M0GXI20UQ0UZ0Vi|M0GXx70UN0V70VC|M0GVzH0V00Ve0Va|M0GV5f0UR0V50Vf|M0GN4s0UO0VL0V8|M0GNeS0UW0V20VO|M0GJL70Uh0Vm0Vh|M0GIC60UK0Vc0Vv|M0GGe70UT0V60VA|M0GF6g0U-0Vj0VJ|M0GAzk0UI0UN0V7|M0GxcZ0UG0UT0VA|M0GuIE0Ut0Vr0V9|M0Gu6j0US0UX0V1|M0GpAi0U70UK0Vg|M0Go6c0Uf0UP0U-|M0GneU06M0UB0V6|M0Gl7l0Un0US0Vb|M0GjGz0UF0UM0Vk|M0Gh5e0UO0UP0V8|M0Gh6J0Um0U-0UV|M0Ghe20UB0U_0V2|M0GgHF0Ut0UL0V9|M0GeH90UJ0UQ0Vi|M0GeGP0UJ0UU0Vn|M0GexC0UH0V00Va|M0Ge4Y0Uv0V50UR|M0Ge5h0T_0UR0UX|M0GdBE0Ug0V30UY|M0G7GT0Ur0UL0UM|M0G6zi0U90Ve0V0|M0G3xH0U90U80UN|M0G1cQ0Uq0Uw0U_|M0G0Fl0Ux0UU0Vk|M0FX8u0Uu0UC0UE|M0FX8M0UA0UD0VH|M0FW880Uy0UD0Vb|M0FRe80Uq0UW0UT|M0FP9I0TX0UE0Vz|M0FM7_0TU0Un0UC|M0FMb60U60Vz0Vx|M0FLEN0U20UF0Vq|M0FK4A0TS0VD0UO|M0FKbT0U60UG0Vx|M0FHHC0Ud0UZ0UQ|M0FH8u0U00U00UD|M0FFGS0Ue0Us0UJ|M0FFGQ0U30U50Ur|M0FEe10U40UG0UB|M0FD6Q0Uc0Uk0US|M0FD7B0Uj0Uy0UV|M0FDfY0SP0U4|M0FDfZ06a06M|M0FCJZ0TY0TY0Vh|M0FA730U10Uj0Um|M0FzLX0ub0vi0Uh|M0Fz7w0TP0Uk0Un|M0FvLC0Ua0Ui0V4|M0FtBb0TD0U70UK|M0FsHo0T30Ue0Ut|M0FsHf0TI0Ud0Ur|M0Fs650TZ0Ub0UX|M0FrLx0SB0TV0Uh|M0Fr6x0TF0Uf0Uc|M0Fr6B0U10Ub0Um|M0FpyL0T-0UH0UI|M0FoAg0TM0Ug0UY|M0FoxA0Th0TB0UH|M0Fmb80TQ0Uw0Uz|M0FkF_0U20U30Us|M0FjGp0TI0U50Us|M0FjeC0SW0Uo0Uq|M0FeEJ0T80U50Ux|M0Fd6X0TK0Uc0Uk|M0F7y_0TA0TT0U9|M0F75j0TS0TZ0UP|M0F78C0TW0Uu0Uu|M0F55A0TE0T_0Uf|M0F4Kd0TO0Ul0Ul|M0F2a00TG0TJ0UA|M0F1KE0SB0TO0Ua|M0F18D0TG0TN0U0|M0F0zi0Tc0TM0T-|M0F0890TN0TP0Uy|M0E_4V0TL0T_0Uv|M0E-Cg0T10Ty0Vc|M0EYaT0TC0TJ0U6|M0EXKm0Tl0TV0TY|M0EX7L0Tr0Uj0TU|M0EVzT0Tt0TT0U7|M0EV870Ts0TW0TU|M0EU4O0Tz0TH0TS|M0ES6X0Tq0TF0U1|M0EPai0Tn0TX0TQ|M0EOGH0SY0Ue0U3|M0EK4P0S_0TE0TL|M0EH5M0TH0To0TZ|M0EH6A0Tu0TK0Ub|M0EH8O0Tw0TX0TW|M0ECBo0Tt0Ty0Ug|M0EByL0Tf0Tj0T-|M0EBx50Tg0Tv0U8|M0EBbr0T70Tb0TQ|M0EA3R0SL0VB0TL|M0EzBq0Tx0TR0TD|M0EwBr0SS0Td0Ty|M0EuwB0T60TB0Vw|M0Eu8H0Ti0Ts0TG|M0Er6w0Tq0To0TF|M0EoA50Tm0TD0TM|M0El7W0Tp0Tw0TN|M0Eh7u0Tu0Tr0TK|M0Eh7H0Tp0Tq0TP|M0Eg640T20Tu0TE|M0Eg7L0SA0Tr0Ts|M0EcA70Tc0Td0Tt|M0Ec9-0Te0Tk0TJ|M0E7Jq0Sy0T50TO|M0E69T0SH0Ti0Tn|M0E5ya0T90Th0TA|M0E39N0SV0Tw0Tk|M0D_xT0Tg0Tj0U8|M0DZyP0T40T90TA|M0DZxI0T60Th0TB|M0DWam0SN0Ta0Tn|M0DVAt0Su0Tx0Tm|M0DTzu0T40Tm0TT|M0DQb70SM0Ta0TC|M0DMyw0SG0Tf0Tj|M0DMa-0SO0Te0Tb|M0DLEe0SR0T00U2|M0DJI10Sk0S-0Tl|M0DJx60SD0Tg0Tv|M0DJcP0SK0SW0TC|M0DHHd0SY0S-0Ud|M0DHzf0SJ0Tc0Tf|M0DGE20Rx0T10T8|M0DGDY0SZ0T00TR|M0DG5s0R-0S_0To|M0DFHr0Sk0T50T3|M0DF5a0SL0T20TH|M0DEDJ0S90SS0T1|M0DDGi0SX0T30TI|M0DAG50RH0SU0SY|M0DydA0ST0T70U4|M0Dv9p0SA0SH0Ti|M0DuFq0RH0SR0SX|M0DtEV0Sn0SU0T8|M0DtCr0SI0SZ0Tx|M0DtdN0S80SP0SW|M0DsaR0SM0SN0Ta|M0Dse50ST0Uo|M0Dse60690Sq|M0DoaG0SF0Te0SO|M0DfbP0SK0SO0Tb|M0Dd4u0St0S_0Tz|M0Dcc20Sx0SM0T7|M0DbBR0S90Su0SS|M0Dbzj0Ss0SG0T4|M0D49R0SE0SV0Tk|M0D2z00SC0SJ0T9|M0CWag0Sm0SE0SN|M0CT9X0Sp0SF0SH|M0CRyw0Sw0SG0SD|M0CRxz0Sw0T60SC|M0CPL00Sy0Ua0TV|M0CN8G0Sv0Tp0SV|M0CL0J0Sh0Si0St|M0CIL10ti0Tl0SB|M0CGbK0Sa0Sm0SK|M0CFys0Sj0SD0SC|M0CDAd0Sr0SI0Td|M0CD8K0Sl0Sp0SA|M0CwzV0Sj0Sr0SJ|M0Cw1t0S60SL0Sz|M0CvA00RN0Su0Ss|M0CseL0RX0So0SQ|M0Cr9B0Se0Sv0SE|M0Cofd05J0Sb0Sq|M0CmEQ0Ry0RA0SR|M0ChaH0Sd0Sx0SF|M0Cg8y0R-0S50Sv|M0CfI30Rz0S-0T5|M0CdyH0RZ0Ss0Sw|M0Ccwm0RZ0Sc0Sz|M0Cb0h0S60Sc0Sz|M0Ca4t0S20Sf0Sf|M0C84H0S70Sg0Sg|M0C49N0S50Sd0Sp|M0C3ax0Sa0Se0Sm|M0C2wg0S00Si0Sh|M0BSfS05l0S40So|M0BQb-0S80Sd0Sx|M0BEBW0RC0SZ0SI|M0BycC0RX0Sa0ST|M0Bw5Z0RQ0S30Sf|M0Bv0I0S00St0Sh|M0Bt900R-0Se0Sl|M0BqfM0RR0RY0Sb|M0Bo5h0RW0R_0S7|M0Bf360RT0S10Sg|M0Ba300Rt0Ru0S2|M0B7wh0RO0S60Sc|M0B64E0RK0RT0S3|M0B4y40RU0Sj0Si|M0B48k0T20S50Sl|M0B0eD0RR0RV0S4|M0A_dS0RV0S80Sq|M0AZ5k0RK0RP0S3|M0AUe60RM0RX0RY|M0ATy50RO0RS0RZ|M0APyt0Rs0RN0RU|M0AP3J0RJ0S20R_|M0AMfx0RM0RY0S4|M0AC6h0Rp0RP0S7|M0AB5E0RB0RQ0RW|M0AAxD0Rm0RU0S0|M0AzzH0Rw0Sr0RS|M0Auft0RV0RR|M0As9T0Rh0Rl0RI|M0Ar4T0RE0RW0R_|M0Aq3H0Rq0RE0RT|M0AnaQ0Rk0RG0RL|M0AiGr0RF0SU0SX|M0AgGr0Rz0RA0RH|M0Agbt0Rj0RD0RI|M0Ab4T0RB0RJ0RK|M0A7bO0Rr0Rr0RG|M0A4Cr0R80Rv0S9|M0A3H_0Rf0RF0Sk|M0A3EV0Ry0RF0Sn|M0A34Z0RE0Ro0RP|M0A1DH0Rx0RA0Sn|M0z_Dw0Rv0Ry0T0|M0zXzG0Rm0Rs0RN|M0zQC_0Ra0Rx0RC|M0zP2u0Rq0Rt0S1|M0zM1E0R30Ru0S1|M0zAz40Rm0Rw0RS|M0zy380Rb0Ru0RJ|M0zycr0Q-0RD0RD|M0zo5e0Rb0Rn0RB|M0zo6d0Ri0Rn0RQ|M0znz30RO0Rw0Rs|M0zn6b0R50Ro0Rp|M0zj9r0Re0Rk0RL|M0zcaF0Rj0Rl0RI|M0z4aS0R10Rk0RG|M0y_7t0R50Rg0Rp|M0yY7_0Rd0Rg0RL|M0yX7P0R50Rh0Ri|M0yWKI0ti0R90Rz|M0yV890R40Rh0Re|M0yV8v0Rc0Rd0Rl|M0yK8O0R40R40Re|M0yH3C0R70Ro0Rq|M0yFCE0QK0R80Rv|M0ymKr0QX0R60Rf|M0yjAB0Q_0Ra0RC|M0yhKp0QD0QR0R9|M0yh3i0QM0R20Rb|M0yg7c0Rg0Rn0Ri|M0y89i0Rd0Rc0Rc|M0y50E0QS0R20Rt|M0y31o0QO0R30R7|M0y2c40QT0R00Rj|M0x_cn0QT0Q-0R1|M0xZAn0QN0QZ0R8|M0xYdg0QV0R00Rr|M0xRA10QN0QY0Q_|M0xOzW0Qe0Qe0QZ|M0xIFE0QU0QW0R9|M0xzFD0QP0QR0QX|M0xwdq0QL0QQ0Q-|M0xnEm0QC0QP0QX|M0xkbq0QH0R00R1|M0xh0x0QI0QO0R3|M0xgIB0Qn0R60QW|M0xfde0QF0QH0QV|M0x4EQ0Qw0QW0QU|M0x02x0QM0QS0R2|M0wWBj0QK0QZ0Q_|M0wN2Z0QG0QO0R7|M0wFf60QJ0QV|M0wBBN0QB0QN0Ra|M0wAfa03l0Qt0QL|M0wx0t0Qu0QG0QS|M0wtbL0QE0QT0QQ|M0wr2W0Qu0QI0QM|M0whcI0QQ0Qx0QE|M0w7cv0Qy0QF0QH|M00hK-0Qb0R6|M00lCK0QA0Qz0QU|M00pCq0Qd0QA0QK|M00qCY0Qc0Qw0QC|M00qCw0Q70QC0QB|M00rcg0Qv0Qx0QE|M00yd70Qs0Qy0QF|M00HEj0Qj0Qz0QP|M00Mc60Qm0Qo0Qy|M00W0h0Q90QG0QI|M00Zf40Qa0Qq0QJ|M013di0Qm0Qx|M014di0Q20Qg|M015fb0Qa0Qp0Qt|M01bfB03f0Qf0Qq|M01ibA0PA0Qi0Qv|M01jGF0Qk0Ql0QR|M01lcq0Qi0Qv0Qs|M01mGp0Q00Qj0Qn|M01qGO0Q00Qh0Qn|M01vFu0Q30Ql0Qw|M01zcp0Qg0Qo0Qm|M01JHu0PS0Qb0Qk|M01NcP0PR0Qr0Qi|M01RfW02V0Q10Qp|M01Wzk0QY0QY|M01Xzk0Q80QB|M023D-0Q50Q60Qz|M027Ka0PU0Qh0QD|M02bx30Pv0Q80Qu|M02bet0Q20Qq0Qt|M02kz00P-0Qd0Q9|M02wCV0PZ0Q60QA|M02zDU0Q70Q50Qc|M02AE40Q40Q60Qc|M02FE90PX0Q30Q5|M02QEW0PQ0Q40Qj|M02Seo0Q10Qr0Qa|M02XGb0PM0Qk0Ql|M02Xeo0PY0Qf0Q2|M03af002J02V0PY|M03czn0PJ0PV0Q8|M03dCV0PN0PW0Q7|M03fem0PR0P_0Q1|M03gDS0PP0PW0Q4|M03rDx0PO0PX0PZ|M03wzk0Py0PI0P-|M03MLz0rA0PU|M03MLt0P80PT0Qb|M03QG_0PH0PL0Qh|M03Zdy0Pt0PY0Qg|M048Fs0PK0PP0Q3|M04aEW0PO0PQ0PX|M04eDJ0PP0PN0PW|M04fD50PJ0PO0PZ|M04iGs0PG0PM0PS|M04iGa0PK0PL0Q0|M04lG00O-0PM0PQ|M04ACp0Pp0P-0PN|M04Mz10PD0PF0PV|M04RI70Pw0PG0PS|M04UHI0Pq0PH0PL|M058zj0PE0PE0PI|M059zk0P10Pi0PF0PF|M05dyL0P40PC0PI|M05lyE0Pv0Pz0PD|M05oA_0Ps0Pu0Px|M05rAw0Pi0Pu0PV|M05ryD0O_0Pf0PC|M05rb_0Og0Pt0Qo|M05uIM0Pk0Pj0PH|M05uBY0Po0Pr0PB|M05xAH0Pl0Py0PB|M05xws0P00PC0Q9|M05yBa0Pl0Pr0PB|M05yct01y0PA0PR|M05zHR0Pa0Pm0PG|M05zBB0Pb0Px0Ps|M05BCH0Pn0Po0PJ|M05DCL0P20O-0Pp|M05DCv0Pg0Pp0Px|M05HI40Pk0Pk0Pq|M05IJK0P60P80Pw|M05II50P60Pw0Pm0Pm|M05IAY0Ph0Ps0Pu|M05LAv0Ph0PE0Py|M05QAK0Pd0Pl0Pi|M05SCa0Pe0Po0Pe|M05TC90P20P90Pg0Pg|M05Tyu0OW0OY0Pz|M05ZAO0P70Pc0Ph|M05-Bk0P70Pb0Pd|M05_Bs0P90Pc0Pr|M062HC0OP0OZ0Pq|M067BI0P30Pe0Pb|M069KY0OM0Pj0PU|M06bIk0OZ0Pj0Pk|M06bB20P50Pc0Pd|M06iA-0P10P30P7|M06kzy0O_0P10PD|M06mBN0Pn0Pe|M06mBM0P50P9|M06rzT0P50P40PE|M06vwx0OX0OY0Pv|M06wHV0OO0P60Pa|M06wEC0OV0PK0Pn|M06wzb0OW0P40Pz|M06xxR0OU0P00Pf|M06Hwu0OF0OS0P0|M06Szj0OT0Pf0O_|M070EY0Oy0OA0O-|M073yO0Os0OW0OU|M073y00OQ0OT0OY|M078w70OH0OR0OX|M07dw20Oz0ON0OS|M07exH0On0OF0OU|M07gHw0Oy0OO0Pa|M07hIa0OE0OP0OZ|M07i0A0Ow0OK0OR|M07kL70qn0OE0P8|M07w2R0Om0Ox0OJ|M07B1k0Oo0OJ0ON|M07C1o0Ou0OK0OL|M07DCm0Ol0OB0OD|M07EwB0OG0OG0OS|M07FwC0Op0OF0OH0OH|M07Oxm0OG0OQ0OX|M07RK20OC0OM0OO|M07UB30Os0Ot0OI|M07VK20pL0O70OE|M07YDJ0Or0OA0OI|M07-E10Or0OB0OV|M087wd0Op0Ow0OR|M088Gf0Ov0OP0OV|M08h2m0Oh0Ou0OL|M08i0x0Of0Oz0ON|M08lGi0NR0Oq0Oy|M08q250Oo0Ox0OJ|M08xBm0NL0Oa0OD|M08CyR0Oj0OD0OT|M08OEh0Oq0OB0OA|M08TEj0O00Ov0Or|M08Vws0Oi0OG0Oz|M08W1E0Od0Ou0OK|M08-yp0O60Oj0OQ|M0906f0O50Og0OL|M091CF0O30O3|M091CE0Oc0OI|M093yE0Oe0On0Os|M097wq0O60O90Op|M09c2L0O50Ob0Ox|M09f6T0NX0Om0PA|M09iyJ0NK0NN0Oj|M09i0P0O90Od0Ow|M09j1o0O80Of0Oo|M09lCu0Oa0Oa0Ol|M09m2y0O10O40Oh|M09pBW0Oc0Oc0Ot|M09q0G0N-0Oi0Of|M09s1q0NV0O20Od|M09yJs0NR0NY0OC|M09AwA0NT0On0Oi|M09C4C0N_0Oh0Om|M09S2I0N_0O10Ob|M09UDW0O00Ok0Ok|M09_0W0NW0NZ0O8|M0a02r0NS0O40Ob|M0a3Ef0NU0Oq0O3|M0a73R0NB0O40O5|M0a90r0NT0NZ0O9|M0aa0u0NW0N-0O2|M0aeKy0pL0NI0O7|M0aj7m0N40Ni0Og|M0am0J0NQ0O20NZ|M0ap1T0NQ0NS0O8|M0aqEj0Ne0No0O0|M0atwn0NO0N-0O6|M0av1-0NB0NV0O1|M0ayI10NP0O70Ov|M0aCI10NH0NM0NR|M0aC0Q0Nk0NW0NV|M0aDwp0Nj0NN0NT|M0aGI70n90Nw0NP|M0aGwz0NE0Oe0NO|M0aLA80ND0NK0Ot|M0aMA10NG0NL0Oe|M0bexX0NA0NC0NE|M0bgLU0pf0Nz0NY|M0bkHK0MO0Ny0NP|M0byzT0Nl0NF0NK|M0bAzQ0Nv0NC0NG|M0bBBT0Nr0Nx0NL|M0bBxk0Nt0NJ0NN|M0bGyq0NA0NF0NJ|M0bJ2v0Nq0NS0N_|M0bMyk0Ns0NC0NJ|M0bOLZ0o-0Nw0NI|M0bVHo0MV0Na0NH|M0c3Ci0N70Np0ND|M0c4LM0NM0Nz|M0c8zt0Nu0Nu0NF|M0c9zs0N50Nn0Nv0Nv|M0cfx40Nc0Nh0NE|M0ciDt0No0Np0ND|M0ciyw0Nh0Nn0NA|M0cn2u0N90Ng0NB|M0cpEh0Nm0Nr0NU|M0cpCZ0MX0Nr0Nx|M0cryN0N60Nu0Ns|M0cwEp0MQ0Ne0No|M0cBAl0N70Nb0NG|M0cD0K0Nf0Nj0NQ|M0cE0f0Nd0Nk0NO|M0cG4_0MM0N80NX|M0cIy80N60Nt0Ns|M0cL1z0L_0Nf0Nq|M0cM1w0Ma0Nk0Ng|M0cOFI0Na0Nm0NU|M0cP030Mq0Nc0Nj|M0cUwm0N30Nd0Nt|M0cVAm0M-0N00Nl|M0cWG40MY0Ne0Ny|M0c-3a0Mr0N80Nq|M0c_3-0M50N90Ni|M0d1Bu0N20Nl0Nx|M0d6zb0M-0M_0Nu|M0d6yz0M_0Nh0Nn|M0da9V00S0Zl0NX|M0ddwH0ME0MW0Nc|M0dmBy0MU0N10N7|M0doBA0Mw0MS0N2|M0dpAt0MU0MZ0Nb|M0dqyN0MW0N50N6|M0dszz0MJ0Nb0N5|M0dtGe0Mn0MA0Na|M0dtAt0MD0MT0N0|M0dvCR0ML0MR0Np|M0dxIo0MC0MP0Ny|M0dxyL0Mu0N30M_|M0dyBd0Mv0N20N0|M0dCAn0MK0MK0MZ|M0dJB-0My0MR0N1|M0dMCo0Ms0MS0MX|M0dWEv0Ml0MH0Nm|M0dXJe0Mz0MO0MV|M0d_JQ0MN0MN0MP0NH|M0e0JR0mT0MO0MO|M0e1D90Mf0MI0MX|M0e15l0M60M70Ni|M0e2zI0MT0MG0MT|M0e4Dc0Md0MF0ML|M0e4zx0Mu0MG0M-|M0e5En0M10MB0MQ|M0e6zC0Mi0MJ0MK|M0e8Dj0Me0MB0MI|M0ebIp0Mo0Mx0MV|M0ebAM0Mh0Mv0MZ|M0ebw-0L-0Mj0N3|M0ecJb13y0Mo0MP|M0ecGM0Mm0MY|M0ecDQ0Mc0MH0MF|M0eeIn0LW0Mm0MC|M0eeBK0Ms0Mw0MS|M0egBy0Mt0My0N1|M0ehBm0Mt0MD0MU|M0eiBn0Mb0Mw0Mv|M0eizg0Mp0MJ0MW|M0elCl0Mf0My0MR|M0em050M40Mk0Nd|M0em3g0LY0M50N9|M0epzf0M30M20Mu|M0erIL13c0Mz0MC|M0eyHM0LW0MA0Mx|M0eyFc0Ml0MY|M0ezF70M10Mn0MQ|M0eA080LX0M40Mq|M0eBA20M30Mh0MG|M0eBxD0LZ0Mg0ME|M0eJAC0Mb0Mi0MD|M0eKxQ10F0M20Mj|M0eMCB0M80ML0Ms|M0eQDw0M90Md0MF|M0eSDY1200M90MB|M0eSD80M80Me0MI|M0eUAK0Mt0Mh|M0eXDE0Mc0Me|M0eX1B0LX0L_0Nf|M0e-CI0LT0Md0Mf|M0e_4P0M00M60MM|M0f15C0ZI0M70MM|M0f24c0M00Mr0N8|M0f5wE0Mk0L-0Mq|M0f7zR11e0Mp0Mi|M0f8EW1220Ml0MH|M0f8yB10V0Mg0Mp|M0fd4y0LU0M50M7|M0ffx20Mj|M0ffx10M40ME|M0ff2D0LY0Ma0Ng|M0fj2L0L_0Mr|M0fs180Mk0Ma|M0fSIE0LV0LV0Mm0Mx|M0fTIF0LW0LW|M0g0Cf11Y0M811F|M0g04w0M00-M|L-g0AF11h11u|L-g04x0-E0LU0-T|LZM0FA0WQ0kL0WU|LZGdg00Up0UW07e|LZg0Cb11y11G0LT|LZg02R0_A|LZg03F0-T0_3|LYb8M00NI0pq0pG|LYg0II12R13c|LYg0Bf11j11w11y|LYg0yz0M210K11e|LXM0BJ0WJ0jH0WQ|LXg0Am0M310V11h|LWg0DQ0LT120|LWg0BD11u11w11F|LSExg005J0SQ06a|LSg0Ig12D12-|LRIiM00wg0wY0VQ|LRg0Av11711e11j|LQM0680bE0cX0df|LOM0HK0lk0lx|LNLAg00VO09P0WO|LNg0450-M0-Y0_6|LMM0HP0lu0lw|LM2sg00P_0350Qf|LKg0120_L|LJDfg00So06905_|LGM0870bE0WE|LG9NM00NY0pK0OC|LFM0IQ0lv0l-0lR|LFg0Ef0Mc11Y121|LDg0xf10x10x|LCg0xg10w10A10w|LALsg009A09S09R|LAGzg006M0710VO|Lx9PM00pG0pL0q0|LwHfM00vT0Vm0wX|LtIoM00wb0wX0x9|Ltg0Cd11p11F11K|LsM05L0cZ0dw0ej|LszIM00Rf0tk0Sy|LqM0K70l-0mc0mf|Lpg04W0-60-Y0-M|LobFM00oM0Nz0p8|Log08u0N40Zk0ZI|Lng0G612a12D|Lk9XM00pf0pI0pK|Ljg0Jr0Mo12-13h|LiM0HH0ll0lx0lv|LhM0Gn0kL0WU0lk|Lhg0Fh12212w|LfL1g007108509P|LfeQM00n80n80NM|LeeRM00mT0n90n9|Leg0xV10F11310V|LdM0HJ0ln0lu0lM|Lc9VM00pq0pG0pM|Lcg0xG0Mg10A10K|LbGsg006R07e09A|LbEBg00660690Up|L9M0GM0lb0ll0lw|L8g0xy10j10x10F|L6g0ET0M112112a|L4aPM00pf0pp0pI|L2Lwg009O09P0aA|L2zKM00th0ti0ub|L0M0c10WN0WC0be|L0C8M00tk0Ui0uA|L0f2M00MN0mJ0n8|L0g0EK11U120122|K-2_M00rO0s2|KZE0g005l05J066|KYGjg006506N071|KXg0780M60Zl0Z-|KWg0Bi11p11u11y|KVITM00wY0x30xb|KVg0KV0mF0Mz13h|KUM04o0df0dw0fc|KS8Sg001x0Pt01A|KSbpM00o-0p20pp|KQEpg005_06506a|KPaQM00p80pt0pq|KPg0JK12F13c13y|KOM0260fE0gB|KO9GM00pI0pJ0q0|KOg03X0-E0-T0_3|KNM0Jq0lJ0lM0ma|KNM0GZ0kX0lk0lu|KKM02a0fi0fG0fJ|KKcLg00N400M01x|KJ9ag000S01J01y|KHg06K0ZI0-f0-6|KGDaM00ub0uU0vi|KFbsM00oU0pc0p8|KEfaM00mF0mT0oM|KDcjM00mJ0o-0oU|KCM03f0ea0ej0fi|KC94M00pK0pM0ql|KB7AM00OM0ql0qm|KAg03M0-Y0_f0_6|KAg06q0Z-0_00-E|KzLng008H09p09R|KxM0wM0gB0hP|KxCCg00Sb05j05_|KwM0bx0a_0b90bm|KsbMM00oM0p20p9|KrIMM00wr0xb0x9|KraGM00pc0pp0px|KpM05A0d20df0ej|KobfM00p20pd0pt|KocSg000r00S010|KoflM013y0mL0mJ|KnM02X0e-0fc0fE|KnGeg006b06R06W|Kn88g001y01C01C|Km87g001A01A02402a|KkbeM00p90pc0pg|Kkg0GJ12w12F12R|KgM00d0fG0h50hj|Kf43M00ra0PT0rB|KeFqM00uA0vh0Ui|Kd1TM00rQ0s1|Kdg01t0_A1010_X|KbbmM00oU0p10pd|Kbg0220_o0_t0_L|Ka42M00rk0rA0rI|K9M0620cF0dw0e3|K8b5M00pa0pd0px|K7KTM00xc0Ws|K3M0Kx0m20ma|K27DM00q00qm0qn|K19SM00pB0pM0qc|JYatM00pg0pt0pB|JVGFM00vh0wg0wb|JUHaM00vT0wY0wr|JSEjg006206606R|JSg02p0_q0_W0_A|JQ7CM00qe0ql0qn|JP4-M00r20rk0rA|JPg0AZ11i11w11G|JMf7M00mF0mS0p1|JMg00E0_L0_W10c|JKHwM00wb0wG0x3|JKexg00Xq0W-00M|JIaeM00po0px0pJ|JGg02H0_g0_v0_t|JFE5M00tE0uA0vg|JFg03b0_f0_i0_q|JFg03g0_00_30_g|JCM0Fa0kA0k_0lb|JCJ2M00x30x50x9|JC38g002a0P_035|JBg0wO10c10A10o|JAJbg007I07L09A|JyM0210fE0fR0fR|JxM08S0bm0bT0cZ|Jx4yM00ra0rm0rB|Jxg0wo10110910j|Jw1UM00rS0r-0s2|JvFpM00vg0vi0vT|Jtg0wU10j10q10L|Jr1_g002J02V03f|Jr33M00rI0rQ0rS|Jm3vM00rB0rG0rO|JlFjM00uU0vf0vh|Jl2UM00rO0r-0s1|JjM03A0eo0fi0f8|Jjg03S0-60_20_f|JhEbg005u065063|JhCqg005705l05u|JebwM00mL0p90pa|Jeg0zI10K10R117|JcFgM00tE0vc0vg|Jcg0A011311i11h|JbM09U0be0b_0bE|JbEdg005o06206b|J9CNg005705j062|J9blM00p10pm0pg|J8M0C80jg0ju0jP|J7M0xC0hj0hQ0hZ|J64rM00r20rk0rG|J4f2M00mB0mL0ob|J3M0xT0hP0is|J3Icg006W07s085|J2M0Iy0ln0l-0lY|J15iM00r00ra0rm|J0EBg006306N06n|J01fg00350Qp03l|I_g0et00r0Xr0Xr|I-g0es0Xq0Xs0Xq0Xs|IZg0er0Xr0Y60Xr0Yi|IYM0Cs0jd0jH0kA|IXM0Jv0lY0mf0mb|IWGog006n06N07I|IUM0Jf0lI0lJ0m2|ITaUM00pz0pB|ITaVM00pa0pl|ISFbM00uj0vb0vf|IS51g001C02y02J|IS7-M00qc0qm0qx|ISg0Ax11711n11p|IRM04b0e30ex0e-|IQaVM00pj0pm0pw|INM04P0d20dV0eo|INzyM00sM0tk0tv|IM5tM00qU0r80r2|IJ84M00pJ0q90qe|IHM0H60kX0lv0lJ|IFg0GL12u12D13h|IEFbM00v20vc0vj|IzM01L0fJ0fJ0fZ|Iyg0y310o10I10R|Ixg0yl10L10Q113|Iwg0AP10-11i11C|IvFxM00vb0vL0vN|Is0Hg003a03f0QJ|IrFig006b06j06W|IpHJM00vN0wr0x5|Ip5ZM00qQ0qT0r0|Ipg0w510510c10a|Im3EM00rm0s00rI|IlAiM00uU0vf|IlAhM00tA0tA|Ila_M00oK0pr0pl|IkAfM00tv0tD0tD|IjA9M00th0ty0tA|IiAaM00tv0tB0u7|Iig0f_00r00k0Xw|IhM0Eu0jP0kQ0kL|IgdtM00mS0qi0oK|Igg03Q0_10_00_c|IbM0420ev0eo0eX|IaINM00wG0xc0xb|I81_M00rS0s30s1|I7GxM00vj0vR0wG|I68eM00pY0q80qc|I5AgM00ty0tR0uM|I2M01p0fR0f_0f_|I0asM00po0pw0pY|H_6GM00qw0qx0qQ|H_awM00pl0pr0pz|H_cwM00ob0pr0pj|H_g0140_t0_J101|H-6lM00qG0qT0qU|H-g0xQ10q10G10L|HZM0Kc0m10m20ms|HZJ3M00x50xd0yd|HYg0Df11K12e121|HYg00f10410a109|HW6UM00qe0qw0qG|HU51M00qZ0r00ri|HTB_M00ty0uT0uj|HSg0370_c0_g0_v|HRM06u0cV0d20da|HRCMM00u70u-0vc|HQ5_M00qQ0qW0qU|HQaOM00oK0pj0pw|HQg00s0__0__105|HOg0CA11C11G11U|HNJ6M00we0xc0xg|HNg03r0_10_20_i|HMM0xH0hI0hP0ij|HLM01l0fZ0fZ0g2|HIGzM00vZ0vN0w5|HIg0wW10i10o10I|HHM0Fw0kW0ll0kW0ln|HHM0wy0gB0hK0hI|HHg0G412t12t12F13w|HGM0Fv0kU0kX0kX|HGg0G312e12u12u|HCM0Fr0kQ0kW0le|HCEQM00u-0vL0vb|HBM0Fo0kA0kR0kU|HB5DM00qW0ri0r8|HB98M00pz0q90p-0p-|HBg0wc10510910i|HA97M00pY0pY0q8|HAg08z0Zi0Zl0-1|HzHbg007f07k07I|Hz5GM00qT0r10qZ|HxJeM00wP0xd0ya|HwM0LI0lW0mb0mx|Hwg0C011n11s11K|HvM0Fo0kv0kQ0kV|HuM03H0ex0eT0f8|HuM0f209Q09R0aB|HtM0L-0ms0yo|HrfJM013w0mD0mS|HqM0Gv0kU0lf0lf|HqM01c0f_0g70ga|HpM0Gy0lB0lE|HpM0Gx0le0le|HpJWg008w09O08O|HpFcg006706n06-|Hog02h0_i0_q0_J|HlfHM013H0mB0nI|HiH0M00vR0vZ0we|HgM03M0ev0eU0eX|HgGRM00vR0w00w5|Hgg08F0Zf0ZU0Zk|HeM0xo0h50hQ0hK|HeM03o0eX0e-0f6|HdM0Jt0lN0lW0mb|HdM0Iw0lG0lY0lN|HcM0I60lg0lD0lG|HbM03p0f20f20f8|HaM0Ip0lE0lH0lI|HaLPM00lS0mx0ya|H8M0Fs0kJ0kR0ld|H8g03R0_20_80_c|H7M0c_0WO0aP0a_|H4g0yl10G10R10-|H3g0KR0mB12r12u|H2M0eR0aw0aA0aP|H0HcM00w00w50xd|H06UM00qg0qx0qG|H0g00M104108104|G_M00X0g20g70gt|G-M00-0g00g20ga|G-g0Fv11U12r12t|G-g0xN10D10I10Q|GZM0cF0aX0b80be|GYM0IQ0lI0lL0m1|GYM0450ex0eD0eT|GYM05T0cF0d60db|GYIqg007p08507N|GYGWM00vW0vZ0we|GYg0wO10a10k10q|GYg06e0Z-0-10-a|GYg0bL0Xs0Yj0Yz|GXM05S0dc0da0dz|GXGwM00v20vj0vW|GXg06A0Zk0ZU0-f|GWGEg006-07s07g|GUGFg007607f07k|GTGKM00vL0wa0w0|GTGqg006j06z07f|GTxFM00su0sD0th|GSBJg005j05605u|GSANM00tB0tY0um|GRM0f90aj0al0aB|GP8gM00p-0qg0q9|GOLsg009v0aA0aj|GOErM00uj0uX0v2|GO4FM00qZ0r80rw|GMcjg000H00M00_|GKM0I30lB0lE0lH|GK3Fg002a02j037|GKg0cA0Xs0XZ0Yd|GJM0H_0lg0lo0lD|GJJCg008m08H08O|GIM0zF0is0iA0iJ|GIM0zx0hZ0iq0ix|GIK3g008w08H08S|GIIug007L07Q08m|GHM03M0eD0eT0f2|GGM0AX0jd0jH0jd|GFM0AW0iS0jP0jg0jg|GFM03_0ef0ev0eU|GFM05u0db0ds0dV|GFg0wQ10810i10n|GEM01i0fW0fW0g7|GEM03x0eU0f60f6|GEGVg007g07p07s|GDg06S0Zf0Zi0-1|GCM0yP0hQ0h-0il|GCM0xs0h50hI0hM|GBI0M00wO0wO0xg|GBz8g003I03J04p|GAH_M00wN0wN0wP0wP|GAg0wT10h10k10D|GzH-M00wa0wH0wO0wO|GyM0zW0ix0iA0iL|GyM0zI0ix0iy0iJ|GyJsg007N08o08w|GxM0Iv0lD0lG0lL|GxM04-0dz0e30dT|Gxg0c00Y60Ya0Yj|GvM0zY0iJ0iM0iS|GuM0fL09Q0a20aw|GuKWg009p09Q0a2|GuKQg009o09O09v|GuEkM00uT0u_0u-|Gug0bK0Yd0Yi0Yr|GsM0Ja0lV0m10lV0ms|GsM0xy0hK0hL0h-|GsM00t0ga0gd0gF|GsKPg008S09209p|GrM0J90lP0lW0lW|GrM0IN0lH0lN0lP|GrM0zG0iq0iA0iD|GrM0zw0iu0is0iy|GrK8g008G08O09o|Grg08J0Zi0Zd0ZU|Gqg0ea0W-0Xz0XL|GpM0xU0hM0ij0i6|GoHaM00vW0w90wN|GnJtg008g08m08G|GnE5M00u70uM0uX|GmKMM00xg0y40yo|GjJTg008o08q08S|GjHaM00wd0wa0wu|GiM01A0fF0g00g0|GiM0500ds0dV0dW|GiBIg004E05705o|Gig0050__10b10k|Ghg0aP0Yi0Yr0Z7|Ggg0d10XL0Y60Ya|GfM0zL0iy0iG0iM|GeM0zZ0iD0iL0iQ|GdM0IX0lL0lQ0lV|GdM0xw0hf0hM0hR|Gcg0bi0Yj0Ym0Yz|Gcg0ch0XZ0Ym0Yd|Gbg0dB0Xw0Y80XZ|GaECM00uO0uX0v3|G9G7M00v30vH0vV|G94Fg002802o02y|G6M0Am0iL0iQ0jd|G5M0yZ0i60ij0iC|G5DFM00tB0uL0uT|G3M0yh0hR0h-0il|G3Gvg006z07g07o|G2M0F40kv0kI0kV|G2HLM00wu0wN0wK|G25ug001C020028|G1M0IX0lt0lP0lS|G1M0zS0iu0iD0iP|G1M0zA0iq0iC0iG|G1DCM00uz0uF0uM|G0H4g007k07o07L|F_EUM00u_0v80vu|F_CGg005606305D|F_g08K0Zb0Zf0Zs|F-M05D0dc0dz0dT|F-A2g004004504E|F-wDM00su0sw0sM|FZHxM00w90wn0wt0wH|FZHcM00w40w90wn|FZH3g007607p07q|FZEqg006406j06v|FYM0Ae0iM0iP0iS|FYKIM00wV0y30ya|FYddg000k00z010|FXM0Gu0kP0kV0lo|FXM0ds0aB0aY0aX|FXg03w0_10_70_j|FWICg007N07O08g|FWH4g007b07o07u|FWFWg006v06-076|FW5hg002402c02j|FWg03x0-X0_j0_8|FUM0Hd0ld0lB0lt|FUM00R0g40g40gt|FUM05S0db0d60ds|FUHnM00wd0wt0wu|FUg0bu0Ya0Yr0Z3|FSM0f-09v0aj0ak|FQEeg005D06706h|FQDaM00u20um0uL|FQCRM00tR0tY0uz|FPM0280eV0fW0fX|FOJmg007Q08o08n|FOFIg006706x06z|FNM05X0da0dc|FMM05X0cV0dy|FLH0M00vX0wf0wd|FK74g001x01E01M|FIM0Hz0lo0lS0lQ|FIABg004p04z056|FIg0840Zd0ZG0ZR|FHM04Y0dS0dT0ef|FHJxg008n08G08N|FHHxM00wn0wK0wu|FHg08U0Z70ZD0Zd|FGM0J40lt0lQ0yo|FGM0zJ0il0iu0iO|FGJsg008g08i08q|FFg0g00Xm00a0Xg|FEM0A50iG0iO0iQ|FEg01w0_v0_N0_W|FDM04t0dW0eD0eV|FDM06g0cF0cB0d7|FDGpM00vu0vK0vV|FDg0Ba11411C11R|FBJqg008a08n08F|FB6Yg001J01Q01_|FBg0zc10Q11411n|FyM0ce0aY0a_0b4|FxM0Cp0jD0jK0k3|Fx0pM00sg0sM0sD|Fxg0d_0Xm0Xw0Xy|FwM0A40iC0iP0iX|FvGLM00vV0vY0w4|FvGGM00vu0vH0vX|Fv5Qg001_02402c|Fve3M00mD0nr0o3|FuM0030g50gt0hf|FuFSg006v072072|Fuy7g003I045040|Fu1NM00r-0s00sg|Fty4g004503T03J|Ft1YM00rw0rG0s3|Ft5Tg001M025020|Ftg03X0-B0-W0_7|FsM0wJ0gF0hL0hi|Fsg0310_70_80_r|FqD5g005o05z064|FpM0cZ0aO0aP0b8|FpJfg007O08j08i|FpGNM00vK0vX0w2|Fpg03X0-B0-X0_m|Fog0970Yz0Z30Zb|FnM0wL0hf0hC0hN|FnM0130gd0g50gd|FmM0xH0hL0hN0i6|FmIvg007G07Q08a|FlM0130g10g40gF|FlM02j0fP0fP0fP|FlHOM00wt0wF0wH|FkGvM00vH0v-0vY|FjdNg000h00x00H|Fjg06Z0Zs0ZG0-9|FiM03M0ef0eE0fF|FhM07T0bm0bH0cp|FhBiM00tR0u20um|Fg4_g002002802m|FfKmg008N09o09F|FfHeM00w20w40wF|FeK2g008q08F092|FdG-M00vY0v-0wf|Fd0_M00s30sw0su|Fdg06m0-f0-o|Fdg06n0ZR0-g|FcM01S0fx0fx0fx|FbM01w0fF0fL0g1|FbKIM00mh0xI0y4|FbeUg00W-00h00H|F9DnM00uc0uB0uL|F9g0eU0000Xl0Xz|F7Arg003Y04E04R|F7g0Lk0mD13m147|F6F7M00v30vS|F5M05v0d70do0dS|F5JPg008i08j08N|F5F7M00uO0v6|F4M0Bn0iX0i_0jD|F3M0520dy0dU0dW|F3g01n0_r0_J10b|F3g0510-s0-X0-W|F2M0C10jp0jM0jG|F2M0xy0hi0hC0hR|F2GUM00vK0w30w2|F2Gxg007207q|F2Gtg006x06x07b|F1M01i0fX0g90g5|F1Gxg006K07r|F0g0G112e12k13w|E_Hng007q07r07A|E_g05M0-a0-r0-s|E-M0fK0aw0aO|E-M0fL09F0a2|E-g0CY11s11X12k|E-g09f0Ym0Z10Z7|EZM0Cg0jG0jM0j-|EZdxM00nI0o50o5|EZeXg000a00k00z|EYM0C60jC0jD0jK|EYdwM00o30ow0o30pX|EXCZg004U05D05L|EXg0eX0Xg0Xy0Xm|EWyZg003J03T04p|EW45M00r10ri0s0|EVHJM00wf0wB0wK|EVg0d_0Xl0XD0Xz|EUM06K0cv0cV0do|EUfcg000000900h|ETH8g007c07l07u|ESg05C0-o0-r0-B|ESg07b0Zs0ZH0ZR|ESg0fc0000Xh0Xl|EQM0B_0j50jy0jG|EQ5tg001Q01_029|EPJqg008a08d08F|EOM0E10kR0kx0kJ|EOM0CV0jM0j-0kd|EOI4g007A07O07M|ENL6g009209C0ak|ELM0CM0jK0jV0k3|EKHPg007u07v07G|EJL3g009k09F09G|EJ5ag001Z02502m|EJg09i0YS0Z30ZD|EHM03_0eB0eV0eP|EG4wg002902c02o|EG7TM00q80qi0qw|EFH0M00v_0v-0wm|EF1Ng002p02y03a|EFg0cu0XL0Y70YS|EE6Ig001M01Z025|EDM05E0cB0dy0dt|ECHHM00wm0wF0wV|EBg0xz10n10z10G|EBg0cu0XP0Yb0Y8|EAHmM00w30wq0wB|EA4kg002j02m02p|EzG6M00v60vn0vI|Ez1xg003703903l|EyM03S0eE0eI0f3|EyF6g006406g06K|Ey4hg002g02o037|ExM0Av0iO0iY0jp|ExJjg007M08j08f|Exg07i0Z10Zb0ZH|EwM0xf0hi0hv0hN|Ewg0790ZD0ZG0-g|EuM0CB0jy0jO0j-|EuJkg008b08d09k|EuI8M00wB0wS0y4|EuGVM00vS0w30wq|EtM06R0cp0cB0dp|EsKHg008f08Z09C|EsFUM00va0vp0vt|ErF5M00v70vt|Erg02F0_j0_m0_N|EqM08I0b_0bK0bW|EqF_M00vn0vq0vI|EqF5M00uK0va|Eqfdg000600a00p|Eqg05G0-j0-o0-s|EpM0860bH0bK0cn|EpGcg006h07c06P|EoM0Dk0k30k70kf|EoM01Z0fv0fX0g9|EoM02Z0fb0fv0fm|Eog0fb0Xc0Xg0XA|EnM0Av0iz0iX0i_|Eng06a0ZH0-90-j|EmM0BZ0jx0jC0jV|ElIsg007D07G08d|EkM0EZ0kx0kJ0kN|EkM0BX0j80jz0jy|EkGrM00vp0vt0vM|EjM02m0fh0fu0fL|EjBNM00tY0u60uz|Ejg0640-g0-k0-r|EiM0AB0iY0jp0j5|EiJYM00wU0xw0y3|EiGCM00v80vM0v_|Eie2g000p00z00W|EieDg000900x00t|EhM0Eg0kt0kv0kI|EhGxM00vI0vQ0vS|EhFbM00v50ve0vn|Ehg0630-50-j0-C|Egg0dZ0Xy0XA0XP|EfM02o0fm0fD0fv|EfM0410ep0eE0eI|Ef1Dg002k02U03a|Efg0cf0X_0Y70Yc|EeM03Z0eB0eP0eR|EeHtM00v_0wm0wI|Ee5oM00qq0qW0rw|Eeg0FK11R12j12r|Eeg0ca0Yb0Yx0Yx|EdM03v0eP0eW0fb|EdM05D0do0dP|EdM05E0cv0dj|EdGVg006P07r07m|EcM02E0fh0fn0fu|Ecg0dt0XD0XW0Y7|Eag0FJ12h12k13m|E9M03h0f30f90fh|E9M08E0bH0bM0bW|E9Jig008c08f08D|E9g02_0-W0_90_r|E8M0AI0i_0jC0j8|E8Ghg006K06O07l|E7Hpg007m07A07x|E7G4M00vk0vp0vF|E77LM00ob0qg0qq|E6M00Y0fL0g10gR|E6M0700b_0cn0cv|E6g0d-0Xh0XF0XD|E5FeM00va0vd0vk|E4FyM00ve0vF0vq|E3M0Da0jT0kd0kf|E3L7g009E09C09E|E3DLM00uK0u_0v7|E2Geg006u06P06U|E2yHg003I04003Y|E0M03I0eR0f30f9|E0M03O0eI0eK0eW|E0Kjg008D09k09e|E0H1g007l07n07v|E0GzM00vF0vM0vU|E0FdM00uD0vz0ve|D-M0BZ0je0jx0jO|D-M0AL0j50je0jx|D-M05J0cs0dp0dx|D-GoM00vk0vq0vQ|DZM04a0em0eB0eK|DZM0500dP0dS0ek|DZg0LZ0ne13H143|DYM0Cq0jz0jV0jT|DYHNM00wp0wq0wS|DXGGM00vz0vQ0wi|DWM03V0ep0ey0eR|DWfvg00WY00900t|DVB-M00tj0u20uc|DTM0720bW0cp0cs|DT5-g001Q02g029|DTg0fw0WY0Xh0XC|DSI3M00wI0wU0wV|DSg0dX0XA0XC0XW|DRg0d80XF0XP0X_|DPH1g007a07m07x|DPg0Fz11X12m12j|DPg0g00060010Xc|DOM04f0ek0ep0ey|DODlg005g05z05N|DNM04n0dU0et0em|DNDBM00uD0uO0v5|DNyQg003T03Z04z|DNg0J-12j13f13H|DNg09O0Y80YR0Z1|DMM03o0eW0fa0fb|DMM0570dt0dI0dU|DLM0wg0g90gS0hb|DKM03o0e_0f90ff|DKCcM00u60ug0uF|DKeoM00ne0nH0nI|DJM0wF0gR0hd0hv|DJM08S0bg0bC0bM|DJI7M00wM0wS0xI|DJg03L0-P0-_0_9|DJg0cY0XW0XY0Yb|DIM0wY0hb0hd0hC|DIM02C0ff0fm0fy|DIM0420em0eK0eL|DIJDM00xi0xz0xI|DIDrg005L05P06d|DHg0wh0_N10810h|DGyQg003R03Y04l|DFF5g006d06h06u|DFg0aY0Yc0Yc0YK|DEM08v0bF0bK0c1|DEg09R0YK0YS0Zx|DDM0Fe0kt0kI0kP|DDJMg008b08p08Z|DDFFg006g06B06O|DDeMM01470m_0nr|DDg0FO12h12N12Q|DCg03u0_40_n0_m|DCg04x0-F0-G0-P|DBM0Dv0k20k70kd|DBHsM00wi0wL0wI|DABeg004l04z04U|DAg04i0-L0_40-_|DyJfM00xf0xf0xw|DyHiM00vU0wh0wp|Dyg04S0-C0-L0-G|DxJeM00wM0wW0xi0xi|DwM0Fn0kN0kZ0ld|DwM0E00kZ0kx0kN|DwM0wG0gS0hb0hv|DwM02g0fu0fz0fB0fB|DwHQM00wp0wE0wM|DwEYg005N06c06g|DvM02h0fD0fy0fD|Dvg04M0-F0-N0-L|DuM0300fa0fn0fg|DuM06-0cn0ct0dj|Dug0500-k0-N0-F|DtM02i0fn0fz0fB|DtM03V0ey0eS0e_|DtHVM00wL0xf0wU|DsL5g009G09G09H|DsBng004R04T05z|Dsajg001901e01i|DrM02i0fg0fy0fD|DrM0300f00ff0fz|DrHwg007n07v07z|DrzJM00t30tl0u6|Drejg000600p00u00u|DqM0CA0jO0jS0k7|DqM0wh0gO0gR0hd|Dqeig000t00t00C|DpM03y0eL0fa|DoM03y0eS0fg|DoDkM00uC0uC0uK0vd|Dobfg001301m01e|DnDjM00uB0uD0uD|DlFYg006m06u06U|DkKDg008J08Z09H|DkJug008c08D08J|DkzSg003Z04r04R|Dk7hM00qi0qp0r1|DjDdM00ug0uF0uC|Dj4Pg001Z02p02k|DiBmg004r04U04X|DhL7g009e09E09Y|DhJig008b08708p|DhGmg006B06O06X|Dhg0d40XC0YA0X_|DgHAg007i07x07D|Dgcrg000W010013|Dgg0wE10b10s10n|Dgg0dZ0Xc0XE0XF0XY|DfaQg001901f01m|Dfg0LY0mQ13-147|DeJdg007E07Z08c|Dec9g000_01f019|Deg03T0-P0--0_4|Deg0aa0Yx0YA0YR|DdGwg006X07i07n|DdGog006F06U07a|Dd7iM00pX0qv0qq|Ddg0LX13q142143|DbM0wd0gA0gS0gU|DbM05e0dx0dP0e6|Dag06s0ZQ0-b0-k|D9M05w0cM0dj0dI|D9M0du0al0aY0aQ|D9g02W0_90_d103|D9g03T0-U0-_0_b|D8HZg007z07M|D7HZg007B087|D6M00e0go0gv0gO|D5LXg009D09H0aM|D5HgM00vC0wi0wA|D3HYg007j07E07J|D3zLM00t70tj0tP|D3e3M00nr0nA0ow|D1M0Cy0jc0jT0k2|D1M03O0et0eL0f0|D1HJM00wL0wA0wW|D1g0dY0Xx0XC0Yt|D0GOg007a07j07z|D0cEg000x00U00_|D0g0zN10-11211s|C_M0KF0mr0y3|C_M0AW0j80jc0jz|C_JYg008p08C09e|C_EUg006106d06m|C_Bpg004P04T058|C-M0wj0gw0gO0h1|C-HHM00wh0wR0wE|C-eXM00mQ0ne0nd|C-f3M01430mX0m_|CZM06-0c10cs0cz0cM|CZaJg001301e01i|CX4Cg002g02n039|CWcUM00nH0o50oA|CVM0Fz0kt0kP0l0|CVM0CU0jS0jY0kf|CVM08W0bo0bF0bO|CV9cM00o50pe0qp|CVg06l0ZQ0-50-i|CUM00z0gA0gv|CUM00A0g80gb|CUM00-0ge0gm0gb|CUG6g006s06G06X|CUeaM00ny0nX0nH|CUeMM00mX0m_0ny|CTGOg006Z07i07B|CTFfg006c06B06s|CTecM00nd0nz0nA|CScSM00om0ow0pe|CRCGM00uc0ud0uB|CRA5g004l04m04T|CRcIg000K00W018|CRdug000400u00K|CQM0dn0aM0aO0b4|CPM0ct0aQ0b80bf|CPGaM00vd0vC0vU|COM07M0bM0bY0ct|COCig005805P05L|CNM00U0g80ge0gm|CNFAg006m06p06F|CNg0e10X40XB0XE|CMM06o0ct0dx0dd|CLIeM00wE0wR0xf|CLg0g00WY0040WX|CKM0480ek0ew0eS|CKBNg004X05905g|CKfWg000100v00C|CJazg001f01m01l|CJg0g00020010X4|CIM00l0go0gw0gA|CIg0fW0WX0Xv0Xx|CHzWg003R04u04r|CHg03q0_b0_p0_n|CHg03t0-Z0--0_d|CGM0FE0k-0kZ0k-|CGBOg005805b05m|CGg0Kd13f13-13R|CGg0w_10310h10z|CEM08s0bo0bC0bY|CEcVg000C00L00U|CEg0JG13113m13q|CDG9g006t06F06Z|CBJIg007Z08J09D|CBB5g004u04O04X|CAI3M00wA0xy0wW|CAg0xs10s11210D|CAg0440-N0--0-Z|CAg04n0-C0-G0-U|CzCsM00tQ0u80ug|Cyd5M00nX0oq0oA|CxM00l0gv0gx0gU|CxM0820bO0bR0c1|Cxe-M00mQ0mV0nd|Cwg03T0-U0_a0_b|CvM0dw09Y0aN0aQ|CvyBg003Q03Z04m|CuM0wt0gU0gX0hr|CuM00l0gr0gw0gX|CuM00R0g80gb0gr|CsB3g004C04N04P|CqM02r0fH0fH0fH|CpyAg003B03R03-|Cpf0M00mX0nz|CoM00v0ge0gE0gx|Co4sg001E02k02C|Cog0aG0XY0Yt0YK|CnE3g005V06c06p|CndEM00nA0nM0om|CmM0wm0gx0gE0h1|CmGdM00vA0vz0wh|Cmz2M00t30tf0tl|ClM0AU0j30je0jS|ClM0dv0ar0aM0b6|ClDsg005g05N05S|ClAJM00tl0tO0tQ|ClyTM00tj0sV0t7|Clakg001i01k01B|Clg0DL11o11R12h|CkANM00tF0tP0ud|CkAIM00tN0tN0tP|CjAHM00tg0tq0tO0tO|CjA8g004m04P04C|ChM0bk0b40bg0bg|Charg001801d01l|Chbog000U01d01k|CgM0bj0bf0bf0bj0bF|CgL3g008C09Y0ar|CfM09F0bC0bv0bO|CeM04L0dI0e10el|CeIZg007J08708C|CecVg000F00K01d|CeebM00mV0ny0nG|Cd7Qg001B01J02n|CcM0260ft0ft0ft|CcGpg006G06Y06Y07j|CcDwg005F05P05V|Ccg06-0-50ZN0-b|CbGog006w06Z06Z|CbDFg005S05X061|C9d2M00oF0om0oN|C9dVM00nG0od0nX|C9g07F0YR0Zy0ZN|C8JFM00xw0xy|C8e3M00nJ0nz0nM|C8g0LY13R13-|C7BVg004W05905d|C6M0wW0h10hs0hW|C405M00sg0sA0sD|C4g0700Zx0ZO0ZQ|C2Aug004u04A04O|C1g0LU13q13Q142|B_6VM00pA0qp0rs|B_g00x0_n0_G10s|B_g06_0Zy0ZN0ZY|BZ3wg001H02n02U|BZg0Id12m12N131|BYM05N0cM0d10dq|BYg0IZ12Q13f13d|BYg0640ZZ0-b0-m|BXJEM00wR0xA0xz|BXB_g005405b05m|BXg0LT13G13R13T|BWg0LV0nv13Q146|BVM08a0bQ0bY0cg|BVaSg000L01801k|BUCCg005905d05F|BSM0AF0iz0jc0jr|BSM0040fO0gr0gX|BSg0zo10z11a114|BRFsg006106s06t|BRD6g005m05C05S|BPB0g004J04O04W|BPArg004x04C04J|BOM08f0bv0bR0bS|BMb9M00oA0p40pX|BMg0g00WX00s0X0|BLM0zH0ia0iY0j3|BKJGM00vA0xy0xJ|BKD4g005v05F05K|BIASg004A04G04N|BIyQg003C03Q047|BI88g001l01E01H|BH2ug002C02O039|BHg0f-00b0020X7|BGM0Fz0jY0l00l0|BFehg000400s00E|BFg05P0-40-i0-n0-w|BExig003x03Q03C|BEeug000200b00v|BEg0Li13d13F13Q|BEg0HY12m12I12Q|BEg06M0ZY0-40-i|BEg06O0Zy0ZO0ZZ|BEg07p0Zx0ZY0ZO|BDyiM00t10t10t3|BCg0ea0X40X70XB|BBM06M0cg0ct0cC|BBIhg007w07B07Z|BAg0dZ0Xv0Xx0Y00Yf|BxM0wW0hk0hr0hW|BwBog004N05b050|BvM0fz09D0ai0aN|Bvdkg000E00L00Q|Bvdsg000o00v00F|BuM0440el0et0f4|BuM08a0bP0bQ0c4|Btg0Lh13E13E13G|Btg0fI0X00Xj0Xv|BrFEg006p06w06G|BqM09k0bo0bG0bQ|BqDRg005Z05Z|BqDQg005U05V|BqzjM00t10t70tg|BpDSg005Y05Y05-06T|BpAHg004x04J04V|Bpg06x0ZZ0-n0-m|BoM04i0e60e80ew|BoAhg004704A04G|BnGbM00vB0vC0xA|Bng0bf0XE0Yl0YA|BmM0fN09g0ah0ar|BlM0fO09i0a60ai|BjM02A0f40fO0fO|BiM05E0d10dd0dv|BgM03s0e50ew0fq|BgBvg004V04W054|BgzuM00tf0to0tN|BfM07k0bR0ch0cz|BfBGg005005d05e|BfyOM00sV0sV0tf|BeM05C0dl0dq0dE|BedlM00nJ0nM0ov|Beg01M0_s0_w103|BdM0CK0jw0k-0k2|BdM0xS0hr0hs0i1|BdM04Q0dE0e60e8|BdM0630dd0c_0dq|BdM06G0cw0cz0cO|BdwAg003s03B03y|Bdd_M00nv0nG0od|BaM04I0e10e50el|B9M01X0fq0fq0gE|B9M07h0cf0cg0cw|B9fbg00X000c00s|B9g0A710r11211o|B8ekM013T0nx0nJ|B7COg005q05C05E|B6brM00oQ0pA0pe|B5CIg005e05r05v|B5Bng004G04S050|B5cWM00oJ0od0oF|B5g0Ju13113613G|B4M0650cO0d1|B3M05k0dv0dK0e1|B3M0650c-0dl|B3cJM00oq0ov0oN|B2M0wN0hs0hp0i1|B2M06n0cC0cK0c_|B2C2g005405c05q|B1JZM00vE0xA0yn|B0g03t0-w0-Z0_l|A_FOg006t06Y06T|A_g02r0_p0_w0_G|A-ciM00oq0oF0oQ|A-g02K0_d0_l0_s|AZM0y20hk0hW0i7|AWM05I0d00de0dv|AWM07l0c40c50ch|AWM07I0bS0c50cf|AWDCg005O05X05-|AWc6M00oJ0oN0p4|AVM06R0ch0cC0cx|AVDjg005C05E05O|ATM06R0cr0cw0cy|ATzjg003-04b04x|ASxvg003B03D03-|ASwPg003s03x03D|ASg02_0-y0_a0_p|ASg05O0-40-m0-q|AQM0660cK0d00d9|AQDXg005U05Z06Q|APzYM00to0tN0tF|APzUM00tg0tU0tq|AOM06N0cx0cA0cI|AOKGg00a00ah|AOKFg007T0ai|AMDrg005G05K05U|ALD5g005v05G05K|AKM04N0dR0e80f4|AKM07I0bU0c40cf|AKAlM00tq0tQ0tX|AJM05M0d90dl0dK|AJM0fW0a00ah0b5|AIM08l0bG0bS0bU|AIg0L913A13F13F|AHM0BT0jr0jY0jZ|AHM0wT0gP0hk0hF|AHM05W0c-0d40de|AHM06p0cI0cO0c-|AHxvg003y03C03E|AGM06q0cy0cK0cP|AGM0a90b60bg0bn|AFM0yl0hF0i10ia|AFM08Q0bv0bV0bP|AFg05I0-00-n0-t|AEM0yp0i70ih0iz|AE2pM00rs0sa0si|ADM0By0j30jj0jw|ADM0f_09i0a40a6|ACg0bx0Yf0Yp0Yt|ABg0AV11a11t11X|ABg05s0-m0-t0_a|ABg05y0-p0-q0-w|AyGcM00v90vA0vE|AwD8g005E05B05O|Awg0K_13a13E13Z|AvM05Z0cP0d90du|AuM05c0de0dE0dQ|Aug0bl0Yl0YE0YG|Atg0bX0XB0Y40Yl|AsBig004i04V04-|ArCIg005q05p05B|AqM06n0cI0cJ0d4|AqD3g005r05x05G|Aqf7g00X100b00o|AnBXg004-05i05e|AmM06L0cr0cy0cJ|AmeIg000c00E00Q|AlM06_0cm0cx0cA|AkM0xl0hm0hp0i7|AjM0cp0aN0b50bj|AhBtg004S04Z05c|AfM0530dN0dQ0e5|AfM0550dK0dM0dR|AfM06q0cA0cP0cR|Afg0LZ13T13Z|AeC4M00tX0u90ud|AdM05D0d40d50dM|AdGlM00vB0xJ|Adg0f60Xj0Xn0Y0|Adg0f80X10X70Xk|Adg0fY00c0030Xj|AcM09T0bj0bA0bA|AcILg007w09g09t|AcGlM00v90wl|AceSM00mY0nx|Acg0cT0Xk0XB0Y4|AbCHg005i05r05x|AbBsg004j04-052|Aag0aq0Yp0YL0YL|A7M05b0du0dN0dQ|A7g0LX13A13Y146|A6M0wf0gC0hp0hm|A6M0870bP0bV0c5|A6LDM00mr0wl0xJ|A4M0870bG0bU0bX|A4M0fZ09t0a00at|A4BeM00tF0tU0u8|A4g06A0Zw0-d0-q|A4g0cG0Y00Y30Yf|A3M0wQ0gP0hg0hF|A1g0Ht12p12N12O|A0egM00n50nv0nF|z_g0Jj12O13a13d|z-M0850bV0c60c2|z-Cpg005c05w05p|zYalM00p40pD0qv|zWHsg007307J07T|zWg0Jo13613g13A|zVM06i0cJ0cL0d5|zVCWg005p05w05B|zUM0Ly0mh0mj0yn|zUKVg007T0a40a1|zRM05Y0cR0du0dA|zRcOg000o00F00T|zQM0740cj0cr0cL|zQeZM013Y0n50nF|zPM05a0dA0dM0dR|zPM0990bn0bn0c8|zPg05L0-l0-t0-y|zNM06p0cm0cR0cQ|zMw6g003x03u03y|zMg0H_12I12K136|zMg0a80YG0YG0YJ|zKM00a0g30gP0gG|zKg0LX0mY13M13Z|zJM07a0ce0cu0cm|zJM07M0bX0c60ce|zJ75g001c01B02C|zGM07o0c20cd0cj|zGg05Q0-c0-d0-p|zFM0cq0a60at0b6|zFcAM00ov0oI0oQ|zEe3M00mY0nt0nx0oH|zDARM00to0u40tX|zAg07G0Za0ZW0-0|zwxIg003u03D04b|zucCM00oH0oJ0pD|zug06g0-00-c0-l|ztcEM00nF0oD0oI|ztg0580-e0-p0_l|zsM0w20gC0h30hg|zsM07I0bX0c20cd|zsg06g0-80-d0-l|zrM07p0c60ce0cu|zrcLg000J00J00Q|zqM05q0d50dr0dN|zpg0aw0Y30Yp0YJ|zoGlg005Z06w06V06V|znGmg006T06T073|zng0FX12i12I12J|zmg02g0_s0_u0_G|zlM06V0cd0cj0cG|zkzsg003E04704h|zkg01Q0_u0_R0_R|zkg06R0Zw0ZL0-8|zjg02h0_y0_w0_E|zjg0al0YE0YI0YL|zjg0g00X100d0X5|ziM0wK0gG0hm0hn|zig06o0ZW0-70-c|zig0eT0Xf0Xk0Y2|zeF9M00vB0vD0vl|zef6g00WZ00300q|zczyg004j04S|zczxg004604b|zbg0Lt13s13Y13X|z8g06p0ZL0-80-e|z6M0180fw0gC0g6|z3Gtg006Q06V07w|z3zMg004i04Z04M|z2g0cG0Y20Y40YE|z2g0fS0030WZ0Xf|z1g0JJ13513a13s|z1g0fm0X50Xn0Xi|y_M0wR0h30hg0hw|yYg0Kw13g13u13M|yXcMM00of0oH0oV|yWM0110fw0g30gg|yWCVg005i05x05I|yWg01i0_E0_E0_S|yVM0yK0i30ia0jj|yVg0Hz12J12P12O|yVg0cK0Xn0X-0Y3|yUM0CL0jw0jQ0jQ|yUwmg003s03v03E|yUg0f_00d0Xd0X5|yTHkM00vD0wk0yn|yTzgg003v03O04h|yTg0Hu12p12v12K|ySM06r0cq0cu0cN|yRM06k0cL0cN0dg|yRM06o0cq0cG0cQ|yNg01h0_I0_R0_U|yLC6M00u40u40u8|yJM0Cs0jv0jZ0jZ|yJM0wx0gG0hw0hn|yJM00L0g60gy0gy|yJg06f0ZK0-70-y|yHM0B20ih0jr0jl|yHemM00n40nF0nS|yGBVM00tU0u90u9|yGacM00oI0pA0pC|yGg0LX0n413M141|yFM0wZ0h30hn0hJ|yFGig005-06A073|yDM0KO0mi0mr|yDM02l0eQ0g30g6|yCM05E0dg0dA0eu|yCg0f90Xd0Xf0XN|yyg01x0_y0_O0_S|yyg0750ZK0ZW0-7|yxeSM013X0mP0nt|ywM05K0cQ0dr0dh|ywg04X0-u0-z0-K|ywg0am0YJ0YP0YP|yvg0KN13s13v13v|yvg02c0_u0_F0_I|yudMM00nt0nC0of|yug0KO13u13I13u141|ytM03P0ee0eu0fw|ytM05K0dg0di0ed|ysM0470dr0ed0eQ|yrM0BM0js0jQ0ky|yqM0KG0me0mj0xG|yqM00i0gg0gg0gM|yqg09V0YI0YI0Za|ypM0Bd0jh0jj0js|ypdiM00nS0og0oD|ypg0Bf10v11o11x|ypg0760ZJ0ZJ0ZL0-e|yoM0Bz0jl0jN0jv|yog0Jj12P13713g|yog0770ZC0ZK0ZK|ymM05K0cY0dh0dL|ykM0700cG0cU0cN|yjM0fx0a10a40b5|ygg05x0Z_0-D0-z|yfg0I612K12L135|yfg0540-u0-x0-D|ydM0Ks0m50mi0x_|ybM0f_09f09t0at|ybg0FF12612p12v|ybg0ft0WZ0XN0Xi|yaeyg000d00g00i|y8AZg004j04q052|y5M0wc0gy0gV0hJ|y5deM00oa0of0oE|y4g0HU12U13712P|y4g0180_O0_S0_-|y2HkM00vG0wl0ws|y0g01l0_F0_I0_U|y0g08U0YP0Zc0Zw|x_M04w0dh0eu0ee|x_BBg004M04Z05I|x-M0xo0gM0hw0hO|xYg0480-K0-S0_5|xYg04A0-x0-D0-R|xYg08S0Z90Za0Ze|xWeXg00W_00g00q|xVHxM00wk0ww|xTM0y80hO0ih0ib|xTcLM00og0oz0oV|xTg0LY13v13V13X|xSM0xB0hu0hJ0i3|xRM04u0dL0ed0eQ|xRf4M00mA0mW0n4|xQM0wj0hh0gM0hu|xPHBM00ws0wJ0xG|xPg0Bq11k11t11L|xPg01N0_y0_B0_O|xObKM00oD0oE0oX0oX|xOg0460_e0-R0_5|xNM0Cp0js0jW0kg|xNbJM00oV0oV0pn|xNg0580Z_0-z0-K|xMg03G0-R0-S0_k|xMg08J0Z90Zc0ZC|xJM06a0cU0di0dL|xI4fM00qv0rE0rW|xHe8M00no0nZ0nS|xGM06h0c80cq0cY|xGw7M00sw0sy0sO|xGc_g000T00I00T|xGg0G612i12s12J|xGg0dz0Xd0Xi0XO0XO|xFg0dy0XN0XN0XX|xEM0Eh0jv0kg0kC|xDacM00pn0pD0pP|xBM0B10ie0jl0jn|xAGpM00vl0vs0wk|xAg0wY10710p11a|xzdtM00nZ0og0oz|xzg0c-0XX0Y20Yg|xy02M00si0t20sA|xxg0F412412i12o|xxg07i0Ze0ZJ0ZS|xxg08V0Zc0Zp0Ze|xwFzM00uW0v90vG|xwg0d70XO0XS0X-|xvM0wX0gV0hh0hO|xvwqg003u03w046|xuM0JL0lr0me0mw|xug0Jk12L135139|xug0G312o12v12E|xtM0CE0jN0k00ki|xtdBM00nC0nR0oa|xsJUM00mi0ww0xx|xsxHM00sA0t20tn|xscSM00oa0oC0oE|xrKEg006H0a10au|xqB8M00tn0u30u3|xpM0Dw0jN0ko0ky|xpfYM013V0mP0mW|xpg0LW0mA13P141|xoaUM00oX0p30pC|xnwqg003z03v03A|xmg0LR13I14013V|xmg0Ln13j13v13P|xmg02_0_50_z0_B|xlDeg005205w05Q|xlg0FW12612n12s|xlg0di0Xb0Xu0XX|xkM0wK0gV0ho0hu|xkcPM00ox0oz0oT|xkg06F0ZS0-u0-x|xjM05c0cY0di0ee|xhg0Jo13013713j|xgeZg00W_00i00q|xf3PM00qD0rs0sa|xaDvg005k05I06e|xad8g000y00J00V|x9JEM00xv0xv0xG|x8JDM00xh0xt0xx0xx|x8g06X0ZC0ZV0Z_|x6A3g004d04d04M|x4M0DP0kg0ki0kC|x3M0Dz0jW0kh0ko|x2JfM00wJ0x60xv|x2BUM00tW0tW0u5|x2erM00m-0nC0nL|x2g0f-00i00g0Xb|x1FXg006r06Q06H|x0G9g006A08209f|x0e-M00mA0mP0m-|x0g0IM12T12U139|w_M0CO0jL0jW0kh|w_brM00oT0oZ0pn|wZBXM00tZ0u30uH|wZzPM00sO0tW0tx|wZbOM00ox0oC0p3|wZeXM00mW0n70no|wWM0EC0ko0ky0kz|wWg0In12L12T130|wTM0Dx0k00ki0kq|wT0YM00rW0se0sy|wRM0Bh0j10jh0jL|wQg0FP12412A12o|wQg0xf10m10p11t|wPM0wR0hh0hE0hE|wPdMM00nN0nZ0ot|wNHOM00ww0wz0xh|wMEYg004Y05Q06r|wMg0JW13913k13I|wK1iM00rE0rW0se|wK9pM00pC0pO0q6|wKdSM00nL0nU0nR|wKdWM00no0nE0nN|wJztg003S04q04q|wJg0wV10m10r10v|wICBg004F04Q05Q|wIg0fz0W_0X60XS|wHM0yr0hE0i30id|wHFvg006e06q06A|wH19M00sa0sn0si|wHg0F112612512n|wGyog003L04603S|wFG6M00uW0vP0vG|wFAaM00tn0tz0tz|wFxfg003w03z03L|wFg0wT10710v10p|wEAbM00tx0t-0tx0tZ|wEydg003A03N03O|wDcTM00oC0ot0oT|wDe3M00nk0nU0nL|wDg0JX13i13j13r|wCg0LY0mO13O13P|wBM0xi0ho0ho0ib|wAM0Ep0kq0ku0kC|wAcIg000I00X017|wAg0JU12S13p13k|wAg0bR0X-0Ye0Ys|wzM0yv0hB0ib0ie|wzM05J0dm0dm0dm|wzM07G0bA0bD0cU|wxyBg003O04e04d|wxeRM00mO0m-0nk|ww9qM00p70pU0pP|wvcZM00nR0ol0ox|wtKCM00me0xP0xW|wsM0DV0kh0kz0ku|wrewM00n70nK0nE|wpM0yD0id0ig0jh|wpHHM00wo0wJ0x6|woM05I0dk0dk0dk|wog0Im12U12S130|wog0GK12s12A12G|wnM0Ck0jn0k00j_0kk|wng0fN0080X90Xb|wmEjM00uQ0vl0vs|wkM0yE0i80ie0iU|wkg08i0YX0Z90ZV|wiM0E00kk0kq0kz|whIPM00wz0x70xh0x7|whg0Gn12n12q12E|whg0bf0Yg0Yu0YH|wgKaM00xt0xW0x_|wgIQM00x60x60xs|wgd_g000800I00X|wdf5M01400mH0n7|wdfsg00X600j00y|wdg0H912y12E12S|wcJBM00xs0xv0xP|waM0DD0jL0j_0ku|wad6M00o00ot0oZ|wag0Kq13k13p13O|wag0F311P12412q|w7JwM00x70xr0xt|w6g0Ik12G12T13i|w6g0200_k0_C0_F|w4BxM00tz0t-0u5|w2JuM00wo0xo0xs|w2bsg000V00Z01b|w2g00a0_-10r10m|00dJM00nE0nN0o0|022Kg002q02U02X|04M0CN0jL0jU0kk|06aWg001H|06aXg001701a|08fbM014a0mO0nK|09DXM00uH0uW0vP|0abIM00ol0oY0p3|0cM02L0e40ez0eF|0cABg004e04B05k|0eBAM00tz0tZ0ua|0eg0G012512y12A|0fM0AC0iU0iZ0jn|0fM03_0dX0d-0fj|0fg0LG13r14a140|0hHsM00wj0wz0xr|0idXM00mH0nk0n-|0ig06R0Zp0ZS0ZX|0jGzM00uQ0vs0w1|0kg0CB11x11B11P|0mdyM00nU0n-0ol|0ocDg000y00V00Z|0og0fH0X20X60Xu|0qM0Ao0ig0iV0j1|0qJqM00xa0xr0xu|0rdzM00nK0o40o0|0scCg000O00X017|0tM0CA0jo0jJ0j_|0uKxM00xP0yc0x_|0uzwg003S04f04F|0u9fM00pv0pO0q6|0vFtg006i06r07X|0vbIM00o40p70oZ|0vg09C0YH0Zp0Zh|0wHjM00w10wv0wo|0xg0L-0mH13O149|0xg06P0ZM0ZV0_e|0yM05n0cD0dC0dX|0yG-M00vx0vP0wj|0yg0ap0Ys0YF0YX|0zDsM00u50ur0uQ|0zdwM00n-0n_0oY|0zg0G712q12x12G|0Azwg003W04e04B|0Ag0BT11z11z11L|0BeWg000500800O|0Bg0BS11k11Q11B11B|0Cb2g000R01b01g|0Cg0b70Ye0Ys0YF|0DM04X0dD0eF0d-|0DM0fw09f09h0ay|0DJ6g006H08T09h|0DaIg001201a|0FM0Hk0l50m50lK|0FM0x70h60id0hD|0Fg0ar0Yu0YB0YH|0Ig00N0_P0_U107|0JM0Ap0ik0iU0iZ|0JJCM00xo0xK0y9|0KM0yn0hD0ig0ii|0KKPM00mw0xW0y9|0K4gg002e02O02x|0Kg0740ZB0ZT0ZX|0LKLM00xu0xK0yc|0L5Ag001Y01Y02e|0LdyM01490o70o4|0Lg0CR11L11Q125|0Mg0ee0X90XI0XS|0NySM00sy0sO0t5|0Ng08G0YX0Y-0ZB|0OM0xf0hy0hB0i8|0Og0CS11z11P11T|0PM0Av0iV0i-0j1|0QM0wy0hx0hB0hy|0RfCg00X200j00e|0Rg0G712812M12y|0Sxdg003w03A03N|0Sg0K213i13o13r|0U2pg002x02O03c|0Ug0AG11111x11z|0Ug0b-0Y90Yg0Yu|0VHzM00wj0wD0x1|0VyZM00sF0t20t60t6|0Vg0L-0n_13W14a|0Vg0fX0050X80X9|0WAtg004f04F04I|0Wy-M00t50t50tr|0XM0LY0m50mu0yc|0Xg0K213l13p13W|0Xg07m0Zh0Zu0ZM|0YbpM00oY0p60pO|0ZM04R0dX0dY0eF|0Z0GM00se0ss0sF|0Zg03l0ZX0-S0_z|0-g0LX13o145149|10M05o0d30dD0dY|10M0f30a-0a-|10M0f40af0au|12M0x00h60hx0hD|13KFg008209M0au|13C_M00ua0uH0vx|15M0w_0gs0h60hy|16bpM00p00p70pv|18M04U0dC0d-0dZ|184Wg002302d02q|18duM00nQ0n_0p0|18g0cm0XH0XI0Ye|19xqM00sn0tr0t5|1aM0Cb0jB0jU0ke|1bM04T0dG0dY0e4|1bg0LZ13l13S13W|1cg02a0_e0_k0_C|1dM04O0dZ0fj0eb|1d8nM00pP0pR0pU|1dbxM00o70o_0p6|1fM0Do0jJ0k90l5|1hg0yf10g10J10W|1hg01Y0_z0_B0_P|1kM0G20ke0l30lr|1kg09r0YQ0Zg0Zh|1l63g001W023023|1mM05-0cD0dC0dG|1mK3M00xl0xu0y9|1nAPg004204B04Q|1nbCM00op0oS0p0|1qM06A0dD0dH0d3|1r4_g001W02e02u|1sC7M00t-0t_0ur|1sBcg004I05k04Y|1s3Gg002q02u02X|1tM05h0d30dO0dZ|1tK8g008208U08U|1tg0yG10P10T111|1uK9g008T08T09u09q|1uawM00p60pR0pU|1vIJM00wv0w_0xa|1wIWM00x10xo0xl|1xLgg009h09q0af|1yg0JY13o13n145|1zg0dK0Xu0XH0Y9|1Bg09U0YB0YW0Y-|1Cg07S0Zg0Zt0ZB|1EM0F_0kj0l20l5|1Fg0LV13n13_145|1GM0fR09M09-0ay|1HKQg008U09u09M|1Hg0zm10W10Z11k|1IM04x0dO0e40ez|1IdNM00nm0o70o9|1JM0Bi0jU0jA0jA|1JBrg004Q05506e|1J3Sg002d02x02w|1Jg01k0_C0_Y0_-|1Jg0aC0Yw0YF0YQ|1KM08T0bB0c80bZ|1K0xM00sn0sp0st|1Lg0dS0Xt0XI0Y9|1MJoM00xa0xq0xK|1MHJM00w70wv0w_|1NM08Y0bs0bI0bD|1N0pM00ss0sE0t9|1Og08I0YY0Y-0Zu|1Pyng003z03L03W|1Pg0fH0WW0X20Xt|1QM05a0dG0dH0eb|1Qg0J_13C13l13S|1SM0Lq0lK0m30mu|1SM0II0lr0lO0mp|1SM00u0gh0gn0hx|1ScQg000j00Z00P|1TM0LV0mp0mw|1TM0yM0i80if0ik|1T0zM00sl0ss0sr|1Tf0g00WW00500P|1UM0AA0iB0iZ0j9|1UKVg008U09q09I|1VM0yX0ii0iV0ir|1Xg07-0Z50Zr0Zu|1ZM0B-0jJ0k1|1ZM0BZ0jo0jo|1ZzZM00sF0t60tu|1Z0xM00so0sp0sz|1-g0g000e0Xe0X8|1_g0eg0X80Xo0XH|20BCM00tK0u10ua|22M0IT0lK0m80m3|22JuM00w_0xl0xn|22G9M00ur0w70w1|23M0g009I0af0a8|24M0yD0h_0ii0in|24Lag009n09u09-|24dtM00nB0nQ0op|24evM00mM0nb0nQ|25AAM00tu0tG0t_|26IGM00wD0xq0x1|27M0Jz0lO0mq0mp|27A9M00t90tr0tK|27cPg000e00O00R|28g0LY0mM13C13S|29M0420eb0eh0fj|29bOM00ou0pb0o_|29cOg000P01201a|2bg0F711V12x12g|2cyMg003N04204f|2c0NM00sd0so0sp|2c3Mg002s02u02P|2dM0FX0ks0l30l8|2dM00A0gh0gs0gN|2dd2M00o90ou0o_|2eM0zI0ir0i-0j6|2gM0AP0i-0j60jb|2gM0zw0ik0it0iB|2gM00K0gs0gi0gn|2gg0De11m11Q11V|2gg0yu10J10W10Z|2gg0aZ0XG0YB0YW|2hM0Dc0k10ke0kj|2hg0z710T111119|2iBKM00tL0t_0ue|2jF9g005t06q06k|2jcXM00ok0op0oS|2jf6M013_0n30nm|2l69g001S01Y02d|2lg09C0Yw0YQ0YY|2mM0a60b00bd0bd|2mg09z0YW0Y_0Zg|2ng0xU10g10T10P|2oM0zz0in0ir0iv|2oM0cG0az0az0b0|2pM0zA0ip0it0ja|2pg0AO11c11c11T|2rM04r0dJ0dJ0ez|2sFdg005s06i|2sg0wz0_Y10P10J|2tFdg006E080|2vM0DC0k90ks0l3|2v3-g001T02r02w|2vg0890Z80Zj0Zt|2wM0cF0aZ0a-0bk|2wITg006q07Y07Y|2xIUg007X07X08007_|2zM0AI0iB0ja0j9|2zKOg008M09I09T|2zJ0g007Y08t08M|2z1rg002P02X03g|2AM05g0cD0dO0dJ|2Bg0100_P0_T10g|2CM0CQ0jB0k80k9|2DM05d0dH0eh0eh|2Dg09b0Y_0Zt0Z8|2Eg09o0YY0Z00Z5|2FK1g007_08K09n|2HM0wc0gn0gH0hG|2Jg0HX12x12Y12Z|2KM00F0gc0gh0gq|2Ky_g003W04c04I|2Ng0900Z00Z50Zr|2OM00x0gi0gu0gH|2O2Hg002w02H03c|2PJYg008t08M08L|2QCJg005505s06i|2Q6Cg001z01R01W|2Qg0Ah11911m11m|2S1cM00sc0sc0sl|2T1dM00sd0sd|2ULCM00yl0yl0yl|2U1dM00rV0r_|2VM00S0fT0gu0gi|2VLBM00xR0xY0ym0ym0ym|2YJyg007_08B08K|2YbfM00oG0oS0pk|2ZM0w50gq0gK0gN|2ZM09t0bL0bB0bI|2Z14g002T03c03h|2Zg0Dz11T11W128|2Zg06W0ZF0ZM0-h|2-BGg004L04Y05t|2-6Gg001F01T01S|2-e9M00nb0o90oc|2_g0A310Z11O11c|30M0DY0kj0kr0l2|30M0xV0hG0if0in|30zaM00st0t40tu|31M0Da0k10k60kr|316Cg001R02102s|319nM00pv0pQ0q6|33M01K0fM0gc0fY|33aXM00oO0pb0pQ|33chg000R01g016|349oM00pk0pH0pR|35J_g008B08K08V|37LEg009n09B0a8|370Yg003403g03n|37g0IG12M13x|37g0IF12M12X|38M0DW0k80kp0ks|38w2M00sr0sN0sK|39M08G0bs0bB0bL|3aM0fV09T09-0aC|3a7sg001z01I01R|3aeOM00n30nm0nB|3bCwM00u10uR0vm|3cM0AQ0iv0j60jb|3cM01Z0fK0fK0fT|3cJ1g006l07Y08e|3dM0AS0j40j90ja|3dM01-0fr0fM0fM|3dJGg008l08t08L|3dJqM00xe0xq0xR|3dxnM00st0sQ0t4|3deTM00mM0mZ0nb|3eM08D0bs0bI0bZ|3eL2g008V09y09T|3eKag008L09y09B|3eg08A0Z20Z20Zr|3fg09k0Y_0Z20Z8|3gM0bM0bk0bk|3gM0bN0ba0ba|3hM0bO0b20bc0bc|3iKiM00xn0xY0yl|3ieXM013D0nu0n3|3jg09h0Z00Zj0Zj|3kM0Lu0m30ml|3kM0xl0gN0he0h_|3lM0cI0aC0b00b2|3l8xg001601S01F|3mH4M00vx0w60wD|3og0L213n13D13_|3pH4M00vJ0w70xe|3qM00t0gc0gq0gK|3qdlM00nu0nB0ok|3rM07Y0bD0bL0b-|3ryWM00sE0t00t9|3r6HM00qA0rE0re|3sJaM00w60xn0xS|3t3kg002t02P02S|3td6M00oc0oG0ou|3uM07V0c90bZ0ck|3ug07c0ZA0ZA0ZT|3vM01u0fQ0fQ0fT|3vM0cw0aZ0b30ba|3wM0za0h_0if0it|3wAUg004c05505h|3xM0cw0aV0b20cc|3yJrg007H08e08B|3yJjg006E08008l|3AM0DS0k60kr0kH|3CM0D90ka0k80kp|3Hg0DH11O11V12g|3K42g002b02s02t|3Kg0L40mZ13x13C|3L3Tg002r02H02G|3OelM00mZ0n60oc|3PM0zv0im0iv0iE|3PyOM00sQ0t40tt|3Pg07m0ZF0Zz0ZF|3QM0eP0a70a80aZ|3Sg07m0ZE0ZE0ZA|3T5Pg001T01U02b|3XM02z0eZ0fK0fQ|3XM0790b-0c90cE|3XcFM00ok0oO0pb|3-zsg004204g04L|3_KAM00xR0xT0yl|3_2Cg002H02I02T|402yg002Q02S03g|40g0KU12Z13t13D|43g01f0_h0_Q0_Y|440zg003d03h03q|46M06v0cb0ck0dB|4bM0Gd0kH0l20lA|4bM0wb0gu0gH0g-|4bM01Q0fr0fY0fY|4dg0Fz11W12812X|4e50g002102f02r|4eg01i0_h10e0_T|4h2Gg002I02R02T|4iM0AF0iR0iR0jb|4jK_g008V09B09z09z|4jxNM00sE0sK0t0|4j6LM00qD0qz0qN|4kL0g009y09y09K|4k3mg002t02F02I|4l3gg002G02S02Q|4nM05p0cE0eq0eq|4q4RM00qD0r70rN|4rg07h0Zz0Zz0-h|4sG5g006l06L08e|4s6NM00qy0qF0qA|4tCIg005t05y06k|4wM0wH0h70hG0i0|4wg0CR11911I11W|4yM0EX0kp0kE0l8|4yM03F0eq0fr0fe|4z4Vg002b02i02F|4ALdg007-09z0a7|4CM0z70io0ip0iE|4DM0Ak0iN0j40j4|4EM0EN0kB0kM0kH|4EM0wz0g-0he0ht|4EM0wp0gK0gQ0h7|4F3sg002f02D02G|4FchM00oG0oP0pk|4GM0zL0im0ip0iN|4HM0KW0md0mq0xT|4JFCM00ue0v40vJ|4JD_M00ue0uu0v0|4Kg0650ZE0ZT0-v|4LM0wf0fI0g-0h9|4MM0z_0io0iE0iR|4OM0JV0lA0lO0md|4OM0Ev0ka0kE0kF|4OM0fW09K0a50aC|4PM0Kr0m80my0ml|4QM0490dB0dB0eZ|4RKtM00ml0xS0xY|4RKrM00xe0xD0xT|4RGvM00vm0wx0w6|4RGcg005H06E06S|4T2wM00rN0r_0sb|4T3aM00re0rM0rV|4VCog004g04L05y|4WEEM00uE0uR0v4|4W6rM00qA0qF0qS|4X2Gg002M02Q02-|4ZEXM00uV0v00vm|4Z21g002-03h03d|4-2kg002R02Y034|50M0Dd0k50k60kB|50Gkg006L07407t|501qg003403n03e|51bAg001201501z|53M0wW0h70hH0i0|54I8g007t08l07-|542Wg002K02Y02R|56bDg00X301h016|57IZg007H08y09K|58Hgg006S07H08x|596GM00qz0qE0qN|5cCYg005h05s05A05A|5c4Lg002f02h02A|5dCZg005y05y05H|5d1qg003803d03q|5d38g002D02M02L|5d3wg002A02F02K|5e3cM00rK0rN0s4|5e6qg001K021027|5e6GM00qy0qK0qF|5f3Ag002i02z02D|5g4Mg002702i02z|5hM0D50k40ka0kw|5k75g001j01F01K|5l74g001v01I01U|5mJNM00wx0xQ0xS|5o1ZM00rV0s40sb|5o51M00r40re0rx|5pM0CX0jR0kn0k5|5sM07G0b-0ck0cb|5sM0fX0a90a70ao|5sD4M00tL0uE0uR|5uM0xY0he0ht0i4|5uABM00tJ0u10uu|5u3lM00rx0rH0rM|5ug0Iz12g12_12Y|5v6RM00qz0qB0qE|5wAyM00tG0tL0uo|5xzwg004c04v05h|5x2ng002M02W02-|5zAoM00tt0tK0tJ|5AM0HZ0l80lz0m8|5AM0Cx0ji0ji0k4|5AM0350eY0eZ0fI|5ADcg005f05A06L|5B6vM00qB0qE0qS|5Bg0KN0mC12_13x|5C37g002E02K02N|5Cg0IJ12W12X13t|5Dg0eK0Xe0Xt0XG|5EM0zh0iF0im0iN|5GM0d50ao0b30aW|5G3Dg002h02A02E|5Ig0390_T0-O0_Q|5Ig0dW0Xo0Yw0XT|5JM0250fe0fA0gQ|5Lg0fo0WW0X30Xo|5MM07x0c90cE0cc|5OM0HY0ly0lA0lT|5O6eM00qK0qN0qP|5QM0HW0lm0lF0lz|5RM0xn0ht0hX0i4|5U44M00r70rD0rK|5U6JM00qy0qP0qK|5Ug0fW01501h0Xe|5VM0fA0a50ap0aV|5VA2M00sY0t00tG|5W3tg002z02B02L|5X2qg002N02Y038|5Y9WM00oR0pQ0q5|5Yg05v0ZP0-h0-O|5ZHDM00vJ0wy0xD|5Z1LM00rM0r_0sj|5_DnM00uq0uu0v0|60M0y90hH0i00i5|632Og002B02L02W|64M0Eb0k50kn0kF|651Kg002W03e03i|67xBM00sz0sN0sQ|68EaM00uG0uG0v4|6bHGM00wx0wC0xQ|6cM0EW0kw0kB0kM|6e3DM00rD0rX0rK|6g6nM00qB0qM0qS|6jM07w0b30cb0ci|6jM0d20aR0aV0bh|6j3YM00rx0rz0rH|6lM0Fb0kE0kF0l4|6mg04i0-v0-I0_h|6pM0B10iT0jR0jR|6pM03H0d_0fe0fd|6sg06-0YO0YO0-v|6tJCg007t08y08y|6uM0ye0hX0i40ic|6uJDg007-08u08x08x|6ueRM00mC0nu0o8|6xM0H20l60ly0ls|6y0og003e03i03n|6AM0An0iH0iH0ji|6AM0xS0hz0hH0i5|6Ac6M00o80oO0oR|6AdtM00n20n60oP|6AfHM013U13t0n6|6B6tM00qC0qI0qP|6CM0DG0k40kl0kw|6DM0di0ap0aK0aW|6EGtg006S07508u|6HM0fA0ab0ao0aR|6HbRM00oy0oP0pH|6Lg0Cn11l11N11O|6NM07f0c70cc0cW|6PGug007007408u|6QM04R0cW0eY0e0|6Q6HM00qt0qI0qM|6THIM00vr0wy0wT|6TCSM00sY0tJ0uq|6WM0DE0jE0kn0km|6WCgg005105H05n|6XC_M00uo0uy0uE|6YM06d0ci0cS0d_|6_A8g003_04g04H|6_0CM00sl0sq0sr|6_g0df0XG0XJ0Yh|70CEg005f077070|7027M00rz0rH0rY0rY|7126M00rX0rX0sj|72M0G20la0lm|72M0G10kK0kM|725jg001U02602h|73M0zS0iT0iF0iT|73D8M00uq0ux0uG|7343M00rp0rD0rX|74DsM00uy0uV0uV|76M03c0ei0eY0fo|77KeM00wy0xD0y2|78M0x40h80h90hX|79M0DF0jE0jI0kl|79M0wA0gQ0h40hz|79JAg007407508y|7aM0L-0md0mk|7bM0wx0gk0h80h9|7cM0xS0hS0hS0i9|7cKBg0099099|7eM0ys0i50i90iI|7gM0yn0hY0i20ic|7gM0wz0h40ha0hz|7hGrg005n07507d|7iI5M00wC0x20xk|7i5cM00qJ0r70r6|7kBvg004_05f06_|7kBtg004H05R051|7k4hM00r60rv0rz|7lg0LW0mC132144|7mM0J50lz0m00mk|7m53M00r40rc0rp|7qAOg004v05304_|7r78M00qs0qC0qu|7r8wM00pH0qj0qj|7sM0xJ0hY0hY0hV|7tM0KS0lT0my0mo|7t6yM00qu0qC0qM|7uM0fU0ap0ac|7uM0fV0a5|7wg0bP0XT0Yk0Yv|7yKHM00xQ0xV0yi|7yxGM00sz0sK0sP|7yg0a60YN0YN0ZP0ZP|7zM0fU0aa0ab0aH|7zg0a70YO0YO|7zg0b10Yh0YC0YM|7AM02i0fo0fI0f-|7AM0fV09w0ad0ac|7A47M00ro0rp0s9|7Ag0a70Yv0YT|7BM0zN0io0iH0iK|7CM0dJ0aH0aR0aL|7ED8M00te0uv0uy|7E0Qg002Z03803q|7EaHg00X301501j|7FM0xN0hT0hS0i2|7F0TM00rY0s40sk0sk|7GM0Gm0l60lc0lc|7G0SM00sj0sj0sm|7HM0Gn0la0la0lh0lp|7HKzg009b09b09a|7JM0y40hT0hV0i9|7JM0en0ac0as0aK|7KM01p0fA0gk0gk|7KKzg008-09909w|7N0LM00s90sk0sq|7PM02C0fd0fl0fA|7QM07H0c00ci0cH|7QKvM00xk0ye0y2|7RM0Lb0mk0mm|7R0xM00sm0so0sC|7SM06i0cH0cW0dF|7Sazg001h01r01I|7TM00C0f-0f-0h4|7TLbM00y20yf|7UM0xJ0hA0hV0i2|7VM0zX0iF0iI0j0|7W3Ag002v02E02N|7XK-g009a0aa09x|7YM04R0dF0d_0e7|7ZM02F0eM0fo0fs|7ZJiM00wT0xC0xV|7ZxJM00sC0sN0sX|7-K-g009309w0ad|7-yyM00sX0tt0uo|7_M0AB0iK0jq0jf|7_yxM00sP0te0sY|7_1mM00rv0rP0sm|816VM00qs0qt0qI|82M06r0c70co0cS|83M07N0bN0c70c3|84M0Jr0lT0lZ0m9|85M04L0e00e20ei|85M0aT0aW0bl0bt|85g0CK11v11I11_|86M0zT0ic0iK0j7|897bM00qj0qt0qu|8aM07M0bq0c00ca|8bM0JX0m00mm|8bg09K0YC0YM0YZ|8cM0KY0m90mo|8cM04q0e70eM0fd|8cM05k0cS0e20e0|8dM0Bx0j00jm0jE|8e5rg001G02702v|8fKYM00ye0yi|8fKWM00xV0x-0yf|8hM08u0bx0bJ0c0|8hM08F0bt0bz0bN|8jGxg007007708k|8lM07y0c30co0co|8mwjM00sq0sP|8nM0AW0j00j70jm|8nKkg008k09a093|8nwjM00rJ0sx|8n4YM00r50r60ro|8oM04Q0dF0e70ec|8oM09o0bh0bp0bJ|8oKmg008-09709x|8pJNM00xk0xL0x-|8qM0C20jq0km0kl|8qM0dG0aJ0aK0b1|8rM0cB0aL0bb0bb|8sM0Hx0lm0lp0lC|8sM0Bd0jf0jk0jq|8sJqg007d07S08-|8s4jM00rc0rv0rr|8t7GM00q50q50qs|8uM0710ca0ca0cH|8u2_M00ru0rC0s9|8ug01u0_M0_V100|8ug09r0YT0YU0Z6|8vM03V0ei0eG0fl|8xM0Hd0lc0li0ls|8xM0F70kG0l40lh|8xKCM00xC0ye|8z4fM00rj0ro0rC|8zg0aA0Yq0Yv0YT|8AyWg003F04104v|8B3_M00rr0ru0rP|8CM0AJ0iI0jf0jk|8Cg0990YZ0Zn0Zn|8Eg0bG0XM0Yh0Yq|8GM09a0bp0bx0bJ|8GM0dL0as0aI0aL|8HM09D0bl0bt0bz|8JM0bO0aT0b10b1|8JziM00sX0ts0ux|8J3Qg002602B02Z|8KM0wC0h00h80hc|8LM0I20lj0ls0lF|8LM0wr0gD0hc0ha|8Lg0dF0WV0XM0XT|8NM0Jj0lU0m00mn|8NGvg005n07d078|8OM09e0bq0bz0bN|8PM0Ig0ly0lC0lU|8PD5M00ux0uw0vr|8QM0EW0kD0kK0kO|8RM03_0ec0eM0eJ|8RGvg007707907S|8Rg00E0_K0_V102|8S54M00qJ0rc0rj|8S7ng001v01L026|8Sg09H0Yn0Yo0YZ|8VM0wF0h00ha0hA|8XM0B40j70jt0jm|8Xg0x710e10H10H|8YGvg006_07807W|8Yg0Iz12B12_132|8ZM0080gj0h00gI|8-M09Z0bh0bp0bq|8_M03Y0eG0eO0f7|8_g0150_K0_Z100|929Dg001r01K01G|93Ksg008_09309j|93y-g003P03_04k|94M0GE0kK0lc0li|94g0wt0_Q10C10u|95M0fz0ae0aH0aJ|96Gqg005106I079|96a2g001j01q01v|97M0GJ0lh0lp0lj|97IFg007808Q08k|97cSM00nc0on0oR|97g0xO10u10u10C|98a3g00WV01p01r|98g04E0-A0-O|99Dvg004_05M06I|99g04E0-J0-J|99g0bj0Yk0Yo0YC|9aM0GL0li0lq0lC|9dM0fU09x0aa0ae|9eM0fS0a30ad0as|9eD7M00ut0uv0uN|9fM0w50gj0gD0gW|9fD4M00ts0up0uw|9fa5g000G01n01q|9gM0J60lF0lZ0lX|9hM0BA0jk0jF0jF|9hM09A0bl0bx0c3|9hDng005306805R|9ig0bl0XV0Yq0YU|9kM0x60hc0hq0hT|9lg0I-12W13813U|9mK6M00xU0yg|9mK5M00x20xC|9n4BM00r50rq0rr|9oM00E0gf0gD0gI|9pg0dz0XJ0XK0Yk|9qILM00wT0x00xL|9rM0Ca0jF0kc0km|9rM0C20jt0jt0jI|9rM02u0fl0fp0fS|9rKkg008Q09709j|9sM03p0eJ0eO0fk|9vM04x0e20eG0eA|9wM00M0fS0gp0gj|9w48M00rq0rC0rP|9xK6g007S08Y08_|9zG5M00uv0vv0wC|9zg08l0Z60Z60Zv|9AM02B0fk0fs0fU|9AM03T0eA0eJ0f7|9A94M00pE0q30qr|9Bg0510-20-30-I|9CM0L50lZ0l_0mt|9CM0wk0gI0gJ0h2|9EL5M00xM0y0|9EIHM00wZ0xm0x2|9FM01L0fs0fU0gf|9FM02J0eA0f70fp|9FKGg008_09709s|9Fz-M00te0tM0ut|9GIDM00vv0w-0x0|9Ig00z0_M0_Z100|9KG8M00vr0vO0wZ|9L6vM00qH0r40r5|9M04M00sh0sZ0sB|9M4gM00rj0ry0ru|9Ng00Y0_M0_V102|9Og0Gq12l12C12W|9PM0Fl0kD0kG0l9|9Paag000N01p01o|9QM01I0fp0fS0gl|9QeNM00mK0n20oy|9SM0dM0aE0aJ0aT|9SBBg004H05a05M|9SeUM01440o80nc|9Tg0xz10e10U10H|9Ua9g001401n01u|9VM0ww0gW0gY0hq|9V2lg002v03i02_|9WM0Ja0lq0lU0l_|9XM0w90gz0gW0gY|9Y9-M00py0pW0p_|9Zg07P0YD0Zn0-3|9-KuM00xF0xM0y0|9-Kfg007W08Q095|9_M0420ec0fk0eO|9_g06y0Zq0Zv0-A|a1M0Hg0l90lj0lX|a1KSg009509j09N|a2M0wU0gZ0h20hA|a2Kog008Y09c09s|a26AM00qr0qR0qJ|a3KGM00xU0y80yg|a5C-M00u00ut0uN|a6M00z0gf0gl0gz|a6g0AH11b11v11I|a7M0wn0gJ0h20gZ|a8M0Jq0lX0m70mn|a843M00rq0rt0rJ|a9M00g0gp0gJ0gL|a9IRg007908608Y|aa7fM00p_0qo0qH|acM00B0fU0gp0gL|acg0Jm12V13213z|aeJpM00x00xj0xF|aeg0Fv11_12f12l|afM0d80aI0aU0bb|afIEM00x80wZ0xj|afg0LZ0n213B13U|afg01n0_K1020_Z|ahM0d70aE0aS0aT|ahg0FL12d12C12B|akM0wo0gL0gY0hq|alGag005R06J06_|alyrg003F04103V|amM0eM0aq0aU0aI|am3sM00ry0rL0sB|am7tM00qf0qk0qr|amg0Eb11N11-12d|anxZg003_03G03P|aqM0wb0gl0gz0gZ|aqLkg009s09L0a3|aq6-g001G01P022|aqg0A310Y11d11b|arM0f-09N0ae0aq|ar7EM00q30q40qo|asM0EH0kG0kS0kO|asJSM00xm0xH0xU|asJcg007W088088|asg0Aa11811q11l|atJdg008608608E094|auGag006D06I07V|auAEM00ts0tV0tS|auasM00pu0pE0pT|avDKM00up0uw0uJ|awd4M00nD0oy0oo|axAOM00tM0tT0tT|ayLeg009c09N09X|ayJVM00xB0xF0y8|ayAPM00tS0us0tS0u0|azM0fA0a30ag0aE|az8XM00pW0p_0qk|aAg04C0-H0-H0-V|aB2gg002l02Z030|aCKBg009509409L|aC2fg002_031|aDKKM00xH0y00y7|aDf9M00mz0nc0nD|aFBQg004y053060|aFg0GA12l12B12H|aHJhM00w-0xB0xm|aIBIM00tT0uJ0up|aJ2ag003003303t|aNKng008808E09c|aN49M00rl0ry0rL|aNg0E911Z11_127|aPF_g006o06J07P|aQg0L00mz13z144|aQg0KX13813L13B|aR9dM00pE0pT0q3|aUyKg003G03P04a|aUg0g00XJ01q0XK|aWKJM00xZ0y80yh|aWg0E611S11-129|aXM0Gk0kO0l70lq|aXe4M00mK0nl0on|a-M0JT0l_0m60mt|a_M0Dh0jI0kb0kb|b1JKM00xj0xE0xH|b49fM00py0pV0pW|b9L7M00y70yj|ba6fM00qH0qO0r9|bb8wM00q10qk0qb|bcf-M013B0mK0mN|bdM0Ga0kS0l10l9|bdJOM00xp0xB0xZ|bdevM00nj0nj0nD|beewM00mU0n10nl0nl|beg0Fx12712d12z|beg0F611-12912f|bgzpg003V03X04k|bgg0Hi12z12C12V|bhg0dC0WV0XV0XM|bkJOg008808v094|bkzNg004104a04y|blM0fR09Z0aq0am|bm9dM00pu0pT0pZ|bny3g003F03H03V|brM0Fo0kD0kY0l7|bry3g003K03G03X|br97M00pF0pV0q1|bsf0M00mG0mN0nj|bsf5M00mz0mE0mU|btdfg00XU00l01p|bu23g003103603j|bv90M00pZ0q20q4|bxKBM00xE0y60y7|bzAXM00tM0ui0un|bzd2M00o20on0oW|bALPg009L09U09Z|bA6pM00qf0qL0qR|bAaDM00ps0py0pV|bAg0Lt13z13N13N|bBL-g009X09_0ag|bBg0Lu0mE13L13L|bCyMg003H03M04a|bCfvM013N0mG0mN|bEKJM00xO0xZ0yj|bFLEg009J09V09X|bGM0Dg0kc0kT0kc|bGDBM00u00us0uN|bGg0Gb12912f12H|bJFig006f06D07y|bKJuM00x80xO0xE|bNg0Bh11l11r11N|bO9Hg001o01w01N|bQAjg004k04w05a|bQ6tM00qh0qO0qY|bQaKM00p50pu0pF|bQfbM00mE0n10mU|bRISM00wc0w-0xp|bSg0Iw12H134138|bT7ZM00qb0qo0qO|bVM0AC0hU0iW0jX|bVF2g006806y06o|bWLcg009m09U09V|bX8_M00pS0q10qa|bXg0Fd11Z12712z|bY4wM00r90rt0rR|b-Ewg005M06006f|b-6Ng001L01N022|b_M0LK0m70mn0mv|b_LrM00y60yh0yk0yk|c0LsM00yj0yj0yp|c05Jg001L01P02l|c0eWM00mG0nW0nj|c33gM00rt0rJ0rR|c3g0da0XK0XU0Yo|c7E0g005a05W068|c8dxM00nW0o60oo|c8g0da00G0XV0Y1|ca0YM00sf0sx0sG|ca4-M00qR0qY0rl|cbIQg006J07U081|cd9ZM00ps0pS0pZ|cddGM00n10ng0o2|cgAgg004o04y04K|cg8dM00q40qf|ch8dM00q20qh|ch9fM00pF0pN0q2|ciM0Fw0kS0kT0l1|ckM0LX0mg0mt0yq|ckK8M00xp0y10y6|ckJ4g007V08h08v|cnLWM00yb0yk0yq|coL-M00mv0yp|cpJBg008108E08W|cq16M00s50sv0sh|crg0yx10C10M10Y|csLNg009J09U09W09W|ctLOg009V09V|cug0z210U118115|cyg0Ba11q11v11A|czg0B311b11f11r|cBg0yc10t10O10U|cDbJM00oo0oL0p5|cFM0Fo0kb0LL0kY|cGM0JS0m40m70mg|cGbpM00oW0ph0ps|cHM0g009Z0am|cHKMg008W09J0an|cHGzM00vw0vv0wc|cHg0cQ0Xa0XU0Y5|cJM0KB0m60mv|cKD1M00tT0un0uJ|cLKag008v09009m|cOg0x310f10y10M|cPdvM00nO0o20oi|cPg0cF0XR0Y10Yn|cQg0Ap11d11D11q|cRzYg004304w04t|cR2-M00rl0rL0rU|cRg0BT11r11H11M|cRg0Ai11611811f|cS5DM00qL0r9|cTM0490eg0eN0fV|cTM0df0aF0aU0bi|cT5DM00qV0rF|cU1BM00rZ0s60sf|cU4yg001-02202_|cVM0xM0g_0j20iw|cVM04t0dn0e90er|cVATg004w05W|cWM05F0cl0d80eg|cWKPM00y10yp|cWg0D011M12c11Z|cWg0zR10Y10_116|cXg0zY11511g11d|cXg0wx10d10l10t|cXg0wt0_x10610f|cYM0JJ0m6|cYg0CH11A11J11S|cZM0FI0kY0l7|cZKHM00xO0xX0yb|c_CSM00tV0ul0us|d06Wg001u01P01-|d0g0bl0Y50Yy0YU|d1M0fI09_0ag0an|d5cjM00oi0os0oW|d75QM00qd0q-0qX|d7eJM01480nf0nW|d8M0fG09m0am0aF|d8Kkg008I08W09l|d9yjg003K03X043|daHcM00vO0wQ0x8|day8g003H03M|dad9M00o60oe0oL|dbz0g003M04o044|db20M00rU0DG0s5|dcM0wq0gT0hl0hU|dcM0780br0dn0cT|ddM0wi0fV0g_|dd2IM00rR0rT0rZ|df1uM00s50s80s8|dfcSg000n00B01n|dgM01I0er0fN0gT|dh1tM00s60s6|di1tM00E5|djCRM00uk0un0uS|djyAM00sx0sW0t8|dl2TM00rd0rF0rU|dlg0L-0ng13e|dnz8M00sZ0tm0tm|doJng007U08108z|dqCOM00ui0ul0uP|dqA6g004n04o04D|dqg0aP0z70Yn0YD|dwIOg007R07V08h|dxg0420-J0-Q0_x|dxg0ay0Yy0YV0Zv|dAFSg006f06C07h|dBM0et0an0ax0aS|dBCHM00tV0uh0uk|dCyoM00sT0s-0sZ|dC3IM00qX0rn0rT|dCg04g0z10-20-V|dEJWg008z09008X|dFKAM00xN0y50y1|dGJDg008h08A08I|dHCHM00uf0uZ0ui|dHeLM00mI0ng0ni|dIK8M00wQ0LS0xX|dIz4g003U043048|dI0eM00sf0sG|dIg02e0-V0_D10d|dJzOM00t80t80tp|dKIDg007P07U08r|dKIyg006D07K07R|dLdjM00o10oi0oj|dNKJM00xX|dPg0do0XQ0XQ0Y5|dQHwg006o07C07K|dQg0dp0XR0Xp0XR|dR0Lg003303k03k|dReEM00nf0nh0nw|dRg0yf10M10N10X|dS0Kg003j03j03m03t|dTg06y0Zq0-A0-Q|dUE2M00ul0uP0uY|dVI3M00wc0x40xN|dWKdg008I08P096|dXElM00uS0v10v1|dXdRM00nw0nP0o6|dYDVM00uk0uZ0uS|dY5yM00qV0q_0rn|e17SM00qa0qd0qL|e2dOM00np0nO0nV|e3Kpg008X09109l|e3DFg004K05T060|e5KHg009009609r|e5zVM00tb0tm0tC|e5egM00ni0nn0nO|e6dxM00nV0oe0oj|e7g0yd10E10S10O|e8EHM00uY0uY0uZ|e8xrM00sh0sv0sT|e84mM00q-0rh0rF|e8g0Ji12V13313b|e9g0JB13b13J148|eadIM00nP0nY0o1|eag0Jp0yz13413e|eag09F0zi0YD0Z4|ebIjg007y07P084|edxXM00sG0sS0sW|edd7M00o10oe0os|edeJg000l00N00w|edeTg000700G00n|effaM013K0nf0na|egg0Jb0yD12c134|ehFZg006y|eiEmM00uh0uP0v1|eletM00nh0np0nw|emK3g008A08X091|enJDg008r08z08P|en7-M00q70qh0qV|eoAAg004t04s|eoeIM00na0ni0nn|epM03U0er0es0f5|epKRg009809l|epg09e0za0YV0Zm|eqyIM00sW0s_0tb|eqeqM00nn0nq0nP|erfvg00Xa00m00l|esg0fC00700f0Y1|etKlg008P096098|etG9M00vy0vO0w8|eteOM00mI0mR0nh|eucZM00oj0or0oL|evJxg007R08A08s|evGGg006y0Kf07C|evg08a0Zm0-30-2|ewM0As0iw0j20jX|ex4JM00rf0rn|ex9rM00pi0pS0q7|eyM04C0en0eg0es|eyM0av0aS0b70br|ey4JM00rb|ey4KM00q_0r30rh|ezb2M00oB0p50pi|eAM09v0bi0cl0bu|eBb1M00At0ph0pN|eBb_g000Y01o|eBcZM00nY0oB0os|eCJxg008908r09d|eC5tM00r30q-0rf|eE0Cg003o03k03p|eEdDM00ns0nV0or|eEg08m0Z40Zo0Zq|eGM01Y0fC0fV|eGdxg000w00N00D|eHKyg009109d09r|eKxXM00sR0sT0s_|eKw8g003103k03r|eKcPM00oh0or0ph|eLAhM00tp0tw0tI|eMg0Lr13e13K13K|eNzkg003U044049|eNyJg0044048|eNg0Lt0mR0mI13J13J|eOzWg004904t04s|eOxVM00sI0sI0sS|ePM0zC0hU0iW|ePf2M013K0n00na|eQzdM00s-0ta0tp|eRM0f80av0aF|eR5Ug001N01V02l|eSM0490e90en0eN|eSyJM00sS0s-0ta|eSefg000m00n00B|eTHYg007h07y07F07F|eTenM00nT0nY|eTeoM00n00np|eUHZg007C07C083|eWzog004804n|eXg0xj10l10t10E|f0M02h0f50LK0fN|f0eWM00yE0mR0nq|f1INM00w80wQ0Lh|f2cDg000D01400-|f3A5g004n04D|f3w3g003p03t|f30qg003m03o03r|f38gM00pN0BV0qd|f3g0wT10f0ys10y|f40zg003m03p|f5KBg008s098|f5zdM00s_0td0tb|f6g0Fo11S12b133|f8g0zd10X110115|fag0yN10O10S10_|fbeOg000700f00w|fbg0CA11H11M0yx|fcM09n0bw0br0bw|fezgM00ta0tc0tw|feg0Fo0zv12312c|ffM0fh0ax0aD|fgxvM00sH0sR0sR|fhdug000A00B00Y|fkg0Ch11A11E11J|fnM0CG0iW0j20LO|fnAaM00td0tC0tI|fng0xC10y10B10N|fpe-g00Xa00m|fr5gM00q_0rb0rf|fszeM00Fy0td0Gf|fwM04d0e90es0eC|fxJeg008408s08R|fyJ7g007K083089|fzJ6g007F0KQ084|fz4ZM00r30rd0rg|fB9xg001t01u01D|fBcug000Y011|fCg01T0z10_x0_H|fDg0yr10N0yt10X|fEM03q0eN0f10fC|fFg0eB0yP0yM0XQ|fGM09g0bu0bu0by|fG6bg001O01-01X|fHM05X0cT0dn0eC|fHAsM00tw0tC0tH|fIM0eP0av0LF0aG|fJDtM00uf0I20IX|fK69g001V0CT|fL1Vg003203303b|fMM03y0eH0f50LP|fMM06i0cl0d8|fMM09d0bw0Lu|fNGaM00vo0vw0Ka|fOCBM00uh0Hr0uI|fOg0Au1160yv|fPxuM00ED0sI0sJ|fPg0Cb0yx11H|fPg0Ca11f0yw|fSM0et0aD0LF0b7|fSg08j0zw0zr0Zm|fUg0xz10E0yt|fVM0cg0aG0bi|fVxBM00sH0sL0sU|fV83g001w0BN01O|fW9Sg001s0Bd01w|fWdMg000D|fYM03_0LH0f1|fYM0400d80en|fY6Tg001D0CB01V|fZF-M00Jg0JO0vy|fZDzg005W|f-M0wO0g_|f-K7g00890L90LQ|f-yeM00sJ0sL0Fv|f-xFM00sJ0EY0sU|f-1tg00360D-|f-25g00Dt036|f-a0g00AV01t|f-cig000-|f-g01J0yG0_D106|f_HaM00vw0Ka0x4|f_AsM00Gi0tI|f_4WM00rb0Cd0rT|f_dLM00ns0zj|f_g0EY0zn0yy12b|f_g0zj0yt10_0yu|g0LDLL0xN0LR0LR|g0LCLK0Lh0LS0LS|g0Lxg008R0Lo|g0Lt3e0f10LJ0LK|g0LsDP0jX0K00LL|g0Lq6w0Lx0LE|g0Locn0LB0LB|g0L9EQ0kT0La0LO|g0KW2Q0fC0LI0LP|g0KV3u0LC0LH0LP|g0KU2Q0LC0LG0LK|g0KT3E0eH0Ls0LJ|g0KO2o0Lk0LD0LI|g0KJe50aD0aG0LA|g0KI620Lw0Lz0LN|g0KH1e0KW0LG|g0KD330Lm0LJ0LI|g0KDcB0LM0Ln0LM|g0KAdZ0Ln0Ly0LF|g0Kx5L0Lt0Lv0LE|g0Kud-0Lo0Lq0LA|g0Kr720Lu0Lw0LN|g0Kn6g0Lv0Lx0LE|g0Km5X0L70Lw0Lz|g0Km780by0KZ0Lx|g0Kl5s0L70Lr0Lz|g0Ki3U0Lr0Lp0LH|g0Kf4R0KX0Ls0Lt|g0KfdT0L00Lj0Ly|g0Ke3S0Li0Ll0Ls|g0KeeI0Lj0LQ0Ly|g0K6cT0L40LA0LB|g0K53c0Lb0Ll0LC|g0K53h0Ld0Lp0Lm|g0K2220KW0Lb0LG|g0J_eB0L90Lq0Lo|g0J-3V0Ld0Lf0Lp|g0JUK50x40L80LR|g0JUGT0Le0Le|g0JT440L60L60Li|g0JSGS0Lc0Lg0Lg|g0JR3P0K-0Ll0Li|g0JJGN0L50La0Le|g0JJ2_0L20Lk0Lm|g0JCGq0J-0Lc0LL|g0JBev08R0KB0Lj|g0JzJj0Kd0L30Lh|g0Jz5v0KZ0Lv0Lt|g0Jv4h0KY0Lf0Lf|g0JqHJ0J60L30Lc|g0Jnd40KO0L00Ln|g0JmI70Kl0L50L8|g0Jj310K_0L10Lb|g0Jf2Z0Ky0KP0L2|g0Jfdd0KR0L40Lq|g0Jd3i0Ky0K-0L2|g0Jd3r0KS0K_0Ld|g0Jd5q0KX0Lu0L7|g0Jc4h0KI0KS0L6|g0Jb5o0KI0KZ0Lr|g0J40V0KU0Lk0LD|g0J3wo0KK|g0J20U0KL0KP0KW|g0J1bE0Kq0KJ0KO|g0I_3X0KN0KY0K-|g0I_dk0Kz0KO0L0|g0IYf_0Kh0830KH|g0IV1U0Ks0L10KU|g0ISc10KR0L40KT|g0IR400KD0KF0KS|g0IN0B0Kc0KK|g0IN0C0Kk0KU|g0IIwn0Ko0KM0KV|g0IIaI0Kj0KE0KT|g0IF550KC0KX0KY|g0IBfg0KG0KQ0KG|g0IAff0JW0KB0KH0KH|g0Ix4v0Kw0KD0KN|g0Ixbk0Kr0Kr0KJ|g0Iv410Kv0KF0KN|g0Iu520Kw0KA0KI|g0IudI0Kz0KG0L9|g0Ir570Jk0JX0KC|g0IrdD0Ku0KB0KR|g0Ip340Kx0L10K_|g0In340Kt0Kv0Ky|g0Ik4U0K20KC0KF|g0I93G0Ke0Kx0KD|g0HXdh0Km0Kq0Kz|g0HW2R0Kp0Ks0Kx|g0HV2s0Kk0Kt0KP|g0HVcA0KE0KE|g0HVcB0Ku0KT|g0HM2U0Kb0Ke0Kt|g0HLxW0Ki0Kn0KK|g0HJy90JV0Ko|g0HGdd0K10Kj0Ku|g0HvIo0Jx0JJ0L3|g0Hu1E0K40KL0Ks|g0Hnby0J_0Km0KJ|g0Hmxu0Kg0Kg0Ko|g0Hmf-0KQ0JW0Kf|g0Hlxt0Js0JM0Ki0Ki|g0Hlg007h0K60Kh|g0Hh3M0K20Kp0Kv|g0HgKs0JZ0K80L8|g0H40T0JN0JT0KM|g0H12G0JU0K40Kp|g0H0LP0vy0w80K9|g0GZLI0JO0K70Ka|g0GYLg0JZ0K70Kd|g0GWLm0JO0K90K8|g0GVf-0JE0Kf|g0GUf-0JI|g0GO1U0Kb0Kk|g0GN1U0JT0JY|g0GJ400JX0Kw0Ke|g0GHdd0JR0J_0Km|g0GGzt0JS0JV0LO|g0GGbS0JK0K10Kj|g0GDEm0IL0JS0La|g0GCKc0JG0K80Kd|g0GB1W0JA0JP0K3|g0GB3_0JQ0KA0K2|g0GBem0JH0Kh0KG|g0Gzz30Je0K00Kn|g0Gz390JP0JQ0Kb|g0Gw1c0JL0K30Kc|g0GsE30Iy0K00J-|g0Grdd0JH0JK0K1|g0Gk3U0Jv0JX0JU|g0Gf260Jz0JU0JY|g0GcLE0vo0K70K9|g0Gc0W0JL0JM0Kc|g0Ga0G0Jr0JN0Kg|g0Ga110JA0JN0JT|g0GacD0Jf0JR0J_|g0G7Jv0Jo0JG0Kl|g0G4fX0JE0K5|g0G3dM0JC0JW0JR|g0G0JD0JB0JJ0JZ|g0F-5x0Ju0JD0JD|g0FZeb0JC0JI0K6|g0FW5I0Jm0JF0JF|g0FVdP0IZ0JE0JH|g0FUJF0Jo0Jt0JG|g0FS1d0Jw0JY0JL|g0FN290Jq0Jy0JP|g0FL2c0Jj0Jv0Jz|g0FJIm0J60Jl0Kl|g0FJ1c0Jp0Jq0JA|g0FJ3S0Ju0Jy0JQ|g0FI3T0Ji0JF0Jv|g0FFKw0Jb0Jg0JB|g0FFw20J00Jr0Kg|g0FC0v0Jp0Js0JM|g0Fw1R0Jn0Jw0Jz|g0Fu0N0J80Jw0Jr|g0FpJ40Jh0JB0JJ|g0Fj1S0IT0Jj0Jq|g0Fg6e0J40Jk0JD|g0FeIy0J20Jh0Jx|g0Fe6i0IC0KA0Jm|g0Fc1_0J50Jn0Jy|g0Fa3U0I-0Jd0Ju|g0F8ID0Jc0Jo0Jl|g0F5LC0vo0J90Jt|g0F5b-0IZ0Ja0JK|g0F3yQ0If0IV0JV|g0F23W0IR0J40Ji|g0F1IE0IW0Jb0Jh|g0EZKd0J30Jc0Jt|g0EVbM0Iz0IK0Jf|g0EULH0J30J70Jg|g0ES0n0J00J10Jp|g0ERLL0IJ0IX0J9|g0EPH30J20Jx0L5|g0EP210IT0I-0Jj|g0EP490IU0Jd0Jm|g0ENKc0IY0J90Jb|g0ENH30IP0Jl0J6|g0EL0R0Ih0Ik0J8|g0EJ0a0Ir0J80Js|g0EJ7c0Ii0IM0IN|g0EH2m0Iu0Ji0J5|g0EHdC0IE0Jf0JC|g0EGK90IJ0IS0J3|g0EBL-0uI0IG0J7|g0EzIs0II0IQ0Jc|g0Ezz60H-0Il0Je|g0Ew4o0HS0IC0J4|g0Ev1E0Ij0J50Jn|g0EuJ_0Iw0II0IY|g0En3h0HY0Iu0Jd|g0EmIc0II0IO0IW|g0EmGS0IH0IO0J2|g0ElI90Io0IP0IQ|g0El7x0I90IM0I_|g0Ej720I60IN0I_|g0EiFb0HT0IH0J-|g0EibD0Iv0ID0Ja|g0EgKJ0Ix0IY0J7|g0EdJa0IQ0IW0IS|g0EdGG0Ia0IL0IP|g0EcLA0IF0IF0IX|g0EbLz0I30It0IG0IG|g0E6dD0Ip0ID0IZ|g0E5dk0Iq0IE0IK|g0E3570IU0Jk|g0E2570HP0Ii|g0E28f0HX0I90I8|g0E2b30I00Iv0Ja|g0D-CY0HT0Is0JS|g0DVKq0It0Iw0IJ|g0DVKm0HR0IS0Ix|g0DVbx0Iq0Iz0IK|g0DU2p0In0IR0I-|g0DPKz0I50Ix0IF|g0DHCJ0I70Il0Iy|g0DHw60Ie0Ig0J0|g0DGbD0I40ID0Iv|g0DFd-0HV0IE|g0DEH-0H_0Im0IO|g0DE2c0HW0Id0Iu|g0DDHY0HZ0Ib0Io|g0DCBl0H-0Is0IV|g0Dz190Ih0Ij0J1|g0Dz1c0Id0Ik0IT|g0Dz5Y0I60IB0I_|g0Dx0-0Ig0Ik0J1|g0Dw0V0Ho0Ih0Ir|g0DvwQ0GF0Je|g0DvwP0Hk0Ir|g0Dv1k0HG0In0Ij|g0Dt8C0Hu0Hz0I8|g0DsHg0HL0Ia0Im|g0DrGU0HF0Ib0IH|g0Dr7y0Hw0IA0IN|g0Dr8r0I10Ic0IA|g0DqCE0HT0H-0Is|g0Dq660HD0IM0Ii|g0DpKN0HI0I30It|g0Dobl0H70I00Iq|g0DnLi0I50I20IF|g0DmLj0uI0HE0I3|g0Dm8m0HA0HX0I8|g0DlaL0Hs0I40Iz|g0DkIb0HQ0HZ0Io|g0DjBb0I70IV0Il|g0DgHZ0HN0H_0Im|g0Dg300HS0HW0IR|g0Df850Hm0IA0I1|g0De2S0Hj0HY0In|g0Dddx0HU0HU0Ip|g0Dcdw0GZ0H70HV0HV|g0DaE80I70Iy0IL|g0D73w0HJ0HY0IU|g0D2JX0HM0HO0Iw|g0D1Im0Hx0HC0H_|g0D04s0H60HK0IB|g0C_JZ0Ht0HI0HR|g0C-HL0HC0HL0HZ|g0CZJq0Hx0Hy0HR|g0CYHz0HF0HN0Ib|g0CY4o0H90HH0HP|g0CU3B0Hb0HH0HS|g0COKv0HB0I50HO|g0CO3K0H50HK0HJ|g0CN1E0Ha0Hh0Id|g0CHG_0Hc0Ia0HL|g0CCK_0Hr0HB0I2|g0Cz6o0H80Hw0I6|g0CwHW0Hi0HQ0HN|g0CvKz0Ht0HE0HI|g0Cv8P0Hl0Hz0I1|g0Cv8R0Hv0HA0Ic|g0CsJo0Hp0Hn0HM|g0CsIS0Hn0HM0HQ|g0Cs6B0He0I90HD|g0Cs9f0GP0Hz0Hu|g0Cs9h0Hq0Hv0Ic|g0CqKs0Hp0HO0HB|g0Co9S0G_0Hq0I0|g0CmLI0uf0GU0HE|g0Cm9M0GQ0Hs0Hu|g0ClKn0GN0Hy0Ht|g0Ck0W0H30Ha0Ig|g0CjIQ0Hg0Hy0Hx|g0Cj7x0He0Hl0HX|g0Cj7L0GR0Hm0HA|g0Ci030GF0H30Ie|g0Cg2y0Hf0Hh0HW|g0CdHR0Hc0Hd0HC|g0Cc2b0GW0Hj0HG|g0CbIL0GM0Hd0Hn|g0Cb2G0GW0Hb0Hj|g0Cb6U0H00Hm0Hw|g0C7I80GH0Hi0Hg|g0C7Hw0GH0HF0Hi|g0C72_0H20HJ0Hf|g0C41l0GE0HG0Ho|g0C34b0H40H50HK|g0B-5p0Gv0H60HD|g0B-bA0G_0HU0I4|g0BZ5e0H40H80HP|g0BX3K0H10H90HH|g0BT530Gw0H90H6|g0BS0D0GK0Hk0Ho|g0BP3g0Gz0H10Hb|g0BP3D0Gx0H20H5|g0BJ6W0Gy0GO0He|g0BIbm0GV0Hs0H7|g0BHAP0GT0GX0GY|g0BHdr0GI0GL0HU|g0BBAS0Gu0GS0G-|g0BBAm0Gl0Gn0G-|g0BB240GG0Hf0Hh|g0BAbm0Gm0GD0G_|g0BzLj0GN0Hr|g0BzC70GS0GS0G-|g0ByC60Gq0GY0GT0GT|g0By8q0GJ0GO0Hl|g0Bw9d0Gt0GP0Hq|g0Bt8V0GJ0GQ0Hv|g0Bs7p0G50GR0H0|g0BpKw0GM0GU0Hp|g0BpJf0GH0GN0Hg|g0BmdK0GA0GZ|g0Bk0o0GE0GF0H3|g0Bj8E0GB0GP0GR|g0BjcR0GA0GD0GZ|g0BiIc0GM0Hc0Hd|g0Bg1M0Gz0GE0GW|g0Bfw30If0GK0Hk|g0Bf1I0GK0GG0Ha|g0BcbI0GC0GI0GV|g0B7bI0G90Go0GD|g0B68B0G60Gt0GJ|g0B2dr0Gs0GL0GI|g0AT2t0Gx0GG0H2|g0AT6J0G10Gv0H0|g0AR4h0Gz0Gw0H1|g0AP4F0Gv0Gx0H4|g0AO5g0Gy0Gw0H8|g0AGB60Gk0Gq0GY|g0AG9j0Ge0GQ0GB|g0ADdv0G80Gp0GA|g0AAeq0Gj0Gp|g0AyBk0FY0Gu0GS|g0Ase80Gd0Gr0Gs|g0Arbp0F-0Gb0GC|g0Agzk0FO0Gl0GX|g0Aea50F-0Ge0GV|g0AdzN0Gk0Gn0GX|g0A5zV0Ga0Gl0Gu|g0A5f50G70Gr|g0A4Lo0tH0Gf0Gg|g0A4Ji0FK0G40Gc|g0A3Ln0Fr0Gc0Gi|g0A0Lu0tc0Fy0Gi|g0A09r0FW0Gm0Gt|g0A0ec0G00G70Gp|g0z-KH0G30Gg0Gh|g0zZby0FV0G90Go|g0zXzZ0FI0FY0Gk|g0zWcE0Gb0GC|g0zWcF0FZ0Gs|g0zWeQ0FQ0Gj0Gd|g0zV7Z0FW0G50GB|g0zU7T0G10G60GO|g0zSJi0FB0G30Gh|g0zQKA0Fi0G40Gc|g0zQ490FE0FH0FM|g0zP7B0Fj0G50Gy|g0zKe00FR0FS0Gd|g0zH2B0FF0FX0FX|g0zHaN0FT0Gm0Go|g0zFcG0FA0FS0G8|g0zDBe0Fs0Ga0Gq|g0zv1r0F_0FU0F_|g0zv900Fj0G60Ge|g0zvbf0FA0FT0Gb|g0zu1o0F80Ft0FX|g0ztaO0FL0FV0F-|g0zsd10FD0FZ0G0|g0zoe70FD0FN0G0|g0zoeY0FP0G7|g0zkeP0Fq0FN0FQ|g0zjyG0E-0FI0Gn|g0zheA0Fq0FP0FR|g0zc4N0FH0FJ0G2|g0zaaC0Fk0FA0FT|g0z9Gg0Ev0FG0Gh|g0z84Q0Fg0Fx0FM|g0z6zK0Fw0FO0Ga|g0z23-0FC0FM0G2|g0z0Gn0ES0Fu0FK|g0y_3e0Fm0FE0F_|g0y-3w0FC0FF0G2|g0yYdh0F50FR0FS|g0yV3F0Fp0FH0FE|g0yTIM0Fi0Fu0G4|g0yTbW0Fa0FZ0FL0FV|g0yTdN0EP0EZ0EZ|g0ySLM0tc0Fv0Gf|g0yQ5B0Fd0Fo0FJ|g0yPzM0EH0Fl0FI|g0yOLF0sU0Fr0Fy|g0yOHX0E_0FG0FB|g0yM1E0F70F80FU|g0yLAY0ER0Fn0FY|g0yKLg0Fh0Fv0Gg|g0yJeP0FN0FP|g0yH3K0Fg0Fe0FC|g0yD5C0Fb0Ff0Fx|g0yBAG0F10Fl0Fs|g0yB300F90Fc0FF|g0yyAm0ET0Fw0Fn|g0yv9K0Fa0Fj0FL|g0yu9j0G10Fk0FW|g0ytK90Fh0FB0G3|g0ysKa0EY0Fi0Fr|g0yo4y0F60Fp0FJ|g0yn5j0F40F60Fo|g0ym3L0EV0EW0Fp|g0yh6n0EF0Fb0Fx|g0yc2_0EV0F00Fm|g0yc5Y0F30Fd0Fo|g0ybc30Fk0F50FA|g0y82n0F00F70Fm|g0y71g0EX0FU0Ft|g0y72j0EX0F90Ft|g0y54S0F20Ff0Fg|g0y5ch0EP0FD0Fa|g0y35w0EQ0F30Ff|g0y25P0EF0F40Fb|g0y14S0EQ0EW0F6|g0xZAG0ET0ER0Fn|g0xX2F0EJ0Fc0F9|g0xVIk0EI0EN0Fu|g0xVy10Eu0EH0FO|g0xVe40EO0Fz0Fz|g0xRK40sL0EU0Fh|g0xR1W0EJ0F80F7|g0xP4u0EE0F20Fe|g0xN3q0EM0Fe0Fc|g0xMK30ED0EI0EY|g0xJA30EB0F10Fl|g0xIGz0EA0EL0FG|g0xIBv0DR0F10Fs|g0xG5e0EG0F40F2|g0xDdO0F50EO0Fz|g0xDdZ0EP0EZ|g0xAI20EC0EK0E_|g0xx3p0EE0EJ0EV|g0xvH90Ew0EK0ES|g0xuHj0Ey0EL0EN|g0xr2P0EX0EM0F0|g0xpJA0Ez0EC0EU0E_|g0xoys0EB0E-0Fw|g0xn5f0EE0EF0EQ|g0xi5O0EG0Fd0F3|g0xg4t0EG0EM0EW|g0xeLX0sH0Er0EU|g0xeIp0Ez0EI0EN|g0w_yD0DQ0EH0ET|g0w-Gh0Ev0Ex0ES|g0wYI80EI0Ey0EC|g0wYH-0Ew0Ez0EK|g0wWGh0Em0Eq0EA|g0wQHK0Eq0EL0Ey|g0wODV0Ep0EA0FK|g0wJ0f0DX0Et0E-|g0wB0A0DY0Es0Eu|g0wA0J0El0Eo0Et|g0wxLZ0Ei0ED|g0wsHx0Em0Ex0Ew|g0wlDN0E90Ea0Ev|g0wa180Ed0Ee0Es|g0wadH0DU0E60Ej|g0w9Gb0Ea0Eq0Ex|g0w92l0Ef0Ek0Es|g0w92Y0Dq0E70El|g0w6eR0E60Eg0En|g001LL0E40Eh0Er|g00gLT0E50Ei|g00kfY0Ej|g00m290E70Ee0El|g00r210Ed0Ef0Eo|g00u1-0Eb0Ee0Eo|g00xf70E80E8|g00y1Y0E20E30Ed|g00DFT0E10Ep0Em|g00JE00DZ0E00Ep|g00LeP0D-0Ec0Ec|g00M2L0DV0Ek0Ef|g00Ne00D_0En0Ej|g00OLE0s70E40Eh|g00PKW0DL0E50Ei|g00R1q0DJ0DY0Eb|g00U1_0DN0DW0Eb|g00YFU0DO0E00Ea|g00_EI0DZ0E10E9|g010d_0Dy0D-0E6|g015eR03b0D_0E8|g018Eb0DO0E00E9|g0180u0DS0E30Et|g01cxL0DS0DT0Eu|g01c2v0DM0DV0E2|g01d2W0DD0DW0E7|g01far0Dy0DE0En|g01ix_0Ds0DP0DX|g01k0p0DI0DY0DX|g01nyW0DA0DQ0ER|g01nyU0DP0DR0EB|g01ryQ0DF0DT0DQ|g01wFV0DH0DZ0E1|g01B1O0DJ0DM0E2|g01D1U0DK0DN0DW|g01HJW0D20DG0E4|g01J210Dv0DD0DM|g01L180DI0DN0E3|g01O120DB0DJ0DS|g01-G00Dz0DC0DO|g01_KM0rZ0D20DL|g020yJ0C_0Dw0DP|g0207_0CN0Dq0DU|g0213R0Dm0DK0DV|g025F-0Dr0Dx0DH|g025130Dv0Du0DI|g02bBn0CW0D00DR|g02cHD0Dd0De0DH|g02dcP0Dt0DU0D_|g02lFf0Dg0Dg0DC|g02myB0D40Dj0DF|g02p2e0D60DB0DK|g02q0V0Dh0Dp0DB|g02rd40320Dn0Dy|g02ww20Dl0Dp0DT|g02xG90Da0Dc0DC|g02x5Z0Do0DE0Ek|g02A0l0Dl0Du0Ds|g02J5L0C-0Dm0Dq|g02Udd0CT0Dt|g02W580Dk0Do0DD|g02Yw10Df0Dp0Ds|g02Z560CF0D60Dm|g02-xR0Di0Di0Dw|g02_xQ0D40Df0Dj0Dj|g0300X0D80D90Du|g035EE0Da0Dx0Dx|g036wf0D90Dl0Di|g03eIq0D10Dd0Dz|g03kIl0D70De0Dz|g03kGW0Da0Db0Dr|g03nGZ0D50D50Dc|g03BFE0Dc0Dg0Dr|g03B0o0CY0Df0Dh|g03C300CU0D30Dh|g03FIb0D10D50Dd|g03F410D30Dk0Dv|g03GI30Db0Db0D7|g03Kxc0Dw0CY0Di|g03K3X0CQ0D60D8|g03MKv0D10DG0DL|g03MJ-0D70D20De|g03RBl0CZ0C_0DA|g03ZAN0CV0DF0D0|g03_690Cy0CA0Do|g041Br0CV0CX0D0|g04f0j0CU0D40D9|g04gC60CS0CW0CZ|g04iD40CR0CX0DA|g04lB80CS0C_0CZ|g04w0F0CK0D80CY|g04Adn01X0CP0Dn|g04FBq0CO0CV0CX|g04LDj0CL0CO0CW|g04-3m0CD0CK0D3|g04_cO0CI0CJ0CT|g05cBF0Ct0CS0CR|g05x9f0CE0CM0DE|g05C8I0CC0CE0CN|g05FE70B_0Cp0CR|g05S2N0Cw0CQ0CU|g05Uby0CH0CI0CP|g05Wce0CJ0CH0CP|g064cl0CJ0CG0CI|g068cy0CB0CB0CH|g0695w0Cy0CD0Dk|g06d8x0CC0CN0CM|g06k4T0BX0CF0CQ|g06k7-0CA0CE0CM|g06rdh01O0CG0CG|g06t7u0Cs0CC0C-|g06zzW0Cr0Cu0Cx|g06z5P0C00CF0C-|g06FAr0Cu0Cv0Cz|g06H2X0BC0BH0CK|g06JAv0Cg0Co0Cx|g06RAa0Co0Cz0Cx|g06WBO0Cg0Cn0CO|g06W7m0BU0Cb0CA|g06Yzy0Ci0Cm0Cz|g06Zbt0Cj0Cj0Cj|g070Eg0BO0Cl0CL|g075Aa0Ci0Cv0Cu|g076BT0C30Cg0Ct|g079zi0Ce0Ch0Cr|g07lEf0Bt0Cc0Cp|g07lwN0BS0BZ0C6|g07lbN0Cq0Cq0Cq|g07mzR0Cf0Cr0Co|g07ozp0C90Cf0Cm|g07pBx0Cv0Cn0Ct|g07rzQ0Ca0Ch0Ci|g07ryU0C50C80Cm|g07vK20rd0BV0B_|g07vEh0Bc0B-0Cl|g07v6z0BP0C00Cs|g07wzQ0BM0C40Cf|g07wzm0C40C50Ch|g07yyF0BT0C70Ce|g07zym0BT0C8|g07zyl0C20Ck|g07Bzj0C40Ce0C9|g07DzJ0C50C90Ca|g07LC60BR0C10Cn|g07Mx-0BW0BW0C6|g07SBP0Bv0BR0C3|g07T5V0BY0Cb0Cy|g07UIQ0BO0CL0Cd|g07WDO0BB0BB0Cc|g0800f0BQ0BS0Ck|g0825L0Bu0BX0C0|g0835I0Bk0BY0CD|g088xO0Bl0C20C2|g08bLR0q70BE0Cd|g08b800Bx0BP0Cs|g08eyB0Bm0C80C7|g08iwa0BL0BZ0Ck|g08mC30Bv0C10C3|g08t0C0Bz0BA0BZ|g08t7M0Bw0BU0Cb|g08uIu0BE0Cp0B_|g08ucX01D0Bd0BK|g08vzJ0Bm0Br0Ca|g08vwb0Bl0BA0BS|g08wcJ0Bp0BF0BN|g08xao0BI0Bi0BI|g08ybf0BJ0Bn0BJ|g08z2a0Bs0Bz0Cw|g08A970Bi0BD0BD|g08Bc10Bo0By0BK|g08CIs0BV0Be0BO|g08D8I0Bx0BG0BG|g08E3H0Bj0Bs0Cw|g08HDE0Bc0B-0B-|g08H060Bg0BQ0BL|g08H1b0Bf0BH0BQ|g08Hb_0Bn0Bq0BF|g08I890Bb0Bw0BD0BU|g08K7R0Bu0Bx0BP|g08NBg0Br0BR0C1|g08O7H0Bb0BY0Bw|g08PCI0B80Ba0Cl|g08P2_0B60BC0BH|g08TBf0Ba0BM0Bv|g08Ucc0Bh0Bo0By|g08UcF0B90Bo0BK|g08Vcx0Bq0Bp0BF|g08XbG0Bh0By0BI|g08_yA0BM0Bl0BT|g091yh0BL0Bm0BW|g0944t0AH0Bj0BX|g0954m0Af0Bk0BC|g0959v0A_0BG0BJ|g09abK0B70Bq0Bn|g09c0P0B20Bf0BA|g09f1i0B60Bg0Bz|g09gI90Az0A-0BE|g09jdv01t0B90BN|g09lFh0A-0BB0Cc|g09r8c0B30Bu0Bx|g09tCi0B80Br0Bt|g09wd40B70Bd0Bp|g09AC_0B40Ba0Bt|g09Ad10B00Bh0B9|g09H1W0B50Bs0Bf|g09J1V0AN0B20B6|g09RDc0AQ0AX0B8|g09V8q0AU0B10Bb|g09Z160AS0B50Bg|g0ah8J0AW0AY0B3|g0ajdm0AC0AV0B7|g0aoac0AD0AZ0Bi|g0aqGl0AQ0Be0Bc|g0auaa0As0AW0A_|g0av8G0AL0AU0B1|g0ayDq0AP0AT0B4|g0aG9I0AR0AZ0B1|g0aIdS01s0AK0B0|g0aJ8B0AM0B30AY|g0aLDI0Ao0AP0AX|g0aM0N0AI0AO0B2|g0aM9J0AF0AL0AW|g0aRGc0AJ0B40A-|g0aTDn0Ah0AT0AX|g0aT0D0A90Au0AS|g0aW1X0AA0AI0B5|g0b18C0A50AG0AU|g0b69p0AF0AR0AY|g0bddL0Ax0AB0AV|g0brG90z_0Ar0AQ|g0bt1l0AE0AS0AN|g0bv6y0zx0An0Bk|g0bv8Z0A50AF0AM|g0bv9b0AR0AG0AL|g0by1m0Au0Ay0AI|g0bHcG0Av0AC0A_|g0bIcY0Ax0AD0B0|g0bIet0A70Aw0AK|g0bK2k0Ad0Ay0AN|g0bLKD0Aj0At0Be|g0bM1X0Ai0AA0AE|g0bOdg0Ac0AC0AK|g0bTeY0Ab0AB|g0bYc80zR0Ap0AD|g0c00N0Aq0AE0AO|g0c4Lf0pi0Ae0Az|g0c4aC0zI0Al0AZ|g0c6F_0zv0Ao0AJ|g0c60J0z-0A00Au|g0cmbD0zC0Al0Av|g0cnEx0Ah0Ar0AT|g0cq6M0zr0zw0AH|g0csxm0zH0A30A9|g0csbb0Aa0Ap0As|g0ctfD0Ab|g0cyKc0zY0Ag0Az|g0cy1E0zG0A00Ay|g0czE00A80Ao0AP|g0cAJo0zT0z_0Aj|g0cA490A60Ad0Bj|g0cDLk0zP0oh0At|g0cD3T0zG0Af0AA|g0cEdQ0zS0zU0Ax|g0cEeY0A70Ak0Aw|g0cJb50zF0zI0Al|g0cKwZ0zX0AO0Am|g0cLDJ0zn0A20Ah|g0cMeS0zV0Ab0AB|g0cO4k0z10zx0Af|g0cQ8r0zw0AG0AM|g0cRA90yQ0A20A3|g0cRA70A10A40Am|g0cSBr0zO0A40A8|g0cSA60yA0zJ0A3|g0cS0-0zZ0Ai0Aq|g0cUJi0zE0Ag0AJ|g0cUw60zW0zX0Aq|g0cU0-0zm0zQ0A0|g0cVKf0zK0zT0Aj|g0cVwW0zL0z-0A9|g0cXw40zB0zQ0z-|g0cXeQ0zU0A7|g0cYek0zA0zV0Ac|g0c-JT0zt0zY0Ag|g0d3dr0zf0zR0Ac|g0d4d70zC0zS0Av|g0d70n0zu0zZ0zW|g0daM00oB0Ae|g0daL80zy0zK0Ae|g0dfBD0zN0zN0A2|g0dgBE0yO0zd0zO0zO|g0dgx20z50zH|g0dgx10zl0zX|g0diKL0zp0zY0zP|g0dizz0zh0zz0A1|g0dla00za0Aa0As|g0dmye0zD0zM0Am|g0dn2C0yT0Ad0Ai|g0drb70za0zi0Aa|g0dsJb0yK0zt0z_|g0dsym0z20zz0zH|g0ducp0zs0zR0Ap|g0dxwb0z80zl0zW|g0dxer0z90ze0zU|g0dyyG0z00zD0zJ|g0dALq0zb0zq0zP|g0dC5T0zr0A60AH|g0dC8l0Zo0An0A5|g0dDGS12b0yK0Ar|g0dD0A0z80zm0zQ|g0dIJJ0zo0zE0zT|g0dJcr0z70zi0zC|g0dK620Zo0zx0An|g0dMLJ0yY0zj0zy|g0dMKs0z40zo0zK|g0dPJN0zc0zp0zt|g0dPDR1230zd0A8|g0dP1j0zk0zk0zu0zZ|g0dQwK0zg0zB0zL|g0dQ1k0yT0zm0zm|g0dRL-0yX0nT0zq|g0dUbS0YV0zs0zF|g0dZzz0yI0zJ|g0d-wL0yW0z50zl|g0d-dD0y_0ze0zS|g0d-dG0y-0zA0zf|g0d_C70yJ0zn0zN|g0e4JN0yD0yZ0zo|g0e7Ln0yY0z40zy|g0e7ah0Z40zF0zI|g0e8eI0y-0z60zA|g0ed0k0z30zB0zu|g0edcN0Yy0y_0zs|g0edeS0yP0z9|g0eexm0zg0z20zM|g0efKH0yZ0zb0zp|g0ef0k0yG0yV0z8|g0egxq0yU0z50zD|g0eh4e0-Q0_D0A6|g0ejyr0yH0yS0zz|g0ekdq0yM0zf0z7|g0ekeu0yM0ze0z9|g0eqKF0yz0zc0z4|g0erLY0yX0zb0zq|g0etL-0zj0yY|g0euwo0yL0yV0zg|g0evwi0yr0z30yW|g0exxt0yN0yR0z2|g0ez1L0yG0zG0zk|g0eAyg0yB0yR0z0|g0eFy00yF0yU0yS|g0eKB50yA0yO0A4|g0eQfl0Xp0z6|g0eXBx0yC0yQ0zN|g0eXxj0yF0yL0yU|g0f2eh0Xp0y_0y-|g0f4wS0yN0yW|g0f5IQ0yD0zv0zE|g0f8Cf0yy0yC0zd|g0f9zd0yu0yH0zh|g0fayN0yB0yI0z0|g0fd1E0_H0yT0z3|g0fnxB0yR0yN|g0fpLP0n00yz|g0ftJd1330yK0zc|g0fyC00yw0yO0yJ|g0fCyr0yt0yS0yH|g0fEAJ0yQ0A1|g0g0Ls13b0yE0yZ|g0g0Dz0yJ123|g0g0Dy11E11J|g0g0C20yC11D|g0g0Ae0yu11g|g0g0zk0yv0yI110|g0g0yt0yB10B10S110|g0g0wV0yr10l|g0g00c0ys0yV|g0g00d0_H10d|";


		IMyTextSurface _drawingSurface;
		RectangleF _viewport;
		MySpriteDrawFrame spriteFrame;

		IEnumerator<bool> _stateMachine;

		int startInt = -1;
		int endInt = -1;

		int schedulerCounter = 0;

		//kdtree suport
		List<Vector3D> sortListV3Dkdtree = new List<Vector3D>();
		octoNode rootOctoNode;
		List<subTreeNeedsProcessing> subTreeNeedsProcessingVar = new List<subTreeNeedsProcessing>();
		bool pointsAreAllLoaded = false;
		bool kdtreeIsDoneBuidling = false;
		static int visited = 0;

		public Program()
		{
			// The constructor, called only once every session and
			// always before any other method is called. Use it to
			// initialize your script. 
			//     
			// The constructor is optional and can be removed if not
			// needed.
			// 
			// It's recommended to set RuntimeInfo.UpdateFrequency 
			// here, which will allow your script to run itself without a 
			// timer block.

			var Blocks = new List<IMyTerminalBlock>();
			GridTerminalSystem.GetBlocks(Blocks);
			Wheels = Blocks.FindAll(x => x.IsSameConstructAs(Me) && x is IMyMotorSuspension).Select(x => x as IMyMotorSuspension).ToList();
			RemoteControl = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMyRemoteControl) as IMyRemoteControl;
			//Sensor = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMySensorBlock) as IMySensorBlock;


			theAntenna = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMyRadioAntenna) as IMyRadioAntenna;

			theCockpit = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMyCockpit) as IMyCockpit;

			//Runtime.UpdateFrequency = UpdateFrequency.Update10;
			Runtime.UpdateFrequency = UpdateFrequency.Update100;



			testPointRegionsLinked = new List<Point>();
			// testPointRegionsLinked.Add((int)1016.01,(int)640.0);

			testPointRegionsLinked.Add(new Point(2, 1));
			testPointRegionsLinked.Add(new Point(5, 3));
			testPointRegionsLinked.Add(new Point(6, 1));
			testPointRegionsLinked.Add(new Point(6, 5));
			testPointRegionsLinked.Add(new Point(6, 3));
			testPointRegionsLinked.Add(new Point(6, 2));
			testPointRegionsLinked.Add(new Point(8, 1));
			testPointRegionsLinked.Add(new Point(8, 2));
			testPointRegionsLinked.Add(new Point(11, 3));
			testPointRegionsLinked.Add(new Point(11, 9));
			testPointRegionsLinked.Add(new Point(11, 5));
			testPointRegionsLinked.Add(new Point(14, 1));
			testPointRegionsLinked.Add(new Point(14, 8));
			testPointRegionsLinked.Add(new Point(14, 11));
			testPointRegionsLinked.Add(new Point(14, 6));
			// ================


			// use the PB big display with the keyboard placed toward gravity
			// _drawingSurface = Me.GetSurface(0);
			// use the top center screen to display
			_drawingSurface = theCockpit.GetSurface(0);

			// Calculate the viewport offset by centering the surface size onto the texture size
			_viewport = new RectangleF(
				(_drawingSurface.TextureSize - _drawingSurface.SurfaceSize) / 2f,
				_drawingSurface.SurfaceSize
			);

			//initThePlanetGraph();

			// Initialize our state machine
			_stateMachine = RunStuffOverTime();

			Runtime.UpdateFrequency |= UpdateFrequency.Once;
		}
		//kdtree suport
		public class subTreeNeedsProcessing
		{
			public octoNode r;
			public List<Vector3D> listVectors;
			public int i;
			public int dim;
			public subTreeNeedsProcessing(octoNode ri, List<Vector3D> lVectors, int axisI, int dimI)
			{
				r = ri;
				listVectors = lVectors;
				i = axisI;
				dim = dimI;
			}
		}
		//kdtree suport
		public class octoNode
		{
			public double[] x = new double[3];
			public octoNode left, right;
		}
		//kdtree support
		public static List<Vector3D> sortingOnSpecificAxises(List<Vector3D> listToSort, int axisOnWhichToSort)
		{
			List<Vector3D> newResult = new List<Vector3D>();

			if (axisOnWhichToSort == 0)
			{
				SorterByAxisesOnVector3Dx storerX = new SorterByAxisesOnVector3Dx();
				listToSort.Sort(storerX);
			}
			if (axisOnWhichToSort == 1)
			{
				SorterByAxisesOnVector3Dy storerY = new SorterByAxisesOnVector3Dy();
				listToSort.Sort(storerY);
			}
			if (axisOnWhichToSort == 2)
			{
				SorterByAxisesOnVector3Dz storerZ = new SorterByAxisesOnVector3Dz();
				listToSort.Sort(storerZ);
			}


			//debug
			return listToSort;

			//return newResult;
		}
		//kdtree support
		static public Vector3D convertOctoNodeToV3D(octoNode ON)
		{
			Vector3D v = new Vector3D();
			v.X = ON.x[0];
			v.Y = ON.x[1];
			v.Z = ON.x[2];
			return v;
		}
		//kdtree support
		class SorterByAxisesOnVector3Dx : IComparer<Vector3D>
		{
			public int Compare(Vector3D x, Vector3D y)
			{
				return x.X.CompareTo(y.X);
			}
		}
		class SorterByAxisesOnVector3Dy : IComparer<Vector3D>
		{
			public int Compare(Vector3D x, Vector3D y)
			{
				return x.Y.CompareTo(y.Y);
			}
		}
		class SorterByAxisesOnVector3Dz : IComparer<Vector3D>
		{
			public int Compare(Vector3D x, Vector3D y)
			{
				return x.Z.CompareTo(y.Z);
			}
		}
		//kd tree support
		//nearest neighbors search
		static void nearest(octoNode root, octoNode nd, int i, int dim, ref octoNode best, ref double best_dist)
		{
			double d, dx, dx2;

			if (root == null) return;
			d = dist(root, nd, dim);
			//d = dist2(convertOctoNodeToV3D(root), convertOctoNodeToV3D(nd));
			dx = root.x[i] - nd.x[i];
			dx2 = dx * dx;

			visited++;

			if ((best == null) || d < best_dist)
			{
				best_dist = d;
				best = root;
			}


			//Echo("best:" + convertOctoNodeToV3D(best));
			//Echo("root:" + convertOctoNodeToV3D(root));
			//Echo("=============");

			/* if chance of exact match is high */
			if (best_dist == null) return;

			if (++i >= dim) i = 0;

			nearest(dx > 0 ? root.left : root.right, nd, i, dim, ref best, ref best_dist);
			if (dx2 >= best_dist) return;
			nearest(dx > 0 ? root.right : root.left, nd, i, dim, ref best, ref best_dist);
		}
		static public double dist(octoNode a, octoNode b, int dim)
		{
			double t, d = 0;
			dim = dim - 1;
			while (dim >= 0)
			{
				t = a.x[dim] - b.x[dim];
				d += t * t;
				dim = dim - 1;
			}
			return d;
		}
		static public double dist2(Vector3D a, Vector3D b)
		{
			double d;
			d = (a - b).LengthSquared();
			return d;
		}



		public bool initThePlanetGraph()
		{
			string s = encodedGraph;

			string[] subs = s.Split('|');

			// Echo("a:"+decodeAsCharNumberMax64('a'));
			// Echo("aa:"+decodeStr__NumberMax4095("aa"));


			int indexNumber = 0;

			//for the function
			nodes = new List<Node>();

			foreach (string sub in subs)
			{
				//string[] subs = s.Split('\n');
				//Echo(sub);

				Echo("indexNumber:" + indexNumber);

				//Echo("sub.Length:" + sub.Length);
				// string encodedIndexes = sub.Substring(5,sub.Length-3);
				int end = sub.Length - 1;


				//TODO: todo unsigned decoding
				int xNodeInit = decodeSignedStr(sub.Substring(0, 2));
				int yNodeInit = decodeSignedStr(sub.Substring(2, 2));
				int zNodeInit = decodeSignedStr(sub.Substring(4, 2));
				/*
				int xNodeInit = decodeStr__NumberMax4095(sub.Substring(0, 2));
				int yNodeInit = decodeStr__NumberMax4095(sub.Substring(2, 2));
				int zNodeInit = decodeStr__NumberMax4095(sub.Substring(4, 2));
				*/
				Vector3D position = new Vector3D(xNodeInit, yNodeInit, zNodeInit);
				Echo("position" + position);

				if (end == 6)
				{
					Echo("This node got no neighbors:" + indexNumber);
					nodes.Add(new Node(indexNumber, position, 500));
				}
				else
				{
					
					// Echo("end:"+end);

					// string encodedIndexes = sub.Substring(5,sub.Length-1);
					string encodedIndexes = sub.Substring(6);
					// string encodedIndexes = sub.Substring(5,sub.Length);
					//Echo(encodedIndexes);

					string encodedNeighborsIndexes = encodedIndexes.Substring(0);
					//Echo("encodedNeighborsIndexes:" + encodedNeighborsIndexes);

					//int currentNodeIndexDecoded = decodeStr__NumberMax4095(encodedIndexes.Substring(0, 2));
					//Echo("currentNodeIndexDecoded:" + currentNodeIndexDecoded);

					//int radius = 0;
					//TODO: encode this
					int radius = 500;
					// int indexNumber = int.Parse(subsub[2]);
					//int indexNumber = currentNodeIndexDecoded;
					nodes.Add(new Node(indexNumber, position, 500));

					int numberOfSubstringNeighbors = encodedNeighborsIndexes.Length / 3;
					//Echo("numberOfSubstringNeighbors:" + numberOfSubstringNeighbors);

					foreach (int tmpIndex in Enumerable.Range(0, numberOfSubstringNeighbors))
					{
						string tmpNeighborStr = encodedNeighborsIndexes.Substring(3 * tmpIndex, 3);
						int tmpNeighborInt = decodeStr__NumberMax4095(tmpNeighborStr);
						nodes[indexNumber].neighborsNodesIndex.Add(tmpNeighborInt);
					}
					
				}



				indexNumber = indexNumber + 1;
			}

			return true;
		}


		public int decodeSignedStr(string EncodedStr)
		{
			if (EncodedStr.Length != 2)
			{
				Echo("if (EncodedStr.Length != 2)");
				Echo("ERROR");
			}


			char firstChar = EncodedStr[0];

			char secondChar = EncodedStr[1];

			int intFirstDecoded = decodeAsCharNumberMax64(firstChar);

			int intSecondDecoded = decodeAsCharNumberMax64(secondChar);

			//Echo("intFirstDecoded" + intFirstDecoded);

			//Echo("intSecondDecoded" + intSecondDecoded);

			int signNumber = intFirstDecoded * 64 + intSecondDecoded;

			//Echo("signNumber" + signNumber);

			int minus2048 = (int)signNumber / 2048;

			//Echo("minus2048" + minus2048);

			int resultInt = 0;

			if (minus2048 == 1) { 
				resultInt = -(signNumber - 2048);
			}
            else {
				resultInt = signNumber;
			}
			
			return resultInt;
        }

		public void Save()
		{
			// Called when the program needs to save its state. Use
			// this method to save your state to the Storage field
			// or some other means. 
			// 
			// This method is optional and can be removed if not
			// needed.
		}


		public int decodeStr___NumberMax262144(string strMax262144)
		{


			int resultInt = decodeAsCharNumberMax64(strMax262144[0]) * 4096 + decodeAsCharNumberMax64(strMax262144[1]) * 64 +decodeAsCharNumberMax64(strMax262144[2]) * 1;

			// # resultInt = 0
			return resultInt;
		}

		public int decodeStr__NumberMax4095(string strMax4095)
		{


			int resultInt = decodeAsCharNumberMax64(strMax4095[0]) * 64 + decodeAsCharNumberMax64(strMax4095[1]) * 1;

			// # resultInt = 0
			return resultInt;
		}

		public int decodeAsCharNumberMax64(char character)
		{
			// # print("number:"+str(number))

			// # print("character:",character)
			// int numberToProcess = (int) Char.GetNumericValue(character);
			int numberToProcess = (int)character;
			// # print("numberToProcess:",numberToProcess)
			// Echo("character:"+character);
			// Echo("numberToProcess:"+numberToProcess);

			int resultNumberUnder64 = 0;


			if (character == '-')
			{
				resultNumberUnder64 = 62;
				return resultNumberUnder64;
			}
			if (character == '_')
			{
				resultNumberUnder64 = 63;
				return resultNumberUnder64;
			}

			// # "0" "9" 48 58     0 9       58= 48 +10
			// # "A" "Z" 65 90     36 62     91= 65 + 26
			// # "a" "z" 97 122    10 35     122

			if (numberToProcess < 58)
			{
				// # 48 is "0"
				resultNumberUnder64 = numberToProcess - 48;
				return resultNumberUnder64;
			}
			if (numberToProcess < (90 + 1))
			{
				// # 97 is "A";
				resultNumberUnder64 = numberToProcess - (90 + 1) + 26 + 36;
				return resultNumberUnder64;
			}
			if (numberToProcess < (122 + 1))
			{
				// # 97 is "a";
				resultNumberUnder64 = numberToProcess - (122 + 1) + 10 + 26;
				return resultNumberUnder64;
			}




			return resultNumberUnder64;
		}

		//whip's code
		public void DrawLine(ref MySpriteDrawFrame frame, Vector2 point1, Vector2 point2, float width, Color color)
		{
			Vector2 position = 0.5f * (point1 + point2);
			Vector2 diff = point1 - point2;
			float length = diff.Length();
			if (length > 0)
				diff /= length;

			Vector2 size = new Vector2(length, width);
			float angle = (float)Math.Acos(Vector2.Dot(diff, Vector2.UnitX));
			angle *= Math.Sign(Vector2.Dot(diff, Vector2.UnitY));

			MySprite sprite = MySprite.CreateSprite("SquareSimple", position, size);
			sprite.RotationOrScale = angle;
			sprite.Color = color;
			frame.Add(sprite);
		}

		//TODO:
		//add new heuristic based on angles?
		//do heuristic change mid path ?
		//check for neighbors check at the beginning
		//do best path based on path combining
		//link faces
		//store all faces
		//display the current closest point and neighbors to help with changing path
		public void aStarPathFinding(int startIndex, int endIndex, out List<Node> listPathNode, out Dictionary<Node, double> gscoreOut)
		{
			listPathNode = new List<Node>();

			//Vector3D startPointGoal = startPoint;
			//Vector3D finalPointGoal = endPoint;


			//Echo("nodes.Count" + nodes.Count);

			//Echo("startPointGoal:" + startPointGoal);
			//Echo("finalPointGoal:" + finalPointGoal);

			//TODO: trouver le bon node de start pour avoir l'heuristique correspondant
			//int startingIndex = closestNodeToPoint(startPointGoal);
			int startingIndex = startIndex;

			Node nodeStarting = nodes[startingIndex];

			Echo("nodeStarting.position" + Vector3D.Round(nodeStarting.position,3));

			//1 make an openlist containing only the starting node
			List<Node> openlist = new List<Node>();
			// openlist.Add(nodes[3]);
			openlist.Add(nodeStarting);

			//2 make an empty closed list
			List<Node> closelist = new List<Node>();

			//int endingIndex = closestNodeToPoint(finalPointGoal);
			int endingIndex = endIndex;

			List<double> nodeGvalue = new List<double>();


			// Node ourDestinationNode = nodes[50];
			Node ourDestinationNode = nodes[endingIndex];
			// Node node = null;
			Node node = nodeStarting;

			Echo("ourDestinationNode.position" + Vector3D.Round(ourDestinationNode.position,1));

			Dictionary<Node, double> gscore = new Dictionary<Node, double>();
			Dictionary<Node, double> fscore = new Dictionary<Node, double>();

			Dictionary<Node, Node> came_from = new Dictionary<Node, Node>();


			// is 0 because it does not cost anything to move from starting node
			gscore.Add(node, 0);
			fscore.Add(node, gscore[node] + heuristic(node.position, ourDestinationNode.position));

			Echo("nodeStarting.index:" + nodeStarting.index);
			Echo("ourDestinationNode.index:" + ourDestinationNode.index);


			int debugCount = 0;

			List<Node> listHeapNodes = new List<Node>();
			listHeapNodes.Add(nodeStarting);

			Echo("start.position:" + node.position);
			Echo("goal.position:" + ourDestinationNode.position);

			while (true)
			{

				//Echo("heap.C:" + listHeapNodes.Count);
				if (listHeapNodes.Count == 0)
				{
					Echo("ran out of heap content, no path found");
					break;
				}
				node = listHeapNodes[listHeapNodes.Count - 1];
				listHeapNodes.RemoveAt(listHeapNodes.Count - 1);
				//Echo("node.index:" + node.index);
				// Echo("debugCount=====================:");
				// Echo("fscore["+node.index+"]:"+fscore[node]);
				// Echo("gscore["+node.index+"]:"+gscore[node]);
				// Echo("h:"+heuristic(node.position,ourDestinationNode.position));
				// Echo("node.position:"+node.position);
				// Echo(""+Math.Sqrt(distanceSquarred(node.position,ourDestinationNode.position)));

				if (ourDestinationNode == node)
				{
					Echo("goal reached");
					break;
				}
				else
				{
					if (closelist.Contains(node) == false)
					{
						closelist.Add(node);
					}
					List<Node> neighbors = new List<Node>();
					// Echo("nodes.Count:"+nodes.Count);
					// Echo("node.neighborsNodesIndex.Count:"+node.neighborsNodesIndex.Count);
					foreach (int index in node.neighborsNodesIndex)
					{
						//Echo("index:" + index);
						if (closelist.Contains(nodes[index]) == false)
						{
							neighbors.Add(nodes[index]);
						}
					}
					// Echo("neighbors.Count:"+neighbors.Count);

					Dictionary<Node, double> NodeFscore = new Dictionary<Node, double>();
					foreach (Node neighbor in neighbors)
					{
						// Echo("here11");
						//Echo("neighbor.index:"+neighbor.index);
						double tentative_g_score = gscore[node] + heuristic(node.position, neighbor.position);
						if (closelist.Contains(neighbor) == true)
						{
							double gscoreTmp = gscore.ContainsKey(neighbor) ? gscore[neighbor] : 0;
							if (tentative_g_score >= gscoreTmp)
							{
								continue;
							}
						}

						double gscoreTmp2 = gscore.ContainsKey(neighbor) ? gscore[neighbor] : 0;
						if (tentative_g_score < gscoreTmp2 || listHeapNodes.Contains(neighbor) == false)
						{
							// Echo("here1");
							came_from[neighbor] = node;
							gscore[neighbor] = tentative_g_score;
							fscore[neighbor] = tentative_g_score + heuristic(neighbor.position, ourDestinationNode.position);
							NodeFscore[neighbor] = fscore[neighbor];
							//listHeapNodes.Add(neighbor);
							// Echo("here2");
						}
					}

					foreach (KeyValuePair<Node, double> entry in NodeFscore.OrderByDescending(key => key.Value))
					{
						//Echo("entry.Key:"+entry.Key);
						listHeapNodes.Add(entry.Key);
					}
				}

				if (debugCount == 2000)
				{
					Echo("if (debugCount == 2000)");
					break;
				}
				debugCount = debugCount + 1;
			}
			Echo("debugCount:" + debugCount);

			gscoreOut = gscore;

			List<Node> data = new List<Node>();

			while (came_from.ContainsKey(node))
			{
				//Echo("node.positionR:"+Vector3D.Round(node.position, 0));
				//Echo("gscore[node]:" + Math.Round(gscore[node], 3));
				data.Add(node);
				node = came_from[node];
			}

			listPathNode = data;

			string toCustomData = "points_gened = [";

			int gps_number = 0;
			
			Point previousPointDebug = new Point(0, 0);

			foreach (Node pathNode in data)
			{
				// public Vector3D convertPointToV3D(IMyRemoteControl sc, int faceNumber, Point pointToV3D){
				//toCustomData = toCustomData + pathNode.position;
				//Vector3D nodeConverted = convertPointToV3D(RemoteControl, 4, pathNode.position);

				// MyWaypointInfo tmpWPINode  = new MyWaypointInfo("inter", nodeConverted);
				//MyWaypointInfo tmpWPINode = new MyWaypointInfo(gps_number.ToString(), nodeConverted);

				// toCustomData = toCustomData + tmpWPINode.ToString() + '\n';

				//toCustomData = toCustomData +"displayLarger(["+pathNode.position.X +","+pathNode.position.Y + "])" + '\n';
				/*
				if (previousPointDebug == new Point(0, 0))
				{
					previousPointDebug = pathNode.position;
				}
				else
				{
					toCustomData = toCustomData + "displayLine([" + pathNode.position.X + "," + pathNode.position.Y + "],[" + previousPointDebug.X + "," + previousPointDebug.Y + "])" + '\n';
					previousPointDebug = pathNode.position;
				}
				*/

				double PRfactorReverse = 1024.0 / 30000.0;

				//Echo("PRfactorReverse:" + PRfactorReverse);
				Vector3D pointTI = Vector3D.Round(PRfactorReverse * pathNode.position,0);
                if (gps_number == 0)
				{
					toCustomData = toCustomData + "(" + pointTI.X + "," + pointTI.Y + "," + pointTI.Z + ")";
				}
                else
                {
					toCustomData = toCustomData + ",(" + pointTI.X + "," + pointTI.Y + "," + pointTI.Z + ")";
				}

				gps_number = gps_number + 1;
			}

			toCustomData = toCustomData + "]";

			Me.CustomData = toCustomData;
		}



		public Point closestNodeToPoint(Vector3D thisPoint1, Vector3D thisPoint2)
		{
			Echo("thisPoint1" + thisPoint1);
			List<int> indexNodes = new List<int>();
			List<double> indexRadius1 = new List<double>();
			List<double> indexRadius2 = new List<double>();
			//Echo("nodes.Count"+nodes.Count);
			foreach (Node node in nodes)
			{
				Vector3D diffPos1 = node.position - thisPoint1;
				double diffPosLengh1 = diffPos1.Length();

				Vector3D diffPos2 = node.position - thisPoint2;
				double diffPosLengh2 = diffPos2.Length();

				indexNodes.Add(nodes.IndexOf(node));
				indexRadius1.Add(diffPosLengh1);
				indexRadius2.Add(diffPosLengh2);

			}

			Echo("indexRadius1.Count" + indexRadius1.Count);
			int minIndexRadius1 = indexRadius1.IndexOf(indexRadius1.Min());
			Echo("indexRadius1[]" + Math.Round(indexRadius1[minIndexRadius1], 1));

			Echo("indexRadius2.Count" + indexRadius2.Count);
			int minIndexRadius2 = indexRadius2.IndexOf(indexRadius2.Min());
			Echo("indexRadius2[]" + Math.Round(indexRadius2[minIndexRadius2], 1));

			//Echo("nodes5");
			// Echo("minIndexRadius:"+minIndexRadius);

			int indexOrClosestNode1 = indexNodes[minIndexRadius1];
			Echo("indexOrClosestNode1:" + indexOrClosestNode1);

			int indexOrClosestNode2 = indexNodes[minIndexRadius2];
			Echo("indexOrClosestNode2:" + indexOrClosestNode2);

			Point outputInts = new Point(indexOrClosestNode1, indexOrClosestNode2);

			return outputInts;

		}

		public void RunStateMachine()
		{
			// If there is an active state machine, run its next instruction set.
			if (_stateMachine != null)
			{
				// The MoveNext method is the most important part of this system. When you call
				// MoveNext, your method is invoked until it hits a `yield return` statement.
				// Once that happens, your method is halted and flow control returns _here_.
				// At this point, MoveNext will return `true` since there's more code in your
				// method to execute. Once your method reaches its end and there are no more
				// yields, MoveNext will return false to signal that the method has completed.
				// The actual return value of your yields are unimportant to the actual state
				// machine.
				bool hasMoreSteps = _stateMachine.MoveNext();

				// If there are no more instructions, we stop and release the state machine.
				if (hasMoreSteps)
				{
					// The state machine still has more work to do, so signal another run again, 
					// just like at the beginning.
					Runtime.UpdateFrequency |= UpdateFrequency.Once;
				}
				else
				{
					_stateMachine.Dispose();

					// In our case we just want to run this once, so we set the state machine
					// variable to null. But if we wanted to continously run the same method, we
					// could as well do
					// _stateMachine = RunStuffOverTime();
					// instead.
					_stateMachine = null;
				}
			}
		}

		public IEnumerator<bool> RunStuffOverTime()
		{
			// For the very first instruction set, we will just switch on the light.
			//*_panelLight.Enabled = true;

			// Then we will tell the script to stop execution here and let the game do it's
			// thing. The time until the code continues on the next line after this yield return
			// depends  on your State Machine Execution and the timer setup.
			// The `true` portion is there simply because an enumerator needs to return a value
			// per item, in our case the value simply has no meaning at all. You _could_ utilize
			// it for a more advanced scheduler if you want, but that is beyond the scope of this
			// tutorial.
			yield return true;

			int i = 0;
			// The following would seemingly be an illegal operation, because the script would
			// keep running until the instruction count overflows. However, using yield return,
			// you can get around this limitation - without breaking the rules and while remaining
			// performance friendly.
			/*
			while (true)
			{
				//_textPanel.WriteText(i.ToString());
				i++;
				// Like before, when this statement is executed, control is returned to the game.
				// This way you can have a continuously polling script with complete state
				// management, with very little effort.
				yield return true;
			}
			*/

			string s = encodedGraph;

			string[] subs = s.Split('|');

			// Echo("a:"+decodeAsCharNumberMax64('a'));
			// Echo("aa:"+decodeStr__NumberMax4095("aa"));


			int indexNumber = 0;

			//for the function
			nodes = new List<Node>();

			foreach (string sub in subs)
			{
				//string[] subs = s.Split('\n');
				Echo(sub);
                if (sub == "")
                {
					continue;
                }

				Echo("indexNumber:" + indexNumber);

				//Echo("sub.Length:" + sub.Length);
				// string encodedIndexes = sub.Substring(5,sub.Length-3);
				int end = sub.Length - 1;


				//TODO: todo unsigned decoding
				int xNodeInit = decodeSignedStr(sub.Substring(0, 2));
				int yNodeInit = decodeSignedStr(sub.Substring(2, 2));
				int zNodeInit = decodeSignedStr(sub.Substring(4, 2));
				/*
				int xNodeInit = decodeStr__NumberMax4095(sub.Substring(0, 2));
				int yNodeInit = decodeStr__NumberMax4095(sub.Substring(2, 2));
				int zNodeInit = decodeStr__NumberMax4095(sub.Substring(4, 2));
				*/

				//Vector3D position = new Vector3D(xNodeInit, yNodeInit, zNodeInit);
				int PR = 30000;
				//multiplying factor
				double muFa = PR / 1024;
				Vector3D position = new Vector3D(muFa * xNodeInit, muFa * yNodeInit, muFa * zNodeInit);
				position = PR*Vector3D.Normalize(position);

				//adding kdtree list populating
				sortListV3Dkdtree.Add(position);

				Echo("position" + position);

				if (end == 6)
				{
					Echo("This node got no neighbors:" + indexNumber);
					nodes.Add(new Node(indexNumber, position, 500));
				}
				else
				{

					// Echo("end:"+end);

					// string encodedIndexes = sub.Substring(5,sub.Length-1);
					string encodedIndexes = sub.Substring(6);
					// string encodedIndexes = sub.Substring(5,sub.Length);
					//Echo(encodedIndexes);

					string encodedNeighborsIndexes = encodedIndexes.Substring(0);
					//Echo("encodedNeighborsIndexes:" + encodedNeighborsIndexes);

					//int currentNodeIndexDecoded = decodeStr__NumberMax4095(encodedIndexes.Substring(0, 2));
					//Echo("currentNodeIndexDecoded:" + currentNodeIndexDecoded);

					//int radius = 0;
					//TODO: encode this
					int radius = 500;
					// int indexNumber = int.Parse(subsub[2]);
					//int indexNumber = currentNodeIndexDecoded;
					nodes.Add(new Node(indexNumber, position, 500));

					int numberOfSubstringNeighbors = encodedNeighborsIndexes.Length / 3;
					//Echo("numberOfSubstringNeighbors:" + numberOfSubstringNeighbors);

					foreach (int tmpIndex in Enumerable.Range(0, numberOfSubstringNeighbors))
					{
						string tmpNeighborStr = encodedNeighborsIndexes.Substring(3 * tmpIndex, 3);
						//int tmpNeighborInt = decodeStr__NumberMax4095(tmpNeighborStr);
						int tmpNeighborInt = decodeStr___NumberMax262144(tmpNeighborStr);
						nodes[indexNumber].neighborsNodesIndex.Add(tmpNeighborInt);
					}
                    if (indexNumber % 500 == 0) { 
						yield return true;
					}

				}



				indexNumber = indexNumber + 1;
			}

			//allow to be the tree
			pointsAreAllLoaded = true;

			yield return true;
		}

		public double heuristic(Vector3D a, Vector3D b)
		{

			// return heuristicZero(a,b);
			return euclideanDistance(a, b);
			// return manhattanDistance(a,b);
			// return distanceSquarred(a,b);
		}

		public double euclideanDistance(Vector3D a, Vector3D b)
		{

			return Math.Sqrt((b.X - a.X) * (b.X - a.X) + (b.Y - a.Y) * (b.Y - a.Y) + (b.Z - a.Z) * (b.Z - a.Z));
		}

		public double manhattanDistance(Point a, Point b)
		{

			return Math.Abs(b.X - a.X) + Math.Abs(b.Y - a.Y);
		}

		public double distanceSquarred(Point a, Point b)
		{

			return (b.X - a.X) * (b.X - a.X) + (b.Y - a.Y) * (b.Y - a.Y);
		}


		public double heuristicZero(Point a, Point b)
		{

			return 0;
		}


		public void Main(string argument, UpdateType updateSource)
		{
			// The main entry point of the script, invoked every time
			// one of the programmable block's Run actions are invoked,
			// or the script updates itself. The updateSource argument
			// describes where the update came from.
			// 
			// The method itself is required, but the arguments above
			// can be removed if not needed.
			
			if ((updateSource & UpdateType.Once) == UpdateType.Once)
			{
				RunStateMachine();
			}

			schedulerCounter = schedulerCounter + 1;


			// ==============================================================================

			if (theAntenna != null)
			{
				theAntenna.HudText = str_to_display;
			}

			//var targetGpsString = "";
			//Echo("targetGpsString:" + targetGpsString);
			MyWaypointInfo myWaypointInfoTarget = new MyWaypointInfo("lol", 0, 0, 0);
			//MyWaypointInfo.TryParse("GPS:/// #4:53590.85:-26608.05:11979.08:", out myWaypointInfoTarget);

			if (argument != null)
			{
				if (argument != "")
				{
					Echo("argument:" + argument);
					if (argument.Contains(":#") == true)
					{
						Echo("if (argument.Contains(:#) == true)");
						MyWaypointInfo.TryParse(argument.Substring(0, argument.Length - 10), out myWaypointInfoTarget);
						// MyWaypointInfo.TryParse(argument.Substring(0, argument.Length - 10), out myWaypointInfoTerrainTarget);
					}
					else
					{
						Echo("not if (argument.Contains(:#) == true)");
						MyWaypointInfo.TryParse(argument, out myWaypointInfoTarget);
						// MyWaypointInfo.TryParse(argument, out myWaypointInfoTerrainTarget);
					}
					if (myWaypointInfoTarget.Coords != new Vector3D(0, 0, 0))
					{
						//x,y,z coords is global to remember between each loop
						myTerrainTarget = myWaypointInfoTarget.Coords;
						myWaypointInfoTerrainTarget = myWaypointInfoTarget;
					}
				}
			}

			if (myTerrainTarget == new Vector3D(0, 0, 0))
			{
				// //using the expected remote control to give us the center of the current planet
				// flightIndicatorsShipController.TryGetPlanetPosition(out myTerrainTarget);
			}



			Echo("if the script don't refresh the screen, the Remote Control might be gone, please hit Recompile");

			Echo("using subTreeNeedsProcessingVar");
			if(pointsAreAllLoaded == true)
			{
				if (rootOctoNode == null)
				{
					rootOctoNode = new octoNode();
					subTreeNeedsProcessingVar.Add(
						new subTreeNeedsProcessing(rootOctoNode,
						sortListV3Dkdtree, 0, 3));
				}
				else
				{
					//Echo("rootOctoNode.l.l:" + convertOctoNodeToV3D(rootOctoNode.left.left));
					Echo("rootOctoNode.r:" + convertOctoNodeToV3D(rootOctoNode.right));
					Echo("rootOctoNode.l:" + convertOctoNodeToV3D(rootOctoNode.left));
					Echo("rootOctoNode:" + convertOctoNodeToV3D(rootOctoNode));
				}
			}

			int testI = 0;
			//iterative way to build the tree
			while (subTreeNeedsProcessingVar.Count != 0)
			{
				subTreeNeedsProcessing nProc = subTreeNeedsProcessingVar[0];

				octoNode n = nProc.r;
				List<Vector3D> listToBeSorted = nProc.listVectors;
				int i = nProc.i;
				int dim = nProc.dim;

				//Echo("listToBeSorted.Count:" + listToBeSorted.Count);
				
				List<Vector3D> listSorted;
				if (listToBeSorted.Count <3950)
				{
					listSorted = sortingOnSpecificAxises(listToBeSorted, i);
				}
                else
                {
					listSorted = listToBeSorted;

				}

				testI = testI + 1;


				int intIndexPoint = (listSorted.Count - 1) / 2;

				int startLeft = 0;
				int endLeft = intIndexPoint - 1;

				int startRight = intIndexPoint + 1;
				int endtRight = listSorted.Count - 1;

				List<Vector3D> subListLeft = listSorted.GetRange(startLeft, endLeft - startLeft + 1);
				List<Vector3D> subListRight = listSorted.GetRange(startRight, endtRight - startRight + 1);

				i = (i + 1) % dim;

				//storing the point
				n.x[0] = listSorted[intIndexPoint].X;
				n.x[1] = listSorted[intIndexPoint].Y;
				n.x[2] = listSorted[intIndexPoint].Z;

				if (subListLeft.Count != 0)
				{
					n.left = new octoNode();
					subTreeNeedsProcessingVar.Add(
						new subTreeNeedsProcessing(n.left,
						subListLeft, i, dim));
				}
				if (subListRight.Count != 0)
				{
					n.right = new octoNode();
					subTreeNeedsProcessingVar.Add(
						new subTreeNeedsProcessing(n.right,
						subListRight, i, dim));
				}

				//todo remove the processed node;
				subTreeNeedsProcessingVar.RemoveAt(0);

				if (testI % 400 == 0)
				{
					Echo("% 400 == 0");
					break;
					//yield return true;
				}
				if (subTreeNeedsProcessingVar.Count == 0)
				{
					Echo(".Count == 0");
					break;
					//yield return true;
				}

				if (Runtime.CurrentInstructionCount > 30000)
				{
					Echo("Count > 30000");
					break;
					//yield return true;
				}
			}

			if (Runtime.CurrentInstructionCount > 30000)
			{
				Echo("Count > 30000");
				return;
				//yield return true;
			}


			Echo("testI" + testI);

			Echo("pointsAreAllLoaded:" + pointsAreAllLoaded);
			if(pointsAreAllLoaded == true)
			{
                if (testI == 0)
                {
					kdtreeIsDoneBuidling = true;
				}
				Echo("kdtreeIsDoneBuidling:" + kdtreeIsDoneBuidling);
			}
            else
			{
				Echo("kdtreeIsDoneBuidling:" + "waiting for points loading");
			}


			Vector3D planetCenter = new Vector3D(0, 0, 0);

			bool planetDetected = RemoteControl.TryGetPlanetPosition(out planetCenter);

			Echo("planetCenter:" + planetCenter);

			Vector3D myPos = RemoteControl.GetPosition();
			Echo("myPos:" + Vector3D.Round(myPos, 2));

			Vector3D myRelPosOnplanet = myPos - planetCenter;

			Echo("myRelPosOnplanet:" + Vector3D.Round(myRelPosOnplanet, 2));


			if (kdtreeIsDoneBuidling == true)
            {
				octoNode testON = new octoNode();
				octoNode test_Best = new octoNode();

				Vector3D v3d = myRelPosOnplanet;

				testON.x[0] = v3d.X;
				testON.x[1] = v3d.Y;
				testON.x[2] = v3d.Z;

				double best_dist = 500000;


				Echo("ICkdtreenearestbefore" + Runtime.CurrentInstructionCount);
				nearest(rootOctoNode, testON, 0, 3, ref test_Best, ref best_dist);

				Echo("visited:" + visited);

				Vector3D v3d_test_Best = convertOctoNodeToV3D(test_Best);

				string infos_clos = "" + (v3d_test_Best - v3d).Length();

			}


			Echo("myTerrainTarget:" + Vector3D.Round(myTerrainTarget, 3));

			if (RemoteControl == null)
			{
				Echo("Remote Control gone or not existant\n=\n=");
			}


			float SLerror = (float)(RemoteControl.SpeedLimit - RemoteControl.GetShipSpeed());

			spriteFrame = _drawingSurface.DrawFrame();

			int facenumberCalculated = -1;
			Point pixelPosCalculated = new Point(0, 0);

			faceAndPointOnPlanetsCalculated(RemoteControl, out facenumberCalculated, out pixelPosCalculated, false, new Vector3D(0, 0, 0));

			Echo("facenumberMain1:" + facenumberCalculated);
			Echo("pixelPosMain1:" + pixelPosCalculated);

			whichFileShouldIlook(facenumberCalculated);

			// add the direction of the rover on the map
			int faceNumberTipRover = -1;
			Vector3D shipForwardVectorTip = 2 * 1024 * RemoteControl.WorldMatrix.Forward + Me.GetPosition();

			Point pointShipForwardVector = new Point(0, 0);
			faceAndPointOnPlanetsCalculated(RemoteControl, out faceNumberTipRover, out pointShipForwardVector, true, shipForwardVectorTip);
			Echo("shipForwardVectorTip:" + Vector3D.Round(shipForwardVectorTip, 3));
			Echo("pointShipForwardVector:" + pointShipForwardVector);

			Echo("nodes.CountMain:" + nodes.Count);



			if (myTerrainTarget == new Vector3D(0, 0, 0))
			{

				// foreach (IMyMotorSuspension Wheel in Wheels)
				// {
				// Wheel.SetValue<Single>("Steer override", 0);
				// Wheel.SetValue<float>("Propulsion override", 0);
				// Wheel.Brake = true;

				// RemoteControl.HandBrake = true;

				// }

				startInt = -1;
				endInt = -1;

			}
			else
			{
				Vector3D targetV3Dabs = myWaypointInfoTerrainTarget.Coords;

				Echo("targetV3Dabs:" + Vector3D.Round(targetV3Dabs, 3));

				/*
				if (schedulerCounter != 0)
				{
					return;
				}
				*/



				int facenumberCalculatedTarget = -1;
				Point pixelPosCalculatedTarget = new Point(0, 0);

				faceAndPointOnPlanetsCalculated(RemoteControl, out facenumberCalculatedTarget, out pixelPosCalculatedTarget, true, targetV3Dabs);


				// Echo("facenumberCalculatedTarget:"+facenumberCalculatedTarget);
				Echo("FNCalculatedTarget:" + facenumberCalculatedTarget);
				Echo("pixelPosCalcTarget:" + pixelPosCalculatedTarget);

				whichFileShouldIlook(facenumberCalculatedTarget);

				bool targetIsOnTheSameFace = false;
				if (facenumberCalculatedTarget == facenumberCalculated)
				{
					targetIsOnTheSameFace = true;
				}
				else
				{
					targetIsOnTheSameFace = false;
				}
				Echo("targetIsOnTheSameFace:" + targetIsOnTheSameFace);

				
				List<Node> aStarPathNodeList1 = new List<Node>();
				List<Node> aStarPathNodeList2 = new List<Node>();


				//Point startPointGoal = pixelPosCalculated;
				//Point finalPointGoal = pixelPosCalculatedTarget;



				Vector3D startPointGoal = Vector3D.Round(myRelPosOnplanet,1);

				Vector3D targetV3DrelToPlanet = targetV3Dabs - planetCenter;

				Vector3D finalPointGoal = Vector3D.Round(targetV3DrelToPlanet,1);

				Dictionary<Node, double> gscore1 = new Dictionary<Node, double>();
				Dictionary<Node, double> gscore2 = new Dictionary<Node, double>();

				if (nodes.Count == 0)
				{
					Echo("no nodes init, no path available!");
					return;
				}

				if (schedulerCounter == 3)
				{
					Point outpoutClosestNodeFunc = closestNodeToPoint(startPointGoal, finalPointGoal);
					startInt = outpoutClosestNodeFunc.X;
					endInt = outpoutClosestNodeFunc.Y;
				}

				if (schedulerCounter == 5)
				{
					schedulerCounter = 0;
				}

				if (schedulerCounter > 6)
				{
					schedulerCounter = 0;
				}


				//aStarPathFinding(startPointGoal, finalPointGoal, out aStarPathNodeList1, out gscore1);
				if (startInt >= 0)
                {
					if(endInt >= 0)
					{
						aStarPathFinding(startInt, endInt, out aStarPathNodeList1, out gscore1);
					}
                }




				// isThisPointInThisRegion(int roverCurrentFaceNumber, Point currentRoverPosition, faceRegionPolygon fRP)

				int currentRegionN = -1;
				int targetRegionN = -1;

				Echo("faceRegionPolyList.Count:" + faceRegionPolygonList.Count);
				foreach (faceRegionPolygon faceRegionPolygonCT in faceRegionPolygonList)
				{
					int RegionNumber = faceRegionPolygonCT.regionNumber;
					bool testedRover = isThisPointInThisRegion(facenumberCalculated, pixelPosCalculated, faceRegionPolygonCT);
					if (testedRover == true)
					{
						Echo("testedRover:RegNumber:" + RegionNumber);
						currentRegionN = RegionNumber;
					}
					bool testedTarget = isThisPointInThisRegion(facenumberCalculatedTarget, pixelPosCalculatedTarget, faceRegionPolygonCT);
					if (testedTarget == true)
					{
						Echo("testedTarget:RegNumber:" + RegionNumber);
						targetRegionN = RegionNumber;
					}
				}
				Echo("currentRegionN:" + currentRegionN);
				Echo("targetRegionN:" + targetRegionN);

				// Echo("If any of the two is -1 the script won't run");
				// if(currentRegionN==-1||targetRegionN==-1){
				// str_to_display = "target or rover not in region";
				// return;
				// }

				bool targetIsOnTheSameRegion = false;
				if (currentRegionN == targetRegionN)
				{
					targetIsOnTheSameRegion = true;
				}
				else
				{
					targetIsOnTheSameRegion = false;
				}
				Echo("targetIsSameRegion:" + targetIsOnTheSameRegion);


				//getting vectors to help with angles proposals
				Vector3D shipForwardVector = RemoteControl.WorldMatrix.Forward;
				Vector3D shipLeftVector = RemoteControl.WorldMatrix.Left;
				Vector3D shipDownVector = RemoteControl.WorldMatrix.Down;

				double steerOverride = 0;
				// double steerOverride = shipForwardVector.Dot(Vector3D.Normalize(targetV3Dabs));
				// steerOverride*=100;
				// Echo("steerOverride:"+Math.Round(steerOverride,3))
				// ;
				Point testGetCen1 = getCentroidPointForThisRegion(currentRegionN);
				Echo("testGetCen1:" + testGetCen1);



				Vector3D targetV3Drel = RemoteControl.GetPosition() - targetV3Dabs;

				Vector3D crossForwardTT = shipForwardVector.Cross((targetV3Drel));
				// Vector3D crossForwardTT = shipForwardVector.Cross(Vector3D.Normalize(targetV3Dabs));
				double turnRightOrLeft = crossForwardTT.Dot(shipDownVector);

				Echo("turnRightOrLeft:" + Math.Round(turnRightOrLeft, 3));

				// str_to_display = ""+"turnRightOrLeft:"+Math.Round(turnRightOrLeft,3);


				steerOverride = turnRightOrLeft / crossForwardTT.Length();

				Echo("targetV3Drel.L:" + Math.Round(targetV3Drel.Length(), 3));

				if (targetV3Drel.Length() > 10000)
				{
					steerOverride *= 4;
				}

				if (Math.Abs(steerOverride) < .98)
				{
					steerOverride *= 0.25;
				}
				// steerOverride*=0.25;

				steerOverride *= -1;
				// str_to_display = ""+"steerOverride:"+Math.Round(steerOverride,3);
				Echo("steerOverride:" + Math.Round(steerOverride, 3));


				steerOverride = MyMath.Clamp(Convert.ToSingle(steerOverride), Convert.ToSingle(-1), Convert.ToSingle(1));


				// foreach (IMyMotorSuspension Wheel in Wheels)
				// {
				// double areThisFrontWheel = shipForwardVector.Dot(Wheel.GetPosition() - RemoteControl.GetPosition());
				// Echo("areThisFrontWheel:"+Math.Round(areThisFrontWheel,3));

				// float MultiplierPO = (float) Vector3D.Dot(Wheel.WorldMatrix.Up, RemoteControl.WorldMatrix.Right);

				// // str_to_display = ""+"MultiplierPO:"+Math.Round(MultiplierPO,3);
				// // Echo(str_to_display);
				// //SLerror = -0.2f;

				// float localPO = -MultiplierPO * SLerror;

				// str_to_display = ""+"localPO:"+Math.Round(localPO,3);

				// if(areThisFrontWheel>0){
				// Wheel.SetValue<Single>("Steer override", Convert.ToSingle(steerOverride));
				// Wheel.SetValue<float>("Propulsion override", localPO);

				// }
				// else{
				// // Wheel.SetValue<Single>("Steer override", Convert.ToSingle(-steerOverride));
				// Wheel.SetValue<float>("Propulsion override", localPO);
				// }

				// }

				// //stop when destination is reached
				// if(targetV3Drel.Length()<5){
				// myTerrainTarget = new Vector3D(0, 0, 0);
				// }

				if (facenumberCalculated == facenumberCalculatedTarget)
				{
					if (Math.Abs(pixelPosCalculated.X - pixelPosCalculatedTarget.X) <= 1)
					{
						if (Math.Abs(pixelPosCalculated.Y - pixelPosCalculatedTarget.Y) <= 1)
						{
							myTerrainTarget = new Vector3D(0, 0, 0);
						}
					}
				}



			}

			Vector2 leftMyPosVector2 = new Vector2((float)pixelPosCalculated.Y - 24, (float)pixelPosCalculated.X) / 8;
			Vector2 rightMyPosVector2 = new Vector2((float)pixelPosCalculated.Y + 24, (float)pixelPosCalculated.X) / 8;
			DrawLine(ref spriteFrame, leftMyPosVector2, rightMyPosVector2, 6.0f, Color.Green);

			Vector2 leftMyRoverTipVector2 = new Vector2((float)pixelPosCalculated.Y, (float)pixelPosCalculated.X) / 8;
			Vector2 rightMyRoverTipVector2 = new Vector2((float)pointShipForwardVector.Y, (float)pointShipForwardVector.X) / 8;
			DrawLine(ref spriteFrame, leftMyRoverTipVector2, rightMyRoverTipVector2, 3.0f, Color.Green);

			// x 0 y 0 w 256 h 256

			Echo("_viewport:" + _viewport);
			// DrawSprites(ref spriteFrame);
			spriteFrame.Dispose();

			Echo("regionLinkCount:" + testPointRegionsLinked.Count);

			Echo("planetRegionPolynsLd:" + planetRegionPolygonsLoaded);




			// if (!RemoteControl.IsAutoPilotEnabled) {
			// }
		}


		//check from down6 gps to down3 gps
		//GPS:down3:-3957044.93:-55637.06:-748943.78:#FF75C9F1:
		//GPS:down6:-3971849:-53922.84:-787513.96:#FF75C9F1:
		public void faceAndPointOnPlanetsCalculated(IMyRemoteControl sc, out int facenumber, out Point pixelPos, bool debugMode, Vector3D testedV3D)
		{

			// Echo(Me.GetPosition()+"");
			Vector3D myPos = sc.GetPosition();
			if (debugMode == true)
			{
				myPos = testedV3D;
			}

			// foreach	(Point point in tmpTestNextPoints){
			// Echo("point"+point);
			// }

			Vector3D centerFacePositionOffset = new Vector3D(0, 0, 0);
			double planet_radius = 60000;

			Vector3D planetCenter = new Vector3D(0, 0, 0);

			bool planetDetected = sc.TryGetPlanetPosition(out planetCenter);

			Echo("planetCenter:" + planetCenter);

			// planet_radius = (int) (planetCenter-myPos).Length();
			planet_radius = (int)(myPos - planetCenter).Length();

			Echo("planet_radius:" + planet_radius);

			Vector3D myPosRelToCenter = (myPos - planetCenter);

			double myPosXAbs = Math.Abs(myPosRelToCenter.X);
			double myPosYAbs = Math.Abs(myPosRelToCenter.Y);
			double myPosZAbs = Math.Abs(myPosRelToCenter.Z);

			Vector3D projectedSphereVector = new Vector3D(0, 0, 0);

			int faceNumber = -1;

			double pixelScalingToIGW = (2 * planet_radius / 2048);

			//shorter names formulas
			double intX = 0;
			double intY = 0;
			double intZ = 0;

			Point extractedPoint = new Point(0, 0);
			double extractionX_pointRL = 0;
			double extractionY_pointRL = 0;

			if (myPosXAbs > myPosYAbs)
			{
				if (myPosXAbs > myPosZAbs)
				{
					projectedSphereVector = (planet_radius / myPosXAbs) * myPosRelToCenter;
					intY = projectedSphereVector.Y;
					intZ = projectedSphereVector.Z;
					if (myPosRelToCenter.X > 0)
					{
						faceNumber = 3;
						extractionX_pointRL = planet_radius - intY;
						extractionY_pointRL = planet_radius - intZ;
					}
					else
					{
						faceNumber = 4;
						extractionX_pointRL = planet_radius - intY;
						extractionY_pointRL = planet_radius + intZ;
					}
				}
			}

			if (myPosYAbs > myPosXAbs)
			{
				if (myPosYAbs > myPosZAbs)
				{
					projectedSphereVector = (planet_radius / myPosYAbs) * myPosRelToCenter;
					intX = projectedSphereVector.X;
					intZ = projectedSphereVector.Z;
					if (myPosRelToCenter.Y > 0)
					{
						faceNumber = 5;
						extractionY_pointRL = planet_radius - intX;
						extractionX_pointRL = planet_radius - intZ;
					}
					else
					{
						faceNumber = 1;
						//extractionY_pointRL = planet_radius + intX;
						//extractionX_pointRL = planet_radius - intZ;
						extractionY_pointRL = planet_radius - intX;
						extractionX_pointRL = planet_radius + intZ;
					}
				}
			}

			if (myPosZAbs > myPosXAbs)
			{
				if (myPosZAbs > myPosYAbs)
				{
					projectedSphereVector = (planet_radius / myPosZAbs) * myPosRelToCenter;
					intX = projectedSphereVector.X;
					intY = projectedSphereVector.Y;
					if (myPosRelToCenter.Z > 0)
					{
						faceNumber = 0;
						extractionY_pointRL = planet_radius + intX;
						extractionX_pointRL = planet_radius - intY;
					}
					else
					{
						faceNumber = 2;
						extractionY_pointRL = planet_radius - intX;
						extractionX_pointRL = planet_radius - intY;
					}
				}
			}

			if (extractionX_pointRL == 0)
			{
				//out-ing
				facenumber = faceNumber;
				pixelPos = new Point(0, 0);

				return;
			}

			if (extractionY_pointRL == 0)
			{

				//out-ing
				facenumber = faceNumber;
				pixelPos = new Point(0, 0);
				return;
			}

			double tmpCalcX = extractionX_pointRL / pixelScalingToIGW;
			double tmpCalcY = extractionY_pointRL / pixelScalingToIGW;

			extractedPoint = new Point((int)tmpCalcX, (int)tmpCalcY);

			//Echo("extractedPoint:"+extractedPoint);
			//Echo("faceNumber:"+faceNumber);
			//Echo("projectedSphereVector:"+projectedSphereVector);

			Point calculatedPoint = new Point(-1, -1);


			//out-ing
			facenumber = faceNumber;
			pixelPos = extractedPoint;

		}

		public void whichFileShouldIlook(int facenumber)
		{

			string tmpStr = "" + facenumber + " is ";

			if (facenumber == 0)
			{
				tmpStr += "back";
			}
			if (facenumber == 1)
			{
				tmpStr += "down";
			}

			if (facenumber == 2)
			{
				tmpStr += "front";
			}
			if (facenumber == 3)
			{
				tmpStr += "left";
			}

			if (facenumber == 4)
			{
				tmpStr += "right";
			}
			if (facenumber == 5)
			{
				tmpStr += "up";
			}

			Echo(tmpStr);

			// 0 is back
			// 1 is down

			// 2 is front
			// 3 is left

			// 4 is right
			// 5 is up
		}



		public class Node
		{
			// voronoi vertex
			public int index;
			public Vector3D position;
			public int radius;
			public List<int> neighborsNodesIndex;

			public Node(int index, Vector3D position, int radius)
			{
				this.index = index;
				this.position = position;
				this.radius = radius;
				this.neighborsNodesIndex = new List<int>();
			}

			public String toString()
			{
				return "index is:" + index + "\n" + "position is:" + position + "\n"
				+ "radius is:" + radius;
			}

			/*
			public Vector2 toVector2()
			{
				return new Vector2(position.X, position.Y);
			}
			//swaitched axises
			public Vector2 toVector2sax()
			{
				return new Vector2(position.Y, position.X);

			}
			*/

		}




		public class faceRegionPolygon
		{

			public int faceNumber;
			public int regionNumber;
			public List<Point> polygon;
			public Point regionCentroid;

			public faceRegionPolygon(int faceNumber, int regionNumber, Point regionCentroid,
			List<Point> polygon
			)
			{
				this.faceNumber = faceNumber;
				this.regionNumber = regionNumber;
				this.polygon = polygon;
				this.regionCentroid = regionCentroid;
			}

			public String toString()
			{
				return "face is:" + faceNumber + "\n" + "regionNumber is:" + regionNumber + "\n"
				+ "regionCentroid is:" + regionCentroid;
			}

		}

		public bool isThisPointInThisRegion(int roverCurrentFaceNumber, Point currentPointT, faceRegionPolygon fRP)
		{
			if (roverCurrentFaceNumber != fRP.faceNumber)
			{
				return false;
			}
			// TODO:implement this

			// Echo("fRP.polygon.Count:"+fRP.polygon.Count);
			Echo("currentPointT:" + currentPointT);
			bool testResultTmp = InsidePolygon(fRP.polygon, fRP.polygon.Count, currentPointT);
			// Echo("testResultTmp:"+testResultTmp);
			return testResultTmp;
		}

		// eecs umich insidepoly
		public bool InsidePolygon(List<Point> polygon, int N, Point p)
		{
			int counter = 0;
			int i;
			double xinters;
			Point p1, p2;


			p1 = polygon[0];
			for (i = 1; i <= N; i++)
			{
				p2 = polygon[i % N];
				if (p.Y > Math.Min(p1.Y, p2.Y))
				{
					if (p.Y <= Math.Max(p1.Y, p2.Y))
					{
						if (p.X <= Math.Max(p1.X, p2.X))
						{
							if (p1.Y != p2.Y)
							{
								xinters = (p.Y - p1.Y) * (p2.X - p1.X) / (p2.Y - p1.Y) + p1.X;
								if (p1.X == p2.X || p.X <= xinters)
									counter++;
							}
						}
					}
				}
				p1 = p2;
			}

			// Echo("counter:"+counter);

			if (counter % 2 == 0)
				return (false);
			else
				return (true);
		}

		public List<Point> getAllConnectedRegions(int regionNumber)
		{
			List<Point> resultNodes = new List<Point>();
			//TODO:implement
			foreach (Point node in testPointRegionsLinked)
			{
				if (node.X == regionNumber)
				{
					resultNodes.Add(node);
				}
				if (node.Y == regionNumber)
				{
					resultNodes.Add(node);
				}
			}
			return resultNodes;
		}


		public bool areThoseRegionsConnected(Point node, int node1reg, int node2reg)
		{
			bool tmpNode = false;
			if ((node.X == node2reg) && (node.Y == node1reg))
			{
				tmpNode = true;
			}
			if ((node.X == node1reg) && (node.Y == node2reg))
			{
				tmpNode = true;
			}
			return tmpNode;
		}

		public Point getCentroidPointForThisRegion(int regionNumberPar)
		{
			Point tmpPoint = new Point(-1, -1);
			foreach (faceRegionPolygon faceRegionPolygon2 in faceRegionPolygonList)
			{
				if (faceRegionPolygon2.regionNumber == regionNumberPar)
				{
					tmpPoint = faceRegionPolygon2.regionCentroid;
				}
			}
			return tmpPoint;
		}

		public Vector3D convertPointToV3D(IMyRemoteControl sc, int faceNumber, Point pointToV3D)
		{
			Vector3D resultV3D = new Vector3D(0, 0, 0);

			// Vector3D cubeCenter = detectedPlanet;

			double intX = 0;
			double intY = 0;
			double intZ = 0;

			Vector3D generated_gps_point_on_cube = new Vector3D(0, 0, 0);


			Vector3D centerFacePositionOffset = new Vector3D(0, 0, 0);
			double planet_radius = 60000;


			//Get the PB Position:
			Vector3D myPos = Me.GetPosition();

			Vector3D planetCenter = new Vector3D(0, 0, 0);

			bool planetDetected = sc.TryGetPlanetPosition(out planetCenter);

			Vector3D cubeCenter = planetCenter;

			double distanceToCenter = (cubeCenter - myPos).Length();

			planet_radius = distanceToCenter;

			Point surface_face_offset = new Point(0, 0);

			// surface_face_offset.X = Convert.ToSingle((int)(pointToV3D.X * 2*planet_radius/2048));
			// surface_face_offset.Y = Convert.ToSingle((int)(pointToV3D.Y * 2*planet_radius/2048));
			surface_face_offset.X = (int)(pointToV3D.X * 2 * planet_radius / 2048);
			surface_face_offset.Y = (int)(pointToV3D.Y * 2 * planet_radius / 2048);



			if (faceNumber == 0)
			{
				intX = 1 * (-planet_radius + surface_face_offset.Y * 1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				//intZ = planet_radius * (centroid_surface_lack[1]-2048/2) * planet_radius;
				generated_gps_point_on_cube = new Vector3D(intX, intY, planet_radius);
			}
			if (faceNumber == 1)
			{
				intX = 1 * (-planet_radius + surface_face_offset.Y * 1);
				//intY = -1*(- planet_radius+surface_face_offset.X*1);
				intZ = -1 * (-planet_radius + surface_face_offset.X * 1);
				generated_gps_point_on_cube = new Vector3D(intX, -planet_radius, intZ);
			}
			if (faceNumber == 2)
			{
				intX = -1 * (-planet_radius + surface_face_offset.Y * 1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				//intZ = planet_radius * (centroid_surface_lack[1]-2048/2) * planet_radius;
				generated_gps_point_on_cube = new Vector3D(intX, intY, -planet_radius);
			}
			if (faceNumber == 3)
			{
				// intX = 1*(- planet_radius+surface_face_offset.Y*1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				intZ = -1 * (-planet_radius + surface_face_offset.Y * 1);
				generated_gps_point_on_cube = new Vector3D(planet_radius, intY, intZ);
			}
			if (faceNumber == 4)
			{
				//intX = 1*(- planet_radius+surface_face_offset.Y*1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				intZ = 1 * (-planet_radius + surface_face_offset.Y * 1);
				generated_gps_point_on_cube = new Vector3D(-planet_radius, intY, intZ);
			}
			if (faceNumber == 5)
			{
				intX = -1 * (-planet_radius + surface_face_offset.Y * 1);
				// intY = -1*(- planet_radius+surface_face_offset.X*1);
				intZ = -1 * (-planet_radius + surface_face_offset.X * 1);
				//generated_gps_point_on_cube = arr.array('d', [intX,planet_radius, intZ,]+center_of_planet);
				generated_gps_point_on_cube = new Vector3D(intX, planet_radius, intZ);
			}

			Vector3D generated_gps_point_on_planet = new Vector3D(0, 0, 0);

			//Echo("generated_gps_point_on_cube"+generated_gps_point_on_cube);


			Vector3D generated_gps_point_on_cube_norm = Vector3D.Normalize(generated_gps_point_on_cube);


			generated_gps_point_on_planet = planet_radius * Vector3D.Normalize(generated_gps_point_on_cube_norm) + cubeCenter;

			generated_gps_point_on_planet = Vector3D.Round(generated_gps_point_on_planet, 1);

			resultV3D = generated_gps_point_on_planet;

			return resultV3D;
		}


	}
}
