using Sandbox.Game.EntityComponents;
using Sandbox.ModAPI.Ingame;
using Sandbox.ModAPI.Interfaces;
using SpaceEngineers.Game.ModAPI.Ingame;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using VRage;
using VRage.Collections;
using VRage.Game;
using VRage.Game.Components;
using VRage.Game.GUI.TextPanel;
using VRage.Game.ModAPI.Ingame;
using VRage.Game.ModAPI.Ingame.Utilities;
using VRage.Game.ObjectBuilders.Definitions;
using VRageMath;

namespace IngameScript
{
	partial class Program : MyGridProgram
	{
		public List<IMyMotorSuspension> Wheels = new List<IMyMotorSuspension>();
		public IMyRemoteControl RemoteControl;

		public Vector3D myTerrainTarget = new Vector3D(0, 0, 0);

		MyWaypointInfo myWaypointInfoTerrainTarget = new MyWaypointInfo("target", 0, 0, 0);

		IMyRadioAntenna theAntenna = null;

		IMyCockpit theCockpit = null;

		string str_to_display = "";

		List<faceRegionPolygon> faceRegionPolygonList = new List<faceRegionPolygon>();

		string planetRegionPolygonsLoaded = "Pertam";

		List<Node> nodes = new List<Node>();

		String encodedGraph = "M0M0Ko0050bL004|M0M0IY0bz005|M0M04A0070cC|M0M06c0bp007|M0L-Kr00000t00c|M0L-I_001000009|M0L-FG0b80bT00r|M0LZ6900200A003|M0LWBV0bh0b800K|M0LDIS00o00h005|M0LwdP0br0fY00b|M0Lqdo0c800d00a|M0LoK900t00o004|M0Lkdk01o00M00b|M0LiGq00p00q|M0LiAF0bh00L00g|M0LiAD00u00f|M0LaI300j009|M0L8Hy00p00j|M0KZHJ00n00h00i|M0KY7X0bx00m00l|M0KT7C00s00k|M0KS850c800_00k|M0KNHK00C00z00j|M0KLJs00w00c009|M0KLG_00I00i00e|M0KLG000I00r00e|M0KHFq00K00q006|M0KD7300E00B00l|M0KzLu00400v00c|M0KyyP01K00x00g|M0KrLv0d600Q00t|M0KrJn00F00y00o|M0Kqyq01l00u|M0KnJo00R00J00w|M0KlI800G00C00n|M0Kk5F00H00B007|M0Kj5K00D00A00s|M0KcHY00U00z00n|M0K45Z01600E00B|M0K07j01400D00s|M0JZIK00J00G00w|M0JZII00X00F00z|M0JZ5e00V00P00A|M0JWGu00Z00q00p|M0JTJ500T00F00y|M0JPDg01q00800r|M0JNAI01z01u00f|M0JLbI01r00N00d|M0Jwbp00O00O00M|M0Jvbo01i00_00N00N|M0Jt4m01000H|M0JnKU01200S00v|M0JmKC00T00S00y|M0JlKN01900Q00R|M0J6J400X00R00J|M0J1H400Y00X00C|M0J05E00W00W00H|M0I_5F01j01g00V00V|M0IVIO01100T00U00G|M0IPGO01800-00U|M0IMGm01q00-00I|M0IJGu01x00Y00Z|M0II8W01300O00m|M0IA3n01d01b00P|M0IxIG01801500X|M0IwLe01H01700Q|M0Iu8x01N01400_|M0It8g01601300E|M0IsIH01e019011|M0Im7D01f01400D|M0IiLT0bn01C012|M0IiI101A01100Y|M0IfJJ01w00S015|M0IdfP0bE0br01T|M0I44t01c01001c|M0I34u01M01j01b01b|M0I12i01S01h010|M0H-II01v01t015|M0HZ6q01X01g016|M0HY6g01k01f00W|M0HW1U01m01d|M0HWaB02l01p00O|M0HU5S01c01k00W|M0HT5X01G01j01g|M0HRwt01P01s00x|M0HR1Q02s01n01h|M0HL1J03p01s01m|M0HKdc01Z01W00d|M0HIax02q02o01i|M0HGDF01y00Z00K|M0HEbC02t02q00M|M0HA1a03s01l01n|M0HzIA01D01v01e|M0HzAE01V01I00L|M0HvI_01t01w01e|M0HuJn01-01v019|M0HuGC01E01B00-|M0HtDA02r01z01q|M0HoDt01J01y00L|M0HkHu01D01B018|M0HjH802a01A01x|M0HeLz0bG01U017|M0HbHY01F01t01A|M0HaGq02j02401x|M0H5HZ02901O01D|M0H55z01X01M01k|M0H4Ky02D01U012|M0G_Ac02001K01u|M0GZC_03701V01z|M0GZA301I00u|M0GZA202g01Q|M0GZ5h01R01G01c|M0GY7Z02m023013|M0GXI202801-01F|M0GXx702b01Q01l|M0GVzH01Y01L01P|M0GV5f02501S01M|M0GN4s02c01d01R|M0GNeS02201W01a|M0GJL702H01C01H|M0GIC602e01J01u|M0GGe702701T01o|M0GF6g01_01G01f|M0GAzk02g02b01Q|M0GxcZ02i02701o|M0GuIE02u01w01O|M0Gu6j02602101X|M0GpAi02Q02e01I|M0Go6c02L02d01_|M0GneU0b902n01T|M0Gl7l02A02601N|M0GjGz02j02a01E|M0Gh5e02c02d01R|M0Gh6J02z01_023|M0Ghe202n01Z01W|M0GgHF02u02901O|M0GeH902f02801F|M0GeGP02f02401B|M0GexC02h01Y01P|M0Ge4Y02s01S025|M0Ge5h02Z025021|M0GdBE02I01V020|M0G7GT02w02902a|M0G6zi02P01L01Y|M0G3xH02P02R02b|M0G1cQ02y02t01Z|M0G0Fl02r02401E|M0FX8u02v02m02l|M0FX8M02o02k01i|M0FW8802p02k01N|M0FRe802y022027|M0FP9I03102l01p|M0FM7_03502A02m|M0FMb602S01p01r|M0FLEN02W02j01y|M0FK4A03601m02c|M0FKbT02S02i01r|M0FHHC02J01-028|M0FH8u02-02-02k|M0FFGS02K02x02f|M0FFGQ02U02T02w|M0FEe102V02i02n|M0FD6Q02O02E026|M0FD7B02G02p023|M0FDfY04902V|M0FDfZ0c10b9|M0FCJZ03003001H|M0FA7302X02G02z|M0FzLX0c90c-02H|M0Fz7w03a02E02A|M0FvLC02M02F01U|M0FtBb03l02Q02e|M0FsHo03U02K02u|M0FsHf03g02J02w|M0Fs6502_02N021|M0FrLx04n03202H|M0Fr6x03j02L02O|M0Fr6B02X02N02z|M0FpyL02Y02h02g|M0FoAg03b02I020|M0FoxA03H03n02h|M0Fmb803802t02q|M0FkF_02W02U02x|M0FjGp03g02T02x|M0FjeC04202B02y|M0FeEJ03Q02T02r|M0Fd6X03e02O02E|M0F7y_03m03402P|M0F75j03602_02d|M0F78C03302v02v|M0F55A03i02Z02L|M0F4Kd03902D02D|M0F2a003k03f02o|M0F1KE04n03902M|M0F18D03k03c02-|M0F0zi03M03b02Y|M0F08903c03a02p|M0E_4V03d02Z02s|M0E-Cg03X03q01J|M0EYaT03o03f02S|M0EXKm03D032030|M0EX7L03y02G035|M0EVzT03v03402Q|M0EV8703w033035|M0EU4O03p03h036|M0ES6X03x03j02X|M0EPai03C031038|M0EOGH04002K02U|M0EK4P03-03i03d|M0EH5M03h03z02_|M0EH6A03u03e02N|M0EH8O03t031033|M0ECBo03v03q02I|M0EByL03I03F02Y|M0EBx503J03s02R|M0EBbr03T03N038|M0EA3R04d01n03d|M0EzBq03r03703l|M0EwBr04603L03q|M0EuwB03S03n01s|M0Eu8H03G03w03k|M0Er6w03x03z03j|M0EoA503B03l03b|M0El7W03A03t03c|M0Eh7u03u03y03e|M0Eh7H03A03x03a|M0Eg6403Y03u03i|M0Eg7L04o03y03w|M0EcA703M03L03v|M0Ec9-03K03E03f|M0E7Jq04q03R039|M0E69T04h03G03C|M0E5ya03O03H03m|M0E39N04303t03E|M0D_xT03J03F02R|M0DZyP03V03O03m|M0DZxI03S03H03n|M0DWam04b03P03C|M0DVAt04t03r03B|M0DTzu03V03B034|M0DQb704c03P03o|M0DMyw04i03I03F|M0DMa-04803K03N|M0DLEe04503W02W|M0DJI104E03Z03D|M0DJx604m03J03s|M0DJcP04e04203o|M0DHHd04003Z02J|M0DHzf04g03M03I|M0DGE205r03X03Q|M0DGDY03_03W037|M0DG5s04_03-03z|M0DFHr04E03R03U|M0DF5a04d03Y03h|M0DEDJ04P04603X|M0DDGi04103U03g|M0DAG505h044040|M0DydA04703T02V|M0Dv9p04o04h03G|M0DuFq05h045041|M0DtEV04B04403Q|M0DtCr04f03_03r|M0DtdN04Q049042|M0DsaR04c04b03P|M0Dse504702B|M0Dse60bl04y|M0DoaG04j03K048|M0DfbP04e04803N|M0Dd4u04w03-03p|M0Dcc204r04c03T|M0DbBR04P04t046|M0Dbzj04v04i03V|M0D49R04k04303E|M0D2z004l04g03O|M0CWag04C04k04b|M0CT9X04z04j04h|M0CRyw04s04i04m|M0CRxz04s03S04l|M0CPL004q02M032|M0CN8G04u03A043|M0CL0J04H04G04w|M0CIL10bK03D04n|M0CGbK04O04C04e|M0CFys04F04m04l|M0CDAd04x04f03L|M0CD8K04D04z04o|M0CwzV04F04x04g|M0Cw1t04S04d04p|M0CvA005b04t04v|M0CseL05104A04a|M0Cr9B04K04u04k|M0Cofd0bw04N04y|M0CmEQ05q05o045|M0ChaH04L04r04j|M0Cg8y04_04T04u|M0CfI305n03Z03R|M0CdyH04-04v04s|M0Ccwm04-04M04p|M0Cb0h04S04M04p|M0Ca4t04W04J04J|M0C84H04R04I04I|M0C49N04T04L04z|M0C3ax04O04K04C|M0C2wg04Y04G04H|M0BSfS0cJ04U04A|M0BQb-04Q04L04r|M0BEBW05m03_04f|M0BycC05104O047|M0Bw5Z05804V04J|M0Bv0I04Y04w04H|M0Bt9004_04K04D|M0BqfM05705004N|M0Bo5h05204Z04R|M0Bf3605604X04I|M0Ba3005v05u04W|M0B7wh05a04S04M|M0B64E05e05604V|M0B4y405404F04G|M0B48k03Y04T04D|M0B0eD05705304U|M0A_dS05304Q04y|M0AZ5k05e05904V|M0AUe605c051050|M0ATy505a05504-|M0APyt05w05b054|M0AP3J05f04W04Z|M0AMfx05c05004U|M0AC6h05A05904R|M0AB5E05p058052|M0AAxD05B05404Y|M0AzzH05s04x055|M0Auft053057|M0As9T05H05D05g|M0Ar4T05k05204Z|M0Aq3H05x05k056|M0AnaQ05E05j05d|M0AiGr05i044041|M0AgGr05n05o05h|M0Agbt05F05l05g|M0Ab4T05p05f05e|M0A7bO05y05y05j|M0A4Cr05Q05t04P|M0A3H_05J05i04E|M0A3EV05q05i04B|M0A34Z05k05z059|M0A1DH05r05o04B|M0z_Dw05t05q03W|M0zXzG05B05w05b|M0zQC_05O05r05m|M0zP2u05x05v04X|M0zM1E05V05u04X|M0zAz405B05s055|M0zy3805N05u05f|M0zycr05-05l05l|M0zo5e05N05C05p|M0zo6d05G05C058|M0znz305a05s05w|M0zn6b05T05z05A|M0zj9r05L05E05d|M0zcaF05F05D05g|M0z4aS05X05E05j|M0y_7t05T05I05A|M0yY7_05K05I05d|M0yX7P05T05H05G|M0yWKI0bK05P05n|M0yV8905U05H05L|M0yV8v05M05K05D|M0yK8O05U05U05L|M0yH3C05S05z05x|M0yFCE06e05Q05t|M0ymKr06105R05J|M0yjAB05Z05O05m|M0yhKp06l06705P|M0yh3i06c05W05N|M0yg7c05I05C05G|M0y89i05K05M05M|M0y50E06605W05v|M0y31o06a05V05S|M0y2c406505Y05F|M0x_cn06505-05X|M0xZAn06b05_05Q|M0xYdg06305Y05y|M0xRA106b06005Z|M0xOzW06K06K05_|M0xIFE06406205P|M0xzFD069067061|M0xwdq06d06805-|M0xnEm06m069061|M0xkbq06h05Y05X|M0xh0x06g06a05V|M0xgIB06B05R062|M0xfde06j06h063|M0x4EQ06s062064|M0x02x06c06605W|M0wWBj06e05_05Z|M0wN2Z06i06a05S|M0wFf606f063|M0wBBN06n06b05O|M0wAfa0et06v06d|M0wx0t06u06i066|M0wtbL06k065068|M0wr2W06u06g06c|M0whcI06806r06k|M0w7cv06q06j06h|M00hK-06N05R|M00lCK06p06o064|M00pCq06L06p06e|M00qCY06M06s06m|M00qCw06R06m06n|M00rcg06t06r06k|M00yd706w06q06j|M00HEj06F06o069|M00Mc606C06A06q|M00W0h06O06i06g|M00Zf406P06y06f|M013di06C06r|M014di06W06I|M015fb06P06z06v|M01bfB0e106J06y|M01ibA07q06G06t|M01jGF06E06D067|M01lcq06G06t06w|M01mGp06X06F06B|M01qGO06X06H06B|M01vFu06V06D06s|M01zcp06I06A06C|M01JHu07606N06E|M01NcP07706x06G|M01RfW0bu06Y06z|M01Wzk060060|M01Xzk06Q06n|M023D-06T06S06o|M027Ka07506H06l|M02bx307u06Q06u|M02bet06W06y06v|M02kz006-06L06O|M02wCV06_06S06p|M02zDU06R06T06M|M02AE406U06S06M|M02FE907106V06T|M02QEW07806U06F|M02Seo06Y06x06P|M02XGb07d06E06D|M02Xeo07006J06W|M03af00dt0bu070|M03czn07f07306Q|M03dCV07b07206R|M03fem07706Z06Y|M03gDS07907206U|M03rDx07a07106_|M03wzk07o07g06-|M03MLz0cZ075|M03MLt07Q07406N|M03QG_07h07c06H|M03Zdy07w07006I|M048Fs07e07906V|M04aEW07a078071|M04eDJ07907b072|M04fD507f07a06_|M04iGs07i07d076|M04iGa07e07c06X|M04lG007-07d078|M04ACp07z06-07b|M04Mz107l07j073|M04RI707r07i076|M04UHI07x07h07c|M058zj07k07k07g|M059zk07X07G07j07j|M05dyL07U07m07g|M05lyE07u07p07l|M05oA_07v07t07s|M05rAw07G07t073|M05ryD07_07K07m|M05rb_08I07w06A|M05uIM07E07D07h|M05uBY07B07y07n|M05xAH07F07o07n|M05xws07Y07m06O|M05yBa07F07y07n|M05yct0ck07q077|M05zHR07O07C07i|M05zBB07N07s07v|M05BCH07A07B07f|M05DCL07V07-07z|M05DCv07I07z07s|M05HI407E07E07x|M05IJK07R07Q07r|M05II507R07r07C07C|M05IAY07H07v07t|M05LAv07H07k07o|M05QAK07L07F07G|M05SCa07J07B07J|M05TC907V07P07I07I|M05Tyu08208007p|M05ZAO07S07M07H|M05-Bk07S07N07L|M05_Bs07P07M07y|M062HC08907Z07x|M067BI07W07J07N|M069KY08c07D075|M06bIk07Z07D07E|M06bB207T07M07L|M06iA-07X07W07S|M06kzy07_07X07l|M06mBN07A07J|M06mBM07T07P|M06rzT07T07U07k|M06vwx08108007u|M06wHV08a07R07O|M06wEC08307e07A|M06wzb08207U07p|M06xxR08507Y07K|M06Hwu08j08607Y|M06Szj08407K07_|M070EY08q08o07-|M073yO08w082085|M073y0088084080|M078w708h087081|M07dw208p08b086|M07exH08B08j085|M07gHw08q08a07O|M07hIa08k08907Z|M07i0A08s08e087|M07kL70cE08k07Q|M07w2R08C08r08f|M07B1k08A08f08b|M07C1o08u08e08d|M07DCm08E08n08l|M07EwB08i08i086|M07FwC08z08j08h08h|M07Oxm08i088081|M07RK208m08c08a|M07UB308w08v08g|M07VK20by08R08k|M07YDJ08x08o08g|M07-E108x08n083|M087wd08z08s087|M088Gf08t089083|M08h2m08H08u08d|M08i0x08K08p08b|M08lGi09708y08q|M08q2508A08r08f|M08xBm09d08O08l|M08CyR08F08l084|M08OEh08y08n08o|M08TEj08Y08t08x|M08Vws08G08i08p|M08W1E08L08u08e|M08-yp08S08F088|M0906f08T08I08d|M091CF08V08V|M091CE08M08g|M093yE08J08B08w|M097wq08S08P08z|M09c2L08T08N08r|M09f6T09108C07q|M09iyJ09e09c08F|M09i0P08P08L08s|M09j1o08Q08K08A|M09lCu08O08O08E|M09m2y08X08U08H|M09pBW08M08M08v|M09q0G08-08G08K|M09s1q09308W08L|M09yJs09709008m|M09AwA09508B08G|M09C4C08Z08H08C|M09S2I08Z08X08N|M09UDW08Y08D08D|M09_0W09208_08Q|M0a02r09608U08N|M0a3Ef09408y08V|M0a73R09n08U08T|M0a90r09508_08P|M0aa0u09208-08W|M0aeKy0by09g08R|M0aj7m09U09G08I|M0am0J09908W08_|M0ap1T09909608Q|M0aqEj09K09z08Y|M0atwn09a08-08S|M0av1-09n09308X|M0ayI109808R08t|M0aCI109h09b097|M0aC0Q09E092093|M0aDwp09F09c095|M0aGI70bW09s098|M0aGwz09l08J09a|M0aLA809k09e08v|M0aMA109i09d08J|M0bexX09o09m09l|M0bgLU0bd09p090|M0bkHK0aa09q098|M0byzT09D09j09e|M0bAzQ09t09m09i|M0bBBT09w09r09d|M0bBxk09v09f09c|M0bGyq09o09j09f|M0bJ2v09y09608Z|M0bMyk09x09m09f|M0bOLZ0bN09s09g|M0bVHo0a209O09h|M0c3Ci09R09A09k|M0c4LM09b09p|M0c8zt09u09u09j|M0c9zs09S09B09t09t|M0cfx409M09H09l|M0ciDt09z09A09k|M0ciyw09H09B09o|M0cn2u09P09I09n|M0cpEh09C09w094|M0cpCZ0a109w09r|M0cryN09T09u09x|M0cwEp0a809K09z|M0cBAl09R09N09i|M0cD0K09J09F099|M0cE0f09L09E09a|M0cG4_0ad09Q091|M0cIy809T09v09x|M0cL1z0a_09J09y|M0cM1w0aP09E09I|M0cOFI09O09C094|M0cP030ax09M09F|M0cUwm09V09L09v|M0cVAm09-09Y09D|M0cWG409_09K09q|M0c-3a0ay09Q09y|M0c_3-0aT09P09G|M0d1Bu09W09D09r|M0d6zb09-09Z09u|M0d6yz09Z09H09B|M0da9V0cv0bO091|M0ddwH0am0a309M|M0dmBy0a409X09R|M0doBA0as0a609W|M0dpAt0a40a009N|M0dqyN0a309S09T|M0dszz0ag09N09S|M0dtGe0aC0ao09O|M0dtAt0al0a509Y|M0dvCR0ac0a709A|M0dxIo0ak0a909q|M0dxyL0av09V09Z|M0dyBd0at09W09Y|M0dCAn0ae0ae0a0|M0dJB-0ar0a709X|M0dMCo0aw0a60a1|M0dWEv0aD0ah09C|M0dXJe0an0aa0a2|M0d_JQ0ab0ab0a909h|M0e0JR0ca0aa0aa|M0e1D90aJ0af0a1|M0e15l0aS0aR09G|M0e2zI0a50ai0a5|M0e4Dc0aM0aj0ac|M0e4zx0av0ai09-|M0e5En0aW0ap0a8|M0e6zC0aF0ag0ae|M0e8Dj0aK0ap0af|M0ebIp0aA0aq0a2|M0ebAM0aH0at0a0|M0ebw-0a-0aG09V|M0ecJb0ci0aA0a9|M0ecGM0aB09_|M0ecDQ0aL0ah0aj|M0eeIn0b20aB0ak|M0eeBK0aw0as0a6|M0egBy0au0ar09X|M0ehBm0au0al0a4|M0eiBn0aN0as0at|M0eizg0az0ag0a3|M0elCl0aJ0ar0a7|M0em050aU0aE09L|M0em3g0b00aT09P|M0epzf0aV0aX0av|M0erIL0bR0an0ak|M0eyHM0b20ao0aq|M0eyFc0aD09_|M0ezF70aW0aC0a8|M0eA080b10aU0ax|M0eBA20aV0aH0ai|M0eBxD0aZ0aI0am|M0eJAC0aN0aF0al|M0eKxQ0b_0aX0aG|M0eMCB0aQ0ac0aw|M0eQDw0aO0aM0aj|M0eSDY0bA0aO0ap|M0eSD80aQ0aK0af|M0eUAK0au0aH|M0eXDE0aL0aK|M0eX1B0b10a_09J|M0e-CI0b40aM0aJ|M0e_4P0aY0aS0ad|M0f15C0cf0aR0ad|M0f24c0aY0ay09Q|M0f5wE0aE0a-0ax|M0f7zR0bi0az0aF|M0f8EW0c40aD0ah|M0f8yB0bg0aI0az|M0fd4y0b50aT0aR|M0ffx20aG|M0ffx10aU0am|M0ff2D0b00aP09I|M0fj2L0a_0ay|M0fs180aE0aP|M0fSIE0b30b30aB0aq|M0fTIF0b20b2|M0g0Cf0bj0aQ0ba|M0g04w0aY0b7|L-g0AF0bo0bf|L-g04x0bM0b50bs|LZM0FA0080dr006|LZGdg002C0220bE|LZg0Cb0bk0bI0b4|LZg02R0d2|LZg03F0bs0cF|LYb8M009g0c50bQ|LYg0II0bm0bR|LYg0Bf0b60cg0bk|LYg0yz0aX0bY0bi|LXM0BJ00f0dU008|LXg0Am0aV0bg0bo|LWg0DQ0b40bA|LWg0BD0bf0cg0ba|LSExg00bw04a0c1|LSg0Ig0cX0be|LRIiM00bG0bH017|LRg0Av0dP0bi0b6|LQM0680dx0030bJ|LOM0HK0c20bt|LNLAg001a0bD00a|LNg0450b70cr0bc|LMM0HP0bS0bq|LM2sg006Z0dD06J|LKg0120d0|LJDfg004A0bl0cd|LGM0870dx00k|LG9NM00900bF08m|LFM0IQ0bZ0cs001|LFg0Ef0aL0bj0cb|LDg0xf0bC0bC|LCg0xg0bB0c30bB|LALsg00bV0br0c6|LAGzg00b90c001a|Lx9PM00bQ0by0cD|LwHfM00db01C0bn|LtIoM00dc0bn0ch|Ltg0Cd0dh0ba0f8|LsM05L0bp0cO0cj|LszIM005J0c704q|LqM0K70cs0000d7|Lpg04W0cG0cr0b7|LobFM00cB09p0cl|Log08u09U0fr0cf|Lng0G60bU0cX|Lk9XM00bd0b-0bF|Ljg0Jr0aA0be0co|LiM0HH0ct0bt0bZ|LhM0Gn0dr0060c2|Lhg0Fh0c40bP|LfL1g00c00dv0bD|LfeQM00bX0bX09b|LeeRM00ca0bW0bW|Leg0xV0b_0dN0bg|LdM0HJ0el0bS0bz|Lc9VM00c50bQ0cq|Lcg0xG0aI0c30bY|LbGsg00ce0bE0bV|LbEBg00cm0bl02C|L9M0GM0bT0ct0bq|L8g0xy0du0bC0b_|L6g0ET0aW0cb0bU|L4aPM00bd0cn0b-|L2Lwg00cH0bD0fz|L2zKM00ei0bK0c9|L0M0c100b00m0cK|L0C8M00c702F0cy|L0f2M00ab0cA0bX|L0g0EK0eZ0bA0c4|K-2_M00dE0c_|KZE0g00cJ0bw0cm|KYGjg00dd0cT0c0|KXg0780aS0bO0cx|KWg0Bi0dh0bf0bk|KVITM00bH0cM0ds|KVg0KV0cR0an0co|KUM04o0bJ0cO0cC|KS8Sg00cw07w0cU|KSbpM00bN0cz0cn|KQEpg00cd0dd0c1|KPaQM00cl0cN0c5|KPg0JK0em0bR0ci|KOM0260cu0cY|KO9GM00b-0d90cD|KOg03X0bM0bs0cF|KNM0Jq0d-0bz0bL|KNM0GZ0ff0c20bS|KKM02a0cS0cp0dw|KKcLg009U0cQ0cw|KJ9ag00cv0ip0ck|KHg06K0cf0ge0cG|KGDaM00c90do0c-|KFbsM00cL0cP0cl|KEfaM00cR0ca0cB|KDcjM00cA0bN0cL|KCM03f0020cj0cS|KC94M00bF0cq0d8|KB7AM008c0d80df|KAg03M0cr0dq0bc|KAg06q0cx0dJ0bM|KzLng00fG0h30c6|KxM0wM0cY0dV|KxCCg004N0dL0cd|KwM0bx0g70c80dQ|KsbMM00cB0cz0d1|KrIMM00dk0ds0ch|KraGM00cP0cn0da|KpM05A0d40bJ0cj|KobfM00cz0cW0cN|KocSg00dl0cv0gv|KoflM00ci0di0cA|KnM02X0dI0cC0cu|KnGeg00e00ce0e7|Kn88g00ck0cV0cV|Km87g00cU0cU0hL0ec|KkbeM00d10cP0d5|Kkg0GJ0bP0em0bm|KgM00d0cp0fg0cI|Kf43M00dg0740d3|KeFqM00cy0dB02F|Kd1TM00cc0dA|Kdg01t0d20dj0bv|KbbmM00cL0dM0cW|Kbg0220bb0de0d0|Ka42M00dy0cZ0dF|K9M0620f30cO0eh|K8b5M00dT0cW0da|K7KTM00eY00v|K3M0Kx0e60bL|K27DM00cD0df0cE|K19SM00dm0cq0ek|JYatM00d50cN0dm|JVGFM00dB0bG0dc|JUHaM00db0bH0dk|JSEjg00dK0cm0ce|JSg02p0dn0eU0d2|JQ7CM00ed0d80cE|JP4-M00d_0dy0cZ|JPg0AZ0ee0cg0bI|JMf7M00cR0dX0dM|JMg00E0d00eU0dz|JKHwM00dc0ev0cM|JKexg00e20eF0cQ|JIaeM00e90da0d9|JGg02H0dp0fI0de|JFE5M00ez0cy0dG|JFg03b0dq0f20dn|JFg03g0dJ0cF0dp|JCM0Fa0eG0b80bT|JCJ2M00cM0eK0ch|JC38g00ec06Z0dD|JBg0wO0dz0c30dC|JAJbg00dZ0gb0bV|JyM0210cu0eo0eo|JxM08S0dQ0bx0bp|Jx4yM00dg0dW0d3|Jxg0wo0dj0ex0du|Jw1UM00dH0eL0c_|JvFpM00dG0c-0db|Jtg0wU0du0fe0ep|Jr1_g00dt0bu0e1|Jr33M00dF0cc0dH|Jm3vM00d30ey0dE|JlFjM00do0dO0dB|Jl2UM00dE0eL0dA|JjM03A0ef0cS0fP|Jjg03S0cG0eI0dq|JhEbg00dS0dd0dR|JhCqg00go0cJ0dS|JebwM00di0d10dT|Jeg0zI0bY0eq0dP|JcFgM00ez0eb0dG|Jcg0A00dN0ee0bo|JbM09U0cK0ji0dx|JbEdg00hS0dK0e0|J9CNg00go0dL0dK|J9blM00dM0ea0d5|J8M0C80gG0bh0e5|J7M0xC0cI0fb0dY|J64rM00d_0dy0ey|J4f2M00fB0di0eH|J3M0xT0dV0gC|J3Icg00e70fs0dv|J2M0Iy0el0cs0e8|J15iM00ej0dg0dW|J0EBg00dR0cT0eu|J01fg00dD06z0et|I_g0et0dl0e30e3|I-g0es0e20e40e20e4|IZg0er0e30gy0e30gf|IYM0Cs0gH0dU0eG|IXM0Jv0e80d70eX|IWGog00eu0cT0dZ|IUM0Jf0fR0d-0e6|ITaUM00eQ0dm|ITaVM00dT0eg|ISFbM00f40en0dO|IS51g00cV0gx0dt|IS7-M00ek0df0e_|ISg0Ax0dP0er0dh|IRM04b0eh0eJ0dI|IQaVM00eB0ea0eS|INM04P0d40g-0ef|INzyM00gn0c70eD|IM5tM00ew0f00d_|IJ84M00d90eN0ed|IHM0H60ff0bZ0d-|IFg0GL0fh0cX0co|IEFbM00fl0eb0es|IzM01L0dw0dw0eP|Iyg0y30dC0eW0eq|Ixg0yl0ep0fZ0dN|Iwg0AP0iJ0ee0fw|IvFxM00en0gh0eM|Is0Hg00kB0e106f|IrFig00e00fH0e7|IpHJM00eM0dk0eK|Ip5ZM00eV0f50ej|Ipg0w50e-0dz0fp|Im3EM00dW0iY0dF|IlAiM00do0dO|IlAhM00eC0eC|Ila_M00eT0f60eg|IkAfM00eD0eA0eA|IjA9M00ei0eE0eC|IiAaM00eD0eO0f1|Iig0f_0dl0jv0hg|IhM0Eu0e50fm0dr|IgdtM00dX0lK0eT|Igg03Q0fX0dJ0fa|IbM0420g90ef0fy|IaINM00ev0eY0ds|I81_M00dH0iW0dA|I7GxM00es0fd0ev|I68eM00fo0gr0ek|I5AgM00eE0gp0hG|I2M01p0eo0fc0fc|I0asM00e90eS0fo|H_6GM00g10e_0eV|H_awM00eg0f60eQ|H_cwM00eH0f60eB|H_g0140de0iC0dj|H-6lM00eR0f50ew|H-g0xQ0fe0g60ep|HZM0Kc0fQ0e60fv|HZJ3M00eK0f90d6|HYg0Df0f80g50cb|HYg00f0f70fp0ex|HW6UM00ed0g10eR|HU51M00fn0ej0gu|HTB_M00eE0hk0f4|HSg0370fa0dp0fI|HRM06u0iE0d40ga|HRCMM00f10gt0eb|HQ5_M00eV0ft0ew|HQaOM00eT0eB0eS|HQg00s0g20g20e-|HOg0CA0fw0bI0eZ|HNJ6M00g00eY0fu|HNg03r0fX0eI0f2|HMM0xH0fO0dV0gP|HLM01l0eP0eP0fD|HIGzM00fM0eM0fK|HIg0wW0gd0dC0eW|HHM0Fw0fi0ct0fi0el|HHM0wy0cY0gQ0fO|HHg0G40fj0fj0em0f-|HGM0Fv0fk0ff0ff|HGg0G30g50fh0fh|HCM0Fr0fm0fi0fC|HCEQM00gt0gh0en|HBM0Fo0eG0fx0fk|HB5DM00ft0gu0f0|HB98M00eQ0eN0fq0fq|HBg0wc0e-0ex0gd|HA97M00fo0fo0gr|HAg08z0fN0bO0gi|HzHbg00gj0gN0dZ|Hz5GM00f50ls0fn|HxJeM00gR0f90hl|HwM0LI0h60eX0fA|Hwg0C00er0iG0f8|HvM0Fo0ke0fm0fW|HuM03H0eJ0fL0fP|HuM0f20gs0c60f_|HtM0L-0fv0fV|HrfJM00f-0fJ0dX|HqM0Gv0fk0fF0fF|HqM01c0fc0g40g3|HpM0Gy0gz0fS|HpM0Gx0fC0fC|HpJWg00gA0cH0gD|HpFcg00h-0eu0gm|Hog02h0f20dn0iC|HlfHM00jz0fB0iS|HiH0M00fd0fM0g0|HgM03M0g90gF0fy|HgGRM00fd0gc0fK|Hgg08F0hf0gO0fr|HeM0xo0fg0fb0gQ|HeM03o0fy0dI0fT|HdM0Jt0g80h60eX|HdM0Iw0fU0e80g8|HcM0I60fE0gw0fU|HbM03p0gM0gM0fP|HaM0Ip0fS0gZ0fR|HaLPM00ix0fA0hl|H8M0Fs0hJ0fx0i2|H8g03R0eI0i40fa|H7M0c_00a0i30g7|H4g0yl0g60eq0iJ|H3g0KR0fB0jP0fh|H2M0eR0gq0fz0i3|H0HcM00gc0fK0f9|H06UM00kp0e_0eR|H0g00M0f70hr0f7|G_M00X0fD0g40h8|G-M00-0gL0fD0g3|G-g0Fv0eZ0jP0fj|G-g0xN0kw0eW0fZ|GZM0cF0fY0iK0cK|GYM0IQ0fR0hb0fQ|GYM0450eJ0gI0fL|GYM05T0f30im0gg|GYIqg00hQ0dv0gE|GYGWM00gl0fM0g0|GYg0wO0fp0gK0fe|GYg06e0cx0gi0jq|GYg0bL0e40h50hs|GXM05S0ic0ga0gJ|GXGwM00fl0es0gl|GXg06A0fr0gO0ge|GWGEg00gm0fs0gk|GUGFg00hI0gj0gN|GTGKM00gh0hi0gc|GTGqg00fH0i70gj|GTxFM00iM0hW0ei|GSBJg00dL0hq0dS|GSANM00eO0jj0ii|GRM0f90h10jS0f_|GP8gM00fq0kp0eN|GOLsg00h20fz0h1|GOErM00f40h40fl|GO4FM00fn0f00k2|GMcjg00i10cQ0nI|GKM0I30gz0fS0gZ|GK3Fg00ec0hD0kr|GKg0cA0e40ht0g_|GJM0H_0fE0ia0gw|GJJCg00gY0fG0gD|GIM0zF0gC0gX0gW|GIM0zx0dY0hd0gB|GIK3g00gA0fG0he|GIIug00gb0i50gY|GHM03M0gI0fL0gM|GGM0AX0gH0dU0gH|GFM0AW0hE0e50gG0gG|GFM03_0iD0g90gF|GFM05u0gg0hU0g-|GFg0wQ0hr0gd0gU|GEM01i0ho0ho0g4|GEM03x0gF0fT0fT|GEGVg00gk0hQ0fs|GDg06S0hf0fN0gi|GCM0yP0fb0hh0hF|GCM0xs0fg0fO0h7|GBI0M00gT0gT0fu|GBz8g00iX0iV0hV|GAH_M00gV0gV0gR0gR|GAg0wT0nJ0gK0kw|GzH-M00hi0hK0gT0gT|GyM0zW0gB0gX0h0|GyM0zI0gB0hc0gW|GyJsg00gE0hj0gA|GxM0Iv0gw0fU0hb|GxM04-0gJ0eh0hp|Gxg0c00gy0hz0h5|GvM0zY0gW0hv0hE|GuM0fL0gs0if0gq|GuKWg00h30gs0if|GuKQg00h90cH0h2|GuEkM00hk0hB0gt|Gug0bK0g_0gf0hy|GsM0Ja0ha0fQ0ha0fv|GsM0xy0gQ0hx0hh|GsM00t0g30ib0iT|GsKPg00he0jl0h3|GrM0J90hw0h60h6|GrM0IN0gZ0g80hw|GrM0zG0hd0gX0hu|GrM0zw0hO0gC0hc|GrK8g00hm0gD0h9|Grg08J0fN0hT0gO|Gqg0ea0eF0iN0hA|GpM0xU0h70gP0hH|GoHaM00gl0hn0gV|GnJtg00ik0gY0hm|GnE5M00f10hG0h4|GmKMM00fu0i00fV|GjJTg00hj0iu0he|GjHaM00hY0hi0hX|GiM01A0ij0gL0gL|GiM0500hU0g-0it|GiBIg00ir0go0hS|Gig0050g20mI0gK|Ghg0aP0gf0hy0j6|Ggg0d10hA0gy0hz|GfM0zL0hc0hN0hv|GeM0zZ0hu0h00h_|GdM0IX0hb0hM0ha|GdM0xw0i_0h70j9|Gcg0bi0h50ie0hs|Gcg0ch0ht0ie0g_|Gbg0dB0hg0ks0ht|GaECM00lS0h40hR|G9G7M00hR0iF0iQ|G94Fg00i80kz0gx|G6M0Am0h00h_0gH|G5M0yZ0hH0gP0iy|G5DFM00eO0hP0hk|G3M0yh0j90hh0hF|G3Gvg00i70gk0hZ|G2M0F40ke0l60fW|G2HLM00hX0gV0jd|G25ug00cV0iR0i8|G1M0IX0iq0hw0ix|G1M0zS0hO0hu0iB|G1M0zA0hd0iy0hN|G1DCM00ih0jw0hG|G0H4g00gN0hZ0gb|F_EUM00hB0jA0hC|F_CGg00hq0dR0j1|F_g08K0iw0hf0is|F-M05D0ic0gJ0hp|F-A2g00k10gS0ir|F-wDM00iM0qd0gn|FZHxM00hn0id0iv0hK|FZHcM00io0hn0id|FZH3g00hI0hQ0i6|FZEqg00ig0fH0il|FYM0Ae0hv0iB0hE|FYKIM00kM0ju0hl|FYddg00jv0jf0gv|FXM0Gu0n10fW0ia|FXM0ds0f_0j20fY|FXg03w0fX0i90j0|FWICg00gE0ja0ik|FWH4g00jL0hZ0jQ|FWFWg00il0gm0hI|FW5hg00hL0jk0hD|FWg03x0i-0j00i4|FUM0Hd0i20gz0iq|FUM00R0j80j80h8|FUM05S0gg0im0hU|FUHnM00hY0iv0hX|FUg0bu0hz0hy0jV|FSM0f-0h20h10jT|FQEeg00j10h-0kD|FQDaM00la0ii0hP|FQCRM00gp0jj0ih|FPM0280jh0ho0jt|FOJmg00i50hj0iz|FOFIg00h-0iU0i7|FNM05X0ga0ic|FMM05X0iE0jB|FLH0M00iP0jm0hY|FK74g00cw0p-0iI|FIM0Hz0ia0ix0hM|FIABg00hV0jy0hq|FIg0840hT0k90jg|FHM04Y0jF0hp0iD|FHJxg00iz0hm0jn|FHHxM00id0jd0hX|FHg08U0j60kH0hT|FGM0J40iq0hM0fV|FGM0zJ0hF0hO0iO|FGJsg00ik0iH0iu|FFg0g00jx0k60ka|FEM0A50hN0iO0h_|FEg01w0fI0jG0eU|FDM04t0it0gI0jh|FDM06g0f30k50in|FDGpM00hC0je0iQ|FDg0Ba0oe0fw0jU|FBJqg00j30iz0jC|FB6Yg00ip0kt0iZ|FBg0zc0fZ0oe0er|FyM0ce0j20g70oM|FxM0Cp0jI0jW0kf|Fx0pM00jp0gn0hW|Fxg0d_0jx0hg0k4|FwM0A40iy0iB0kF|FvGLM00iQ0j40io|FvGGM00hC0iF0iP|Fv5Qg00iZ0hL0jk|Fve3M00fJ0mx0jX|FuM0030jb0h80i_|FuFSg00il0jM0jM|Fuy7g00iX0gS0k1|Fu1NM00eL0iY0jp|Fty4g00gS0lU0iV|Ft1YM00k20ey0iW|Ft5Tg00iI0kc0iR|Ftg03X0jH0j50i9|FsM0wJ0iT0hx0j7|Fsg0310i90i40kS|FqD5g00hS0j_0ig|FpM0cZ0nZ0i30iK|FpJfg00ja0kd0iH|FpGNM00je0iP0jo|Fpg03X0jH0i-0lF|Fog0970hs0jV0iw|FnM0wL0i_0kI0jJ|FnM0130ib0jb0ib|FmM0xH0hx0jJ0hH|FmIvg00kg0i50j3|FlM0130jN0j80iT|FlM02j0js0js0js|FlHOM00iv0k30hK|FkGvM00iF0jK0j4|FjdNg00jY0lf0i1|Fjg06Z0is0k90jr|FiM03M0iD0kn0ij|FhM07T0dQ0kT0lM|FhBiM00gp0la0ii|Fg4_g00iR0i80ko|FfKmg00jn0h90kh|FfHeM00jo0io0k3|FeK2g00iu0jC0jl|FdG-M00j40jK0jm|Fd0_M00iW0qd0iM|Fdg06m0ge0jR|Fdg06n0jg0l3|FcM01S0jc0jc0jc|FbM01w0ij0k_0jN|FbKIM00of0ld0i0|FbeUg00eF0jY0i1|F9DnM00mw0nA0hP|F9g0eU0iA0k00iN|F7Arg00mp0ir0mX|F7g0Lk0fJ0mq0m5|F6F7M00hR0le|F5M05v0in0ku0jF|F5JPg00iH0kd0jn|F5F7M00lS0kR|F4M0Bn0kF0lc0jI|F3M0520jB0m40it|F3g01n0kS0iC0mI|F3g0510k80i-0j5|F2M0C10jE0iL0jZ|F2M0xy0j70kI0j9|F2GUM00je0kq0jo|F2Gxg00jM0i6|F2Gtg00iU0iU0jL|F1M01i0jt0lL0jb|F1Gxg00kZ0k7|F0g0G10g50lt0f-|E_Hng00i60k70kj|E_g05M0jq0kX0k8|E-M0fK0gq0nZ|E-M0fL0kh0if|E-g0CY0iG0pL0lt|E-g09f0ie0km0j6|EZM0Cg0jZ0iL0ki|EZdxM00iS0j-0j-|EZeXg00k60jv0jf|EYM0C60kb0jI0jW|EYdwM00jX0or0jX0ov|EXCZg00ng0j10mm|EXg0eX0ka0k40jx|EWyZg00iV0lU0hV|EW45M00ls0gu0iY|EVHJM00jm0kv0jd|EVg0d_0k00ll0iN|EUM06K0kO0iE0ku|EUfcg00iA0kW0jY|ETH8g00jO0ly0jQ|ESg05C0jR0kX0jH|ESg07b0is0kJ0jg|ESg0fc0iA0l10k0|EQM0B_0lG0l40jZ|EQ5tg00kt0iZ0kl|EPJqg00j30kG0jC|EOM0E10fx0lh0hJ|EOM0CV0iL0ki0k-|EOI4g00kj0ja0l5|ENL6g00jl0kk0jT|ELM0CM0jW0kK0kf|EKHPg00jQ0lI0kg|EJL3g00kP0kh0lR|EJ5ag00md0kc0ko|EJg09i0mr0jV0kH|EHM03_0ln0jh0kC|EG4wg00kl0jk0kz|EG7TM00gr0lK0g1|EFH0M00kN0jK0ky|EF1Ng00kE0gx0kB|EFg0cu0hA0kx0mr|EE6Ig00iI0md0kc|EDM05E0k50jB0lw|ECHHM00ky0k30kM|EBg0xz0gU0pf0g6|EBg0cu0lA0lp0ks|EAHmM00kq0lr0kv|EA4kg00hD0ko0kE|EzG6M00kR0kQ0l8|Ez1xg00kr0lo0et|EyM03S0kn0lq0lv|EyF6g00ig0mK0kZ|Ey4hg00nB0kz0kr|ExM0Av0iO0l20jE|ExJjg00l50kd0kL|Exg07i0km0iw0kJ|EwM0xf0j70mD0jJ|Ewg0790kH0k90l3|EuM0CB0l40m60ki|EuJkg00lE0kG0kP|EuI8M00kv0mf0i0|EuGVM00le0kq0lr|EtM06R0lM0k50lx|EsKHg00kL0lX0kk|EsFUM00lj0kU0kA|ErF5M00jD0kA|Erg02F0j00lF0jG|EqM08I0ji0lD0kY|EqF_M00kQ0lJ0l8|EqF5M00mo0lj|Eqfdg00ma0k60lg|Eqg05G0lb0jR0k8|EpM0860kT0lD0mc|EpGcg00kD0jO0lH|EoM0Dk0kf0lQ0mV|EoM01Z0l90jt0lL|EoM02Z0lC0l90lz|Eog0fb0me0ka0lN|EnM0Av0qG0kF0lc|Eng06a0kJ0jr0lb|EmM0BZ0l70kb0kK|ElIsg00o00kg0kG|EkM0EZ0lh0hJ0mO|EkM0BX0m00l_0l4|EkGrM00kU0kA0li|EjM02m0l00lm0k_|EjBNM00jj0mb0ih|Ejg0640l30lk0kX|EiM0AB0l20jE0lG|EiJYM00mA0mG0ju|EiGCM00jA0li0kN|Eie2g00lg0jf0od|EieDg00kW0lf0nm|EhM0Eg0n20ke0l6|EhGxM00l80lZ0le|EhFbM00kV0lO0kQ|Ehg0630nX0lb0nb|Egg0dZ0k40lN0lA|EfM02o0lz0n40l9|EfM0410m30kn0lq|Ef1Dg00oq0qM0kB|Efg0cf0mC0kx0lu|EeM03Z0ln0kC0lW|EeHtM00kN0ky0m7|Ee5oM00nz0ft0k2|Eeg0FK0jU0lB0jP|Eeg0ca0lp0mL0mL|EdM03v0kC0lV0lC|EdM05D0ku0mt|EdM05E0kO0m1|EdGVg00lH0k70lY|EcM02E0l00mE0lm|Ecg0dt0ll0mh0kx|Eag0FJ0mj0lt0mq|E9M03h0lv0ms0l0|E9M08E0kT0mM0kY|E9Jig00nE0kL0mP|E9g02_0j50mT0kS|E8M0AI0lc0kb0m0|E8Ghg00kZ0lT0ly|E7Hpg00lY0kj0nk|E7G4M00lP0kU0m2|E77LM00eH0kp0nz|E6M00Y0k_0jN0mu|E6M0700ji0mc0kO|E6g0d-0l10mg0ll|E5FeM00lj0l-0lP|E4FyM00lO0m20lJ|E3M0Da0nn0k-0mV|E3L7g00nf0kk0nf|E3DLM00mo0hB0jD|E2Geg00mQ0lH0nF|E2yHg00iX0k10mp|E0M03I0lW0lv0ms|E0M03O0lq0m90lV|E0Kjg00mP0kP0nw|E0H1g00ly0mi0lI|E0GzM00m20li0m8|E0FdM00ns0oN0lO|D-M0BZ0og0l70m6|D-M0AL0lG0og0l7|D-M05J0na0lx0nY|D-GoM00lP0lJ0lZ|DZM04a0ml0ln0m9|DZM0500mt0jF0mn|DZg0LZ0mR0jz0nM|DYM0Cq0l_0kK0nn|DYHNM00mW0lr0mf|DXGGM00oN0lZ0m-|DWM03V0m30mF0lW|DWfvg00mk0kW0nm|DVB-M00nl0la0mw|DTM0720kY0lM0na|DT5-g00kt0nB0kl|DTg0fw0mk0l10nK|DSI3M00m70mA0kM|DSg0dX0lN0nK0mh|DRg0d80mg0lA0mC|DPH1g00nR0lY0nk|DPg0Fz0pL0mS0lB|DPg0g00ma0oV0me|DOM04f0mn0m30mF|DODlg00oP0j_0mH|DNM04n0m40oW0ml|DNDBM00ns0lS0kV|DNyQg00lU0mJ0jy|DNg0J-0lB0pa0jz|DNg09O0ks0mN0km|DMM03o0lV0mv0lC|DMM0570lw0nW0m4|DLM0wg0lL0no0my|DKM03o0nq0ms0n9|DKCcM00mb0oH0jw|DKeoM00mR0o70iS|DJM0wF0mu0n30mD|DJM08S0pT0ou0mM|DJI7M00ne0mf0ld|DJg03L0mY0nP0mT|DJg0cY0mh0nG0lp|DIM0wY0my0n30kI|DIM02C0n90lz0nc|DIM0420ml0m90nd|DIJDM00mZ0q80ld|DIDrg00mm0pH0n6|DHg0wh0jG0hr0nJ|DGyQg00pp0mp0ny|DFF5g00n60kD0mQ|DFg0aY0lu0lu0nQ|DEM08v0mz0lD0oO|DEg09R0nQ0mr0q7|DDM0Fe0n20l60n1|DDJMg00lE0nx0lX|DDFFg00mK0nv0lT|DDeMM00m50om0mx|DDg0FO0mj0qU0ql|DCg03u0mB0n-0lF|DCg04x0m_0n80mY|DBM0Dv0ot0lQ0k-|DBHsM00m-0n50m7|DABeg00ny0jy0ng|DAg04i0mU0mB0nP|DyJfM00n00n00mG|DyHiM00m80o40mW|Dyg04S0nb0mU0n8|DxJeM00ne0oU0mZ0mZ|DwM0Fn0mO0os0i2|DwM0E00os0lh0mO|DwM0wG0no0my0mD|DwM02g0lm0ni0n70n7|DwHQM00mW0oa0ne|DwEYg00mH0oi0mK|DvM02h0n40nc0n4|Dvg04M0m_0ph0mU|DuM0300mv0mE0nj|DuM06-0mc0oo0m1|Dug0500lk0ph0m_|DtM02i0mE0ni0n7|DtM03V0mF0o90nq|DtHVM00n50n00mA|DsL5g00lR0lR0nD|DsBng00mX0nC0j_|Dsajg00nt0nL0oZ|DrM02i0nj0nc0n4|DrM0300nr0n90ni|DrHwg00mi0lI0nH|DrzJM00pJ0o60mb|Drejg00ma0lg0np0np|DqM0CA0m60o80lQ|DqM0wh0nV0mu0n3|Dqeig00nm0nm0oK|DpM03y0nd0mv|DoM03y0o90nj|DoDkM00nu0nu0mo0l-|Dobfg00nO0nh0nL|DnDjM00nA0ns0ns|DlFYg00oE0mQ0nF|DkKDg00oh0lX0nD|DkJug00nE0mP0oh|DkzSg00mJ0oI0mX|Dk7hM00lK0nT0ls|DjDdM00oH0jw0nu|Dj4Pg00md0kE0oq|DiBmg00oI0ng0oj|DhL7g00nw0nf0o3|DhJig00lE0nN0nx|DhGmg00nv0lT0nS|Dhg0d40nK0pz0mC|DgHAg00oc0nk0o0|Dgcrg00od0gv0nO|Dgg0wE0mI0p70gU|Dgg0dZ0me0ob0mg0nG|DfaQg00nt0op0nh|Dfg0LY0on0nU0m5|DeJdg00o10pX0nE|Dec9g00nI0op0nt|Deg03T0mY0n_0mB|Deg0aa0mL0pz0mN|DdGwg00nS0oc0mi|DdGog00oA0nF0nR|Dd7iM00ov0qh0nz|Ddg0LX0p60qa0nM|DbM0wd0o20no0ok|DbM05e0nY0mt0pW|Dag06s0q20ow0lk|D9M05w0oT0m10nW|D9M0du0jS0j20oL|D9g02W0mT0p20qi|D9g03T0pg0nP0p3|D8HZg00nH0l5|D7HZg00o50nN|D6M00e0ox0o_0nV|D5LXg00pU0nD0po|D5HgM00pD0m-0ol|D3HYg00oD0o10q_|D3zLM00pE0nl0pI|D3e3M00mx0oB0or|D1M0Cy0pF0nn0ot|D1M03O0oW0nd0nr|D1HJM00n50ol0oU|D1g0dY0oS0nK0rl|D0GOg00nR0oD0nH|D0cEg00lf0oJ0nI|D0g0zN0iJ0qy0iG|C_M0KF0tJ0ju|C_M0AW0m00pF0l_|C_JYg00nx0pc0nw|C_EUg00pA0n60oE|C_Bpg00pd0nC0oX|C-M0wj0pk0nV0pq|C-HHM00o40pe0oa|C-eXM00on0mR0oC|C-f3M00nM0pm0om|CZM06-0oO0na0q-0oT|CZaJg00nO0nL0oZ|CX4Cg00nB0py0lo|CWcUM00o70j-0oG|CVM0Fz0n20n10p4|CVM0CU0o80rz0mV|CVM08W0pV0mz0p8|CV9cM00j-0qE0nT|CVg06l0q20nX0qo|CUM00z0o20o_|CUM00A0oz0oQ|CUM00-0ps0oy0oQ|CUG6g00oR0pb0nS|CUeaM00oF0pB0o7|CUeMM00pm0om0oF|CTGOg00q00oc0o5|CTFfg00oi0nv0oR|CTecM00oC0pZ0oB|CScSM00pj0or0qE|CRCGM00mw0pi0nA|CRA5g00ny0p10nC|CRcIg00p90od0pS|CRdug00oY0np0p9|CQM0dn0po0nZ0oM|CPM0ct0oL0iK0pQ|CPGaM00l-0pD0m8|COM07M0mM0pl0oo|COCig00oX0pH0mm|CNM00U0oz0ps0oy|CNFAg00oE0qz0oA|CNg0e10p00r00ob|CMM06o0oo0nY0qm|CLIeM00oa0pe0n0|CLg0g00mk0oY0o-|CKM0480mn0r60o9|CKBNg00oj0p50oP|CKfWg00oV0qP0oK|CJazg00op0nh0pK|CJg0g00qF0oV0p0|CIM00l0ox0pk0o2|CIg0fW0o-0qZ0oS|CHzWg00pp0pP0oI|CHg03q0p30s20n-|CHg03t0pn0n_0p2|CGM0FE0qO0os0qO|CGBOg00oX0qb0qv|CGg0Kd0pa0nU0qg|CGg0w_0qi0nJ0pf|CEM08s0pV0ou0pl|CEcVg00oK0pY0oJ|CEg0JG0qn0mq0p6|CDG9g00ra0oA0q0|CBJIg00pX0oh0pU|CBB5g00pP0pt0oj|CAI3M00ol0qp0oU|CAg0xs0p70qy0kw|CAg0440ph0n_0pn|CAg04n0nb0n80pg|CzCsM00pM0ta0oH|Cyd5M00pB0q50oG|CxM00l0o_0pr0ok|CxM0820p80qt0oO|Cxe-M00on0pw0oC|Cwg03T0pg0r-0p3|CvM0dw0o30pG0oL|CvyBg00pv0mJ0p1|CuM0wt0ok0pC0qc|CuM00l0px0pk0pC|CuM00R0oz0oQ0px|CsB3g00qf0qB0pd|CqM02r0p_0p_0p_|CpyAg00qR0pp0qK|Cpf0M00pm0pZ|CoM00v0ps0qx0pr|Co4sg00p-0oq0qk|Cog0aG0nG0rl0nQ|CnE3g00q40oi0qz|CndEM00oB0q60pj|CmM0wm0pr0qx0pq|CmGdM00rk0oN0o4|Cmz2M00pJ0re0o6|ClM0AU0qw0og0o8|ClM0dv0r30po0t4|ClDsg00oP0mH0q1|ClAJM00o60pN0pM|ClyTM00nl0qY0pE|Clakg00oZ0pR0qL|Clg0DL0sM0jU0mj|CkANM00ss0pI0pi|CkAIM00pO0pO0pI|CjAHM00rs0sj0pN0pN|CjA8g00p10pd0qf|ChM0bk0oM0pT0pT|Charg00pS0qu0pK|Chbog00oJ0qu0pR|CgM0bj0pQ0pQ0sD0mz|CgL3g00pc0o30r3|CfM09F0ou0rb0p8|CeM04L0nW0rB0ri|CeIZg00q_0nN0pc|CecVg00r40p90qu|CeebM00pw0oF0q9|Cd7Qg00qL0ip0py|CcM0260pu0pu0pu|CcGpg00pb0q30q30oD|CcDwg00qA0pH0q4|Ccg06-0nX0qe0ow|CbGog00r_0q00q0|CbDFg00q10rd0pA|C9d2M00rV0pj0s1|C9dVM00q90rx0pB|C9g07F0mN0qX0qe|C8JFM00mG0qp|C8e3M00rF0pZ0q6|C8g0LY0qg0nU|C7BVg00r20p50qq|C6M0wW0pq0r10rA|C405M00jp0wo0hW|C4g0700q70qj0q2|C2Aug00pP0qC0pt|C1g0LU0p60qr0qa|B_6VM00tE0nT0wl|B_g00x0n-0ry0p7|B_g06_0qX0qe0qW|BZ3wg00t-0py0qM|BZg0Id0mS0qU0qn|BYM05N0oT0rC0rp|BYg0IZ0ql0pa0rR|BYg0640qV0ow0qQ|BXJEM00pe0qH0q8|BXB_g00ru0qb0qv|BXg0LT0qT0qg0qs|BWg0LV0rL0qr0t9|BVM08a0qD0pl0rt|BVaSg00pY0pS0pR|BUCCg00p50qq0qA|BSM0AF0qG0pF0sJ|BSM0040rH0px0pC|BSg0zo0pf0rK0oe|BRFsg00pA0oR0ra|BRD6g00qv0qI0q1|BPB0g00qJ0pt0r2|BPArg00rj0qf0qJ|BOM08f0rb0qt0r7|BMb9M00oG0rN0ov|BMg0g00o-0qS0qN|BLM0zH0sH0l20qw|BKJGM00rk0qp0rZ|BKD4g00rM0qA0sa|BIASg00qC0rg0qB|BIyQg00sd0pv0sc|BI88g00pK0p-0t-|BH2ug00qk0yN0lo|BHg0f-0rJ0qF0r9|BGM0Fz0rz0p40p4|BFehg00oY0qS0r5|BFg05P0rh0qo0sg0sN|BExig00rE0pv0sd|BEeug00qF0rJ0qP|BEg0Li0rR0r80qr|BEg0HY0mS0tz0ql|BEg06M0qW0rh0qo|BEg06O0qX0qj0qV|BEg07p0q70qW0qj|BDyiM00rv0rv0pJ|BCg0ea0p00r90r0|BBM06M0rt0oo0rD|BBIhg00tF0o50pX|BAg0dZ0qZ0oS0tk0sV|BxM0wW0rW0qc0rA|BwBog00qB0qb0rr|BvM0fz0pU0rm0pG|Bvdkg00r50pY0tM|Bvdsg00t10qP0r4|BuM0440ri0oW0rq|BuM08a0sv0qD0s6|Btg0Lh0sw0sw0qT|Btg0fI0qN0te0qZ|BrFEg00qz0r_0pb|BqM09k0pV0sF0qD|BqDRg00rf0rf|BqDQg00s70q4|BqzjM00rv0pE0rs|BpDSg00rc0rc0si0ui|BpAHg00rj0qJ0rP|Bpg06x0qV0sg0qQ|BoM04i0pW0rG0r6|BoAhg00sc0qC0rg|BnGbM00sP0pD0qH|Bng0bf0ob0sL0pz|BmM0fN0sn0rn0r3|BlM0fO0sm0su0rm|BjM02A0rq0rH0rH|BiM05E0rC0qm0rw|BgM03s0sq0r60ro|BgBvg00rP0r20ru|BgzuM00re0sk0pO|BfM07k0qt0rI0q-|BfBGg00rr0qq0rY|BfyOM00qY0qY0re|BeM05C0s40rp0rT|BedlM00rF0q60rQ|Beg01M0s00ul0qi|BdM0CK0sx0qO0ot|BdM0xS0qc0r10s3|BdM04Q0rT0pW0rG|BdM0630qm0rS0rp|BdM06G0s90q-0rX|BdwAg00tT0qR0se|Bdd_M00rL0q90rx|BaM04I0rB0sq0ri|B9M01X0ro0ro0qx|B9M07h0s50rt0s9|B9fbg00qN0s-0qS|B9g0A70wx0qy0sM|B8ekM00qs0tA0rF|B7COg00rO0qI0sp|B6brM00s80tE0qE|B5CIg00rY0sX0rM|B5Bng00rg0sW0rr|B5cWM00u20rx0rV|B5g0Ju0qn0tB0qT|B4M0650rX0rC|B3M05k0rw0sT0rB|B3M0650sh0s4|B3cJM00q50rQ0s1|B2M0wN0r10sy0s3|B2M06n0rD0sA0rS|B2C2g00ru0s_0rO|B1JZM00tc0qH0ts|B0g03t0sN0pn0sf|A_FOg00ra0q30ui|A_g02r0s20ul0ry|A-ciM00q50rV0s8|A-g02K0p20sf0s0|AZM0y20rW0rA0sE|AWM05I0rU0st0rw|AWM07l0s60sr0rI|AWM07I0r70sr0s5|AWDCg00so0rd0si|AWc6M00u20s10rN|AVM06R0rI0rD0sb|AVDjg00qI0sp0so|ATM06R0t20s90sl|ATzjg00qK0un0rj|ASxvg00qR0sB0qK|ASwPg00tT0rE0sB|ASg02_0ua0r-0s2|ASg05O0rh0qQ0sG|AQM0660sA0rU0sz|AQDXg00s70rf0vb|APzYM00sk0pO0ss|APzUM00rs0u40sj|AOM06N0sb0t00sC|AOKGg00sK0rn|AOKFg00th0rm|AMDrg00sQ0sa0s7|ALD5g00rM0sQ0sa|AKM04N0t60rG0rq|AKM07I0tr0s60s5|AKAlM00sj0pM0tv|AJM05M0sz0s40sT|AJM0fW0sK0rn0u1|AIM08l0sF0r70tr|AIg0L90sR0r80r8|AHM0BT0sJ0rz0uS|AHM0wT0tq0rW0t3|AHM05W0sh0sS0st|AHM06p0sC0rX0sh|AHxvg00se0sd0u6|AGM06q0sl0sA0sY|AGM0a90t40pT0tg|AFM0yl0t30s30sH|AFM08Q0rb0tt0sv|AFg05I0tw0sg0sO|AEM0yp0sE0uP0qG|AE2pM00wl0xG0xx|ADM0By0qw0v50sx|ADM0f_0sm0tu0su|ACg0bx0sV0sU0rl|ABg0AV0rK0vz0pL|ABg05s0qQ0sO0r-|ABg05y0tR0sG0sN|AyGcM00uw0rk0tc|AwD8g00sp0sZ0so|Awg0K_0tG0sw0tp|AvM05Z0sY0sz0tb|AuM05c0st0rT0t7|Aug0bl0sL0uh0tn|Atg0bX0r00tx0sL|AsBig00uy0rP0t5|ArCIg00rO0tl0sZ|AqM06n0sC0t80sS|AqD3g00sX0tI0sQ|Aqf7g00tf0rJ0t1|AnBXg00t50tD0rY|AmM06L0t20sl0t8|AmeIg00s-0r50tM|AlM06_0tN0sb0t0|AkM0xl0ty0sy0sE|AjM0cp0pG0u10sD|AhBtg00sW0tm0s_|AfM0530tP0t70sq|AfM0550sT0to0t6|AfM06q0t00sY0tH|Afg0LZ0qs0tp|AeC4M00tv0v00pi|AdM05D0sS0tL0to|AdGlM00sP0rZ|Adg0f60te0uv0tk|Adg0f80tf0r90td|Adg0fY0s-0us0te|AcM09T0sD0tQ0tQ|AcILg00tF0sn0tK|AcGlM00uw0uV|AceSM00tO0tA|Acg0cT0td0r00tx|AbCHg00tD0sX0tI|AbBsg00uE0t50vY|Aag0aq0sU0tV0tV|A7M05b0tb0tP0t7|A7g0LX0sR0tX0t9|A6M0wf0tW0sy0ty|A6M0870sv0tt0sr|A6LDM00tJ0uV0rZ|A4M0870sF0tr0tC|A4M0fZ0tK0sK0vG|A4BeM00ss0u40ta|A4g06A0u50u80sG|A4g0cG0tk0uF0sV|A3M0wQ0tq0ut0t3|A1g0Ht0uk0qU0tU|A0egM00tj0rL0u3|z_g0Jj0tU0tG0rR|z-M0850tt0uc0tZ|z-Cpg00s_0uN0tl|zYalM00rN0v80qh|zWHsg00uD0q_0th|zWg0Jo0tB0uH0sR|zVM06i0t80tS0tL|zVCWg00tl0uN0sZ|zUM0Ly0of0vc0ts|zUKVg00th0tu0vL|zRM05Y0tH0tb0ug|zRcOg00t10r40uf|zQM0740tY0t20tS|zQeZM00tX0tj0u3|zPM05a0ug0to0t6|zPM0990tg0tg0y8|zPg05L0u00sO0ua|zNM06p0tN0tH0uZ|zMw6g00rE0uT0se|zMg0H_0tz0uQ0tB|zMg0a80tn0tn0ur|zKM00a0uC0tq0ub|zKg0LX0tO0uA0tp|zJM07a0t_0um0tN|zJM07M0tC0uc0t_|zJ75g00yP0qL0qk|zGM07o0tZ0ue0tY|zGg05Q0ud0u80tR|zFM0cq0su0vG0t4|zFcAM00rQ0u70s8|zEe3M00tO0v60tA0u9|zDARM00sk0v70tv|zAg07G0vW0up0tw|zwxIg00uT0sB0un|zucCM00u90u20v8|zug06g0tw0ud0u0|ztcEM00u30uL0u7|ztg0580v40tR0sf|zsM0w20tW0v20ut|zsM07I0tC0tZ0ue|zsg06g0uu0u80u0|zrM07p0uc0t_0um|zrcLg00wp0wp0tM|zqM05q0tL0ve0tP|zpg0aw0uF0sU0ur|zoGlg00rf0r_0uj0uj|znGmg00ui0ui0uD|zng0FX0vM0tz0uX|zmg02g0s00uq0ry|zlM06V0ue0tY0uY|zkzsg00u60sc0uz|zkg01Q0uq0uO0uO|zkg06R0u50vh0uu|zjg02h0vn0ul0uo|zjg0al0uh0vl0tV|zjg0g00tf0ux0uG|ziM0wK0ub0ty0uJ|zig06o0up0uB0ud|zig0eT0uI0td0uR|zeF9M00sP0ti0wE|zef6g00uU0us0vO|zczyg00uE0sW|zczxg00uW0un|zbg0Lt0uK0tX0v9|z8g06p0vh0uu0v4|z6M0180vd0tW0uM|z3Gtg00vb0uj0tF|z3zMg00uy0tm0vP|z2g0cG0uR0tx0uh|z2g0fS0us0uU0uI|z1g0JJ0vC0tG0uK|z1g0fm0uG0uv0vf|y_M0wR0v20ut0va|yYg0Kw0uH0vm0uA|yXcMM00vy0u90wd|yWM0110vd0uC0v3|yWCVg00tD0tI0w-|yWg01i0uo0uo0u_|yVM0yK0w30sH0v5|yVg0Hz0uX0vI0tU|yVg0cK0uv0wz0uF|yUM0CL0sx0v10v1|yUwmg00tT0wH0u6|yUg0f_0ux0vN0uG|yTHkM00ti0vU0ts|yTzgg00wH0xS0uz|yTg0Hu0uk0wq0uQ|ySM06r0vF0um0u-|yRM06k0tS0u-0vj|yRM06o0vF0uY0uZ|yNg01h0vg0uO0vT|yLC6M00v70v70ta|yJM0Cs0vt0uS0uS|yJM0wx0ub0va0uJ|yJM00L0uM0vv0vv|yJg06f0vA0uB0ua|yHM0B20uP0sJ0vx|yHemM00vi0u30vo|yGBVM00u40v00v0|yGacM00u70tE0wu|yGg0LX0vi0uA0w5|yFM0wZ0v20uJ0vZ|yFGig00si0xk0uD|yDM0KO0vu0tJ|yDM02l0vq0uC0uM|yCM05E0vj0ug0vs|yCg0f90vN0uI0wr|yyg01x0vn0vV0u_|yyg0750vA0up0uB|yxeSM00v90w80v6|ywM05K0uZ0ve0vr|ywg04X0vH0vJ0v_|ywg0am0ur0vw0vw|yvg0KN0uK0vp0vp|yvg02c0uq0wc0vg|yudMM00v60wm0vy|yug0KO0vm0wY0vm0w5|ytM03P0w70vs0vd|ytM05K0vj0vE0vX|ysM0470ve0vX0vq|yrM0BM0vB0v10wt|yqM0KG0vK0vc0wN|yqM00i0v30v30vQ|yqg09V0vl0vl0vW|ypM0Bd0wv0v50vB|ypdiM00vo0vR0uL|ypg0Bf0xA0sM0wb|ypg0760vD0vD0vh0v4|yoM0Bz0vx0wf0vt|yog0Jj0vI0wJ0uH|yog0770wC0vA0vA|ymM05K0wk0vr0x4|ykM0700uY0wn0u-|yjM0fx0vL0tu0u1|ygg05x0x30vk0vJ|yfg0I60uQ0vS0vC|yfg0540vH0wh0vk|ydM0Ks0wI0vu0yd|ybM0f_0wQ0tK0vG|ybg0FF0wB0uk0wq|ybg0ft0uU0wr0vf|yaeyg00ux0x60w1|y8AZg00uE0xd0vY|y5M0wc0vv0w90vZ|y5deM00wy0vy0w4|y4g0HU0xv0wJ0vI|y4g0180vV0u_0zE|y2HkM00ww0uV0w2|y0g01l0wc0vg0vT|y0g08U0vw0w00u5|x_M04w0vr0vs0w7|x_BBg00vP0tm0w-|x-M0xo0vQ0va0w6|xYg0480v_0we0wi|xYg04A0wh0vk0v-|xYg08S0wD0vW0wj|xWeXg00xj0x60vO|xVHxM00vU0wa|xTM0y80w60uP0xO|xTcLM00vR0wP0wd|xTg0LY0vp0wU0v9|xSM0xB0wG0vZ0w3|xRM04u0x40vX0vq|xRf4M00wT0xm0vi|xQM0wj0x10vQ0wG|xPHBM00w20xD0wN|xPg0Bq0z_0vz0z3|xPg01N0vn0yH0vV|xObKM00uL0w40wg0wg|xOg0460Ad0v-0wi|xNM0Cp0vB0wL0wS|xNbJM00wd0wd0wV|xNg0580x30vJ0v_|xMg03G0v-0we0wZ|xMg08J0wD0w00wC|xJM06a0wn0vE0x4|xI4fM00qh0x70sI|xHe8M00xi0wM0vo|xGM06h0y80vF0wk|xGw7M00qd0wA0wO|xGc_g00uf0x90uf|xGg0G60vM0wK0uX|xGg0dz0vN0vf0ws0ws|xFg0dy0wr0wr0wF|xEM0Eh0vt0wS0xu|xDacM00wV0v80xH|xBM0B10yg0vx0xy|xAGpM00wE0xT0vU|xAg0wY0yL0xL0rK|xzdtM00wM0vR0wP|xzg0c-0wF0uR0y5|xy02M00xx0zQ0wo|xxg0F40xR0vM0w_|xxg07i0wj0vD0xc|xxg08V0w00yp0wj|xwFzM00yn0uw0ww|xwg0d70ws0x00wz|xvM0wX0w90x10w6|xvwqg00uT0wW0uW|xuM0JL0zB0vK0A7|xug0Jk0vS0vC0x5|xug0G30w_0wq0yk|xtM0CE0wf0xo0xf|xtdBM00wm0xC0wy|xsJUM00vu0wa0xa|xsxHM00wo0zQ0xr|xscSM00wy0x20w4|xrKEg00xl0vL0zy|xqB8M00xr0xh0xh|xpM0Dw0wf0xe0wt|xpfYM00wU0w80xm|xpg0LW0wT0wX0w5|xoaUM00wg0xp0wu|xnwqg00zY0wH0xV|xmg0LR0wY0y00wU|xmg0Ln0xF0vp0wX|xmg02_0wi0Av0yH|xlDeg00vY0uN0x8|xlg0FW0wB0xz0wK|xlg0di0xN0zP0wF|xkM0wK0w90xB0wG|xkcPM00xZ0wP0xs|xkg06F0xc0vH0wh|xjM05c0wk0vE0w7|xhg0Jo0xn0wJ0xF|xgeZg00xj0w10vO|xf3PM00DZ0wl0xG|xaDvg00xM0w-0xE|xad8g00yw0wp0y3|x9JEM00xb0xb0wN|x8JDM00xg0yA0xa0xa|x8g06X0wC0z10x3|x6A3g00xK0xK0vP|x4M0DP0wS0xf0xu|x3M0Dz0wL0xw0xe|x2JfM00xD0yr0xb|x2BUM00wR0wR0xq|x2erM00xt0wm0xJ|x2g0f-0w10x60xN|x1FXg00xP0vb0xl|x0G9g00xk0zz0wQ|x0e-M00wT0w80xt|x0g0IM0yj0xv0x5|w_M0CO0yl0wL0xw|w_brM00xs0yT0wV|wZBXM00yI0xh0zo|wZzPM00wO0wR0xU|wZbOM00xZ0x20xp|wZeXM00xm0ya0xi|wWM0EC0xe0wt0y2|wWg0In0vS0yj0xn|wTM0Dx0xo0xf0ye|wT0YM00sI0xQ0wA|wRM0Bh0yY0wv0yl|wQg0FP0xR0ys0w_|wQg0xf0xW0xL0vz|wPM0wR0x10y10y1|wPdMM00xI0wM0yc|wNHOM00wa0yh0xg|wMEYg00B60x80xP|wMg0JW0x50x_0wY|wK1iM00x70sI0xQ|wK9pM00wu0yb0Ax|wKdSM00xJ0yM0xC|wKdWM00xi0x-0xI|wJztg00y90xd0xd|wJg0wV0xW0wx0xA|wICBg00yV0AM0x8|wIg0fz0xj0ym0x0|wHM0yr0y10w30y6|wHFvg00xE0zf0xk|wH19M00xG0Ac0xx|wHg0F10wB0yE0xz|wGyog00xY0uW0y9|wFG6M00yn0z20ww|wFAaM00xr0xX0xX|wFxfg00wW0zY0xY|wFg0wT0yL0xA0xL|wEAbM00xU0yW0xU0yI|wEydg00xV0Bi0xS|wDcTM00x20yc0xs|wDe3M00yf0yM0xJ|wDg0JX0y40xF0yD|wCg0LY0yx0y-0wX|wBM0xi0xB0xB0xO|wAM0Ep0ye0yq0xu|wAcIg00x90z50yK|wAg0JU0yG0zZ0x_|wAg0bR0wz0A00yt|wzM0yv0zC0xO0yg|wzM05J0yi0yi0yi|wzM07G0tQ0Ba0wn|wxyBg00xS0zd0xK|wxeRM00yx0xt0yf|ww9qM00Aa0ze0xH|wvcZM00xC0yC0xZ|wtKCM00vK0yu0zc|wsM0DV0xw0y20yq|wrewM00ya0z00x-|wpM0yD0y60yo0wv|wpHHM00y_0xD0yr|woM05I0y70y70y7|wog0Im0xv0yG0xn|wog0GK0wK0ys0yz|wnM0Ck0xy0xo0yO0yB|wng0fN0yy0z60xN|wmEjM00yS0wE0xT|wkM0yE0zH0yg0z7|wkg08i0zh0wD0z1|wiM0E00yB0ye0y2|whIPM00yh0yv0xg0yv|whg0Gn0xz0yX0yk|whg0bf0y50zw0zn|wgKaM00yA0zc0yd|wgIQM00yr0yr0yF|wgd_g00yy0x90z5|wdf5M00y00yR0ya|wdfsg00ym0zt0yw|wdg0H90zq0yk0yG|wcJBM00yF0xb0yu|waM0DD0yl0yO0yq|wad6M00z40yc0yT|wag0Kq0x_0zZ0y-|wag0F30zO0xR0yX|w7JwM00yv0yJ0yA|w6g0Ik0yz0yj0y4|w6g0200wZ0AB0wc|w4BxM00xX0yW0xq|w2JuM00y_0z80yF|w2bsg00y30za0yQ|w2g00a0zE0wx0xW|00dJM00x-0xI0z4|022Kg00zJ0qM0z-|04M0CN0yl0zb0yB|06aWg00t-|06aXg00yK0zv|08fbM00zj0yx0z0|09DXM00zo0yn0z2|0abIM00yC0zg0xp|0cM02L0Aw0BT0yZ|0cABg00zd0A50xM|0eBAM00xX0yI0AL|0eg0G00yE0zq0ys|0fM0AC0z70zU0xy|0fM03_0zx0Ab0yU|0fg0LG0yD0zj0y0|0hHsM00zi0yh0yJ|0idXM00yR0yf0z9|0ig06R0yp0xc0zk|0jGzM00yS0xT0zm|0kg0CB0wb0zs0zO|0mdyM00yM0z90yC|0ocDg00yw0y30za|0og0fH0A40ym0zP|0qM0Ao0yo0zF0yY|0qJqM00AU0yJ0zG|0rdzM00z00zp0z4|0scCg00Bp0z50yK|0tM0CA0B50As0yO|0uKxM00yu0zI0yd|0uzwg00y90zr0yV|0u9fM00AS0yb0Ax|0vFtg00Cb0xP0Cv|0vbIM00zp0Aa0yT|0vg09C0zn0yp0zR|0wHjM00zm0A10y_|0xg0L-0yR0y-0A3|0xg06P0zK0z10Ad|0yM05n0AJ0Af0zx|0yG-M00BH0z20zi|0yg0ap0yt0zD0zh|0zDsM00xq0Ak0yS|0zdwM00z90zN0zg|0zg0G70yX0zX0yz|0Azwg00BX0zd0A5|0Ag0BT0zu0zu0z3|0BeWg00zW0yy0Bp|0Bg0BS0z_0zT0zs0zs|0Cb2g00BV0yQ0zA|0Cg0b70A00yt0zD|0DM04X0zl0yZ0Ab|0DM0fw0wQ0Aj0Ah|0DJ6g00xl0AP0Aj|0DaIg00Dg0zv|0FM0Hk0AC0wI0Bn|0FM0x70zV0y60zS|0Fg0ar0zw0B90zn|0Ig00N0B80vT0yL|0JM0Ap0Bw0z70zU|0JJCM00z80AG0zL|0KM0yn0zS0yo0Br|0KKPM00A70zc0zL|0K4gg00Ao0yN0AN|0Kg0740A90D30zk|0LKLM00zG0AG0zI|0L5Ag00AE0AE0Ao|0LdyM00A30Ap0zp|0Lg0CR0z30zT0yE|0Mg0ee0z60AX0x0|0NySM00wA0wO0A2|0Ng08G0zh0AD0A9|0OM0xf0Ai0zC0zH|0Og0CS0zu0zO0C5|0PM0Av0zF0Bu0yY|0QM0wy0Al0zC0Ai|0RfCg00A40zt0Bt|0Rg0G70BW0CJ0zq|0Sxdg00wW0xV0Bi|0Sg0K20y40A80yD|0U2pg00AN0yN0CA|0Ug0AG0B20wb0zu|0Ug0b-0Aq0y50zw|0VHzM00zi0Be0AT|0VyZM00Ar0zQ0A60A6|0Vg0L-0zN0Ae0zj|0Vg0fX0zW0Bj0z6|0WAtg00zr0yV0AH|0Wy-M00A20A20BA|0XM0LY0wI0Bq0zI|0Xg0K20AW0zZ0Ae|0Xg07m0zR0AZ0zK|0YbpM00zg0Am0yb|0ZM04R0zx0An0yZ|0Z0GM00xQ0Bb0Ar|0Zg03l0zk0we0Av|0-g0LX0A80Au0A3|10M05o0AF0zl0An|10M0f30Ck0Ck|10M0f40B00zy|12M0x00zV0Al0zS|13KFg00zz0AV0zy|13C_M00AL0zo0BH|15M0w_0Bo0zV0Ai|16bpM00Ay0Aa0AS|18M04U0Af0Ab0At|184Wg00zM0AK0zJ|18duM00B40zN0Ay|18g0cm0Bc0AX0A0|19xqM00Ac0BA0A2|1aM0Cb0By0zb0Az|1bM04T0AO0An0Aw|1bg0LZ0AW0A_0Ae|1cg02a0Ad0wZ0AB|1dM04O0At0yU0B3|1d8nM00xH0Dd0ze|1dbxM00Ap0AI0Am|1fM0Do0As0C80AC|1hg0yf0Cp0Ci0AQ|1hg01Y0Av0yH0B8|1kM0G20Az0A-0zB|1kg09r0AY0Bh0zR|1l63g00Ce0zM0zM|1mM05-0AJ0Af0AO|1mK3M00Bd0zG0zL|1nAPg00CL0A50AM|1nbCM00C00BU0Ay|1qM06A0zl0CB0AF|1r4_g00Ce0Ao0B7|1sC7M00yW0BE0Ak|1sBcg00AH0xM0B6|1s3Gg00zJ0B70z-|1tM05h0AF0Bk0At|1tK8g00zz0AR0AR|1tg0yG0AA0C60B2|1uK9g00AP0AP0Bv0B1|1uawM00Am0Dd0ze|1vIJM00A10BO0AU|1wIWM00AT0z80Bd|1xLgg00Aj0B10B0|1yg0JY0A80Bl0Au|1zg0dK0zP0Bc0Aq|1Bg09U0B90Cf0AD|1Cg07S0Bh0Bx0A9|1EM0F_0Cr0B-0AC|1Fg0LV0Bl0BS0Au|1GM0fR0AV0BI0Ah|1HKQg00AR0Bv0AV|1Hg0zm0AQ0C90z_|1IM04x0Bk0Aw0BT|1IdNM00BM0Ap0BL|1JM0Bi0zb0Bz0Bz|1JBrg00AM0D40xE|1J3Sg00AK0AN0BZ|1Jg01k0AB0CC0zE|1Jg0aC0C70zD0AY|1KM08T0Bf0y80DX|1K0xM00Ac0Bs0Bg|1Lg0dS0BD0AX0Aq|1MJoM00AU0BG0AG|1MHJM00DS0A10BO|1NM08Y0D00Dp0Ba|1N0pM00Bb0DB0Da|1Og08I0Ch0AD0AZ|1Pyng00zY0xY0BX|1Pg0fH0BC0A40BD|1QM05a0AO0CB0B3|1Qg0J_0DT0AW0A_|1SM0Lq0Bn0BP0Bq|1SM0II0zB0BF0Bm|1SM00u0C40B_0Al|1ScQg00zt0za0BR|1TM0LV0Bm0A7|1TM0yM0zH0BJ0Bw|1T0zM00BY0Bb0BB|1Tf0g00BC0zW0BR|1UM0AA0C10zU0C2|1UKVg00AR0B10BK|1VM0yX0Br0zF0C3|1Xg07-0CF0Ct0AZ|1ZM0B-0As0CD|1ZM0BZ0B50B5|1ZzZM00Ar0A60BQ|1Z0xM00Hl0Bs0Do|1-g0g00Bt0Gk0Bj|1_g0eg0Bj0Gd0Bc|20BCM00BN0Ca0AL|22M0IT0Bn0Fa0BP|22JuM00BO0Bd0DA|22G9M00Ak0DS0zm|23M0g00BK0B00Dq|24M0yD0D90Br0E5|24Lag00Cy0Bv0BI|24dtM00D60B40C0|24evM00Cd0Ds0B4|25AAM00BQ0G40BE|26IGM00Be0BG0AT|27M0Jz0BF0DO0Bm|27A9M00Da0BA0BN|27cPg00Bt0Bp0BV|28g0LY0Cd0DT0A_|29M0420B30Cn0yU|29bOM00Cc0C-0AI|29cOg00BR0Dg0zv|2bg0F70D20zX0EB|2cyMg00Bi0CL0zr|2c0NM00CT0Hl0Bs|2c3Mg00Cs0B70CO|2dM0FX0D80A-0Ey|2dM00A0C40Bo0CI|2dd2M00BL0Cc0AI|2eM0zI0C30Bu0Cx|2gM0AP0Bu0Cx0Dx|2gM0zw0Bw0Cj0C1|2gM00K0Bo0CK0B_|2gg0De0Cm0zT0D2|2gg0yu0Ci0AQ0C9|2gg0aZ0Gi0B90Cf|2hM0Dc0CD0Az0Cr|2hg0z70C60B20D7|2iBKM00FZ0BE0Dt|2jF9g00CQ0zf0Co|2jcXM00E00C00BU|2jf6M00BS0DC0BM|2l69g00CR0AE0AK|2lg09C0C70AY0Ch|2mM0a60Cu0DI0DI|2mg09z0Cf0CG0Bh|2ng0xU0Cp0C60AA|2oM0zz0E50C30Cl|2oM0cG0Ag0Ag0Cu|2pM0zA0Eh0Cj0Du|2pg0AO0CS0CS0C5|2rM04r0CE0CE0BT|2sFdg00ER0Cb|2sg0wz0CC0AA0Ci|2tFdg00EP0Dw|2vM0DC0C80D80A-|2v3-g00Dc0Ed0BZ|2vg0890CM0DG0Bx|2wM0cF0DQ0Ck0Cg|2wITg00zf0Cw0Cw|2xIUg00Cv0Cv0Dw0Cz|2zM0AI0C10Du0C2|2zKOg00CH0BK0Dj|2zJ0g00Cw0CZ0CH|2z1rg00CO0z-0D1|2AM05g0AJ0Bk0CE|2Bg0100B80Ev0Cp|2CM0CQ0By0Db0C8|2DM05d0CB0Cn0Cn|2Dg09b0CG0Bx0CM|2Eg09o0Ch0DH0CF|2FK1g00Cz0CP0Cy|2HM0wc0B_0C_0DP|2Jg0HX0zX0Dm0Dl|2KM00F0CX0C40CN|2Ky_g00BX0Eq0AH|2Ng0900DH0CF0Ct|2OM00x0CK0DV0C_|2O2Hg00BZ0D_0CA|2PJYg00CZ0CH0Di|2QCJg00D40ER0Cb|2Q6Cg00DR0D50Ce|2Qg0Ah0D70Cm0Cm|2S1cM00CU0CU0BY|2T1dM00CT0CT|2ULCM00CY0CY0CY|2U1dM00Fj0FS|2VM00S0De0DV0CK|2VLBM00DL0Er0CV0CV0CV|2YJyg00Cz0Dz0CP|2YbfM00Ep0BU0Df|2ZM0w50CN0Ez0CI|2ZM09t0DD0Bf0Dp|2Z14g00Et0CA0Dk|2Zg0Dz0C50Ec0BW|2Zg06W0E20zK0F7|2-BGg00E60B60CQ|2-6Gg00Dr0Dc0CR|2-e9M00Ds0BL0DW|2_g0A30C90ET0CS|30M0DY0Cr0Dn0B-|30M0xV0DP0BJ0E5|30zaM00Bg0DY0BQ|31M0Da0CD0Eb0Dn|316Cg00D50Em0Cs|319nM00AS0Dh0Ax|33M01K0Dv0CX0E3|33aXM00F20C-0Dh|33chg00BV0zA0Fv|349oM00Df0Gx0Dd|35J_g00Dz0CP0DF|37LEg00Cy0DE0Dq|370Yg00Fq0D10Ew|37g0IG0CJ0Eu|37g0IF0CJ0F_|38M0DW0Db0Ea0D8|38w2M00BB0I10GG|39M08G0D00Bf0DD|3aM0fV0Dj0BI0Ek|3a7sg00DR0FP0D5|3aeOM00DC0BM0D6|3bCwM00Ca0F60F5|3cM0AQ0Cl0Cx0Dx|3cM01Z0Dy0Dy0De|3cJ1g00Cq0Cw0E9|3dM0AS0EF0C20Du|3dM01-0En0Dv0Dv|3dJGg00E80CZ0Di|3dJqM00D-0BG0DL|3dxnM00Bg0EH0DY|3deTM00Cd0DM0Ds|3eM08D0D00Dp0DX|3eL2g00DF0EG0Dj|3eKag00Di0EG0DE|3eg08A0DN0DN0Ct|3fg09k0CG0DN0CM|3gM0bM0Cg0Cg|3gM0bN0DK0DK|3hM0bO0E40DJ0DJ|3iKiM00DA0Er0CY|3ieXM00Ee0Eg0DC|3jg09h0DH0DG0DG|3kM0Lu0BP0F4|3kM0xl0CI0ES0D9|3lM0cI0Ek0Cu0E4|3l8xg00Fv0CR0Dr|3mH4M00BH0DU0Be|3og0L20Bl0Ee0BS|3pH4M00Fh0DS0D-|3qM00t0CX0CN0Ez|3qdlM00Eg0D60E0|3rM07Y0Ba0DD0E1|3ryWM00DB0Ei0Da|3r6HM00EI0x70EN|3sJaM00DU0DA0Fg|3t3kg00Ef0CO0Es|3td6M00DW0Ep0Cc|3uM07V0FV0DX0Eo|3ug07c0Ej0Ej0D3|3vM01u0EA0EA0De|3vM0cw0DQ0E70DK|3wM0za0D90BJ0Cj|3wAUg00Eq0D40Fl|3xM0cw0Gf0E40GM|3yJrg00Fx0E90Dz|3yJjg00EP0Dw0E8|3AM0DS0Eb0Dn0EU|3CM0D90Fs0Db0Ea|3Hg0DH0ET0D20EB|3K42g00EC0Cs0Ef|3Kg0L40DM0Eu0DT|3L3Tg00Ed0D_0EK|3OelM00DM0GX0DW|3PM0zv0EY0Cl0F3|3PyOM00EH0DY0Gu|3Pg07m0E20El0E2|3QM0eP0Fc0Dq0DQ|3Sg07m0EO0EO0Ej|3T5Pg00Dc0FK0EC|3XM02z0EV0Dy0EA|3XM0790E10FV0Ex|3XcFM00E00F20C-|3-zsg00CL0G20E6|3_KAM00DL0Ff0CY|3_2Cg00D_0EL0Et|402yg00EE0Es0D1|40g0KU0Dl0Ga0Ee|43g01f0Gh0ED0CC|440zg00Fu0Dk0GZ|46M06v0Gl0Eo0EM|4bM0Gd0EU0B-0G5|4bM0wb0DV0C_0F0|4bM01Q0En0E30E3|4dg0Fz0Ec0BW0F_|4e50g00Em0EW0Ed|4eg01i0Gh0Ka0Ev|4h2Gg00EL0Fo0Et|4iM0AF0EZ0EZ0Dx|4jK_g00DF0DE0EJ0EJ|4jxNM00DB0GG0Ei|4j6LM00DZ0EQ0Fn|4kL0g00EG0EG0EX|4k3mg00Ef0F10EL|4l3gg00EK0Es0EE|4nM05p0Ex0Fe0Fe|4q4RM00DZ0FT0Fk|4rg07h0El0El0F7|4sG5g00Cq0Fi0E9|4s6NM00G00FC0EI|4tCIg00CQ0FD0Co|4wM0wH0E_0DP0FY|4wg0CR0D70H90Ec|4yM0EX0Ea0E-0Ey|4yM03F0Fe0En0G7|4z4Vg00EC0FE0F1|4ALdg00FA0EJ0Fc|4CM0z70Ge0Eh0F3|4DM0Ak0F90EF0EF|4EM0EN0Fb0GP0EU|4EM0wz0F00ES0Fw|4EM0wp0Ez0F80E_|4F3sg00EW0FI0EK|4FchM00Ep0H00Df|4GM0zL0EY0Eh0F9|4HM0KW0Fd0DO0Ff|4JFCM00Dt0Fp0Fh|4JD_M00Dt0FX0Fm|4Kg0650EO0D30Gy|4LM0wf0Gj0F00HB|4MM0z_0Ge0F30EZ|4OM0JV0G50BF0Fd|4OM0Ev0Fs0E-0GJ|4OM0fW0EX0FW0Ek|4PM0Kr0Fa0HD0F4|4QM0490EM0EM0EV|4RKtM00F40Fg0Er|4RKrM00D-0FR0Ff|4RGvM00F50Gz0DU|4RGcg00G80EP0Ft|4T2wM00Fk0FS0CW|4T3aM00EN0FJ0Fj|4VCog00G20E60FD|4WEEM00GB0F60Fp|4W6rM00EI0FC0Gn|4X2Gg00Fy0EE0Fr|4ZEXM00GH0Fm0F5|4Z21g00Fr0Dk0Fu|4-2kg00Fo0G30Fq|50M0Dd0FO0Eb0Fb|50Gkg00Fi0H60FB|501qg00Fq0Ew0FG|51bAg00Dg0Fz0DR|53M0wW0E_0Gp0FY|54I8g00FB0E80FA|542Wg00FH0G30Fo|56bDg00Gs0Ie0Fv|57IZg00Fx0GW0EX|58Hgg00Ft0Fx0GU|596GM00EQ0FL0Fn|5cCYg00Fl0ER0FF0FF|5c4Lg00EW0FN0FM|5dCZg00FD0FD0G8|5d1qg00GF0Fu0GZ|5d38g00FI0Fy0Gb|5d3wg00FM0F10FH|5e3cM00F-0Fk0GA|5e6qg00FQ0Em0Hs|5e6GM00G00G90FC|5f3Ag00FE0Gg0FI|5g4Mg00Hs0FE0Gg|5hM0D50FU0Fs0GE|5k75g00Iw0Dr0FQ|5l74g00K60FP0FK|5mJNM00Gz0Hy0Fg|5o1ZM00Fj0GA0CW|5o51M00HM0EN0Gq|5pM0CX0G60H40FO|5sM07G0E10Eo0Gl|5sM0fX0H-0Fc0Gt|5sD4M00FZ0GB0F6|5uM0xY0ES0Fw0GC|5uABM00G10Ca0FX|5u3lM00Gq0GK0FJ|5ug0Iz0EB0Gc0Dm|5v6RM00EQ0Gr0FL|5wAyM00G40FZ0Hf|5xzwg00Eq0Hk0Fl|5x2ng00Fy0Gw0Fr|5zAoM00Gu0BN0G1|5AM0HZ0Ey0Gm0Fa|5AM0Cx0GR0GR0FU|5AM0350GS0EV0Gj|5ADcg00Hh0FF0Fi|5B6vM00Gr0FL0Gn|5Bg0KN0H20Gc0Eu|5C37g00Gv0FH0GD|5Cg0IJ0K10F_0Ga|5Dg0eK0Gk0BD0Gi|5EM0zh0Ia0EY0F9|5GM0d50Gt0E70GN|5G3Dg00FN0FM0Gv|5Ig0390Ev0GQ0ED|5Ig0dW0Gd0C70Hm|5JM0250G70I60F8|5Lg0fo0BC0Gs0Gd|5MM07x0FV0Ex0GM|5OM0HY0Go0G50HR|5O6eM00G90Fn0GL|5QM0HW0GY0JQ0Gm|5RM0xn0Fw0G_0GC|5U44M00FT0GO0F-|5U6JM00G00GL0G9|5Ug0fW0Fz0Ie0Gk|5VM0fA0FW0H70Gf|5VA2M00II0Ei0G4|5W3tg00Gg0IB0Gb|5X2qg00GD0G30GF|5Y9WM00H80Dh0HV|5Yg05v0GT0F70GQ|5ZHDM00Fh0GI0FR|5Z1LM00FJ0FS0Ig|5_DnM00Hi0FX0Fm|60M0y90Gp0FY0GV|632Og00IB0Gb0Gw|64M0Eb0FO0H40GJ|651Kg00Gw0FG0Id|67xBM00Do0I10EH|68EaM00Hw0Hw0Fp|6bHGM00Gz0He0Hy|6cM0EW0GE0Fb0GP|6e3DM00GO0Ho0F-|6g6nM00Gr0H30Gn|6jM07w0E70Gl0Ha|6jM0d20H50Gf0IR|6j3YM00Gq0Hv0GK|6lM0Fb0E-0GJ0Hr|6mg04i0Gy0Kj0Gh|6pM0B10G-0G60G6|6pM03H0Hc0G70Hx|6sg06-0I20I20Gy|6tJCg00FB0GW0GW|6uM0ye0G_0GC0HH|6uJDg00FA0HC0GU0GU|6ueRM00H20Eg0H1|6xM0H20Hq0Go0Jj|6y0og00FG0Id0Ew|6AM0An0Ht0Ht0GR|6AM0xS0Hz0Gp0GV|6Ac6M00H10F20H8|6AdtM00Lg0GX0H0|6AfHM00HQ0Ga0GX|6B6tM00Hd0HY0GL|6CM0DG0FU0Hg0GE|6DM0di0H70Ib0GN|6EGtg00Ft0Hb0HC|6HM0fA0HZ0Gt0H5|6HbRM00Kg0H00Gx|6Lg0Cn0LB0IS0ET|6NM07f0Ir0GM0Hj|6PGug00HK0H60HC|6QM04R0Hj0GS0ID|6Q6HM00HU0HY0H3|6THIM00KQ0GI0HL|6TCSM00II0G10Hi|6WM0DE0Jg0H40HA|6WCgg00HN0G80Hn|6XC_M00Hf0Hu0GB|6YM06d0Ha0Iv0Hc|6_A8g00Jy0G20HT|6_0CM00BY0Iu0BB|6_g0df0Gi0JM0H_|70CEg00Hh0JO0HK|7027M00Hv0GK0Hp0Hp|7126M00Ho0Ho0Ig|72M0G20Ih0GY|72M0G10Ju0GP|725jg00FK0J00FN|73M0zS0G-0Ia0G-|73D8M00Hi0Ic0Hw|7343M00HP0GO0Ho|74DsM00Hu0GH0GH|76M03c0IZ0GS0Iq|77KeM00GI0FR0I0|78M0x40HJ0HB0G_|79M0DF0Jg0KH0Hg|79M0wA0F80HE0Hz|79JAg00H60Hb0GW|7aM0L-0Fd0HX|7bM0wx0Ix0HJ0HB|7cM0xS0HW0HW0HI|7cKBg00Ik0Ik|7eM0ys0GV0HI0IT|7gM0yn0HF0Il0HH|7gM0wz0HE0JJ0Hz|7hGrg00Hn0Hb0J5|7iI5M00He0KG0IF|7i5cM00L50FT0HS|7kBvg00HO0Hh0Kc|7kBtg00HT0Kk0HN|7k4hM00HS0I80Hv|7lg0LW0H20KA0LO|7mM0J50Gm0IP0HX|7m53M00HM0Jb0HP|7qAOg00Hk0Lf0HO|7r78M00IU0Hd0IM|7r8wM00Gx0Jn0Jn|7sM0xJ0HF0HF0If|7tM0KS0HR0HD0It|7t6yM00IM0Hd0H3|7uM0fU0H70I3|7uM0fV0FW|7wg0bP0Hm0JC0I5|7yKHM00Hy0Is0Iy|7yxGM00Do0GG0IG|7yg0a60I40I40GT0GT|7zM0fU0I70HZ0Im|7zg0a70I20I2|7zg0b10H_0Jx0I9|7AM02i0Iq0Gj0In|7AM0fV0IC0Ko0I3|7A47M00Jm0HP0IL|7Ag0a70I50IX|7BM0zN0Ge0Ht0IA|7CM0dJ0Im0H50Jh|7ED8M00JH0JR0Hu|7E0Qg00Lk0GF0GZ|7EaHg00Gs0Fz0Iw|7FM0xN0Iz0HW0Il|7F0TM00Hp0GA0Ii0Ii|7GM0Gm0Hq0Ij0Ij|7G0SM00Ig0Ig0Ip|7HM0Gn0Ih0Ih0K90Jt|7HKzg00HG0HG0Io|7JM0y40Iz0If0HI|7JM0en0I30Kb0Ib|7KM01p0I60Ix0Ix|7KKzg00J90Ik0IC|7N0LM00IL0Ii0Iu|7PM02C0Hx0IE0I6|7QM07H0IO0Ha0IN|7QKvM00IF0J20I0|7RM0Lb0HX0IY|7R0xM00Ip0Hl0J7|7SM06i0IN0Hj0I-|7Sazg00Ie0Kd0FP|7TM00C0In0In0HE|7TLbM00I00J1|7UM0xJ0Kz0If0Il|7VM0zX0Ia0IT0IJ|7W3Ag00JI0Gv0GD|7XK-g00Io0I70IH|7YM04R0I-0Hc0IQ|7ZM02F0Js0Iq0KJ|7ZJiM00HL0Jf0Is|7ZxJM00J70I10IK|7-K-g00Je0IC0Ko|7-yyM00IK0Gu0Hf|7_M0AB0IA0I_0J8|7_yxM00IG0JH0II|7_1mM00I80Jp0Ip|816VM00IU0HU0HY|82M06r0Ir0Jo0Iv|83M07N0J30Ir0IV|84M0Jr0HR0JN0IW|85M04L0ID0Jc0IZ|85M0aT0GN0K30Jd|85g0CK0Ns0H90LY|86M0zT0HH0IA0JA|897bM00Jn0HU0IM|8aM07M0Kw0IO0J6|8bM0JX0IP0IY|8bg09K0Jx0I90Jr|8cM0KY0IW0It|8cM04q0IQ0Js0Hx|8cM05k0Iv0Jc0ID|8dM0Bx0IJ0Jk0Jg|8e5rg00JX0Hs0JI|8fKYM00J20Iy|8fKWM00Is0Jv0J1|8hM08u0JP0J40IO|8hM08F0Jd0JD0J3|8jGxg00HK0JO0Jl|8lM07y0IV0Jo0Jo|8mwjM00Iu0IG|8nM0AW0IJ0JA0Jk|8nKkg00Jl0Io0Je|8nwjM00LW0L6|8n4YM00JW0HS0Jm|8oM04Q0I-0IQ0KM|8oM09o0IR0JF0J4|8oKmg00J90K70IH|8pJNM00IF0KC0Jv|8qM0C20I_0HA0Hg|8qM0dG0JE0Ib0Ji|8rM0cB0Jh0JG0JG|8sM0Hx0GY0Jt0JK|8sM0Bd0J80J-0I_|8sJqg00J50Kf0J9|8s4jM00Jb0I80Jw|8t7GM00HV0HV0IU|8uM0710J60J60IN|8u2_M00KO0Jz0IL|8ug01u0LP0K50JV|8ug09r0IX0JY0JB|8vM03V0IZ0JT0IE|8xM0Hd0Ij0Ke0Jj|8xM0F70JS0Hr0K9|8xKCM00Jf0J2|8z4fM00KD0Jm0Jz|8zg0aA0Km0I50IX|8AyWg00LZ0K80Hk|8B3_M00Jw0KO0Jp|8CM0AJ0IT0J80J-|8Cg0990Jr0KR0KR|8Eg0bG0KF0H_0Km|8GM09a0JF0JP0J4|8GM0dL0Kb0Le0Jh|8HM09D0K30Jd0JD|8JM0bO0LM0Ji0Ji|8JziM00IK0L10Ic|8J3Qg00J00IB0Lk|8KM0wC0JL0HJ0JZ|8LM0I20Kn0Jj0JQ|8LM0wr0K20JZ0JJ|8Lg0dF0MD0KF0Hm|8NM0Jj0Ku0IP0KW|8NGvg00Hn0J50JU|8OM09e0Kw0JD0J3|8PM0Ig0Go0JK0Ku|8PD5M00Ic0Kq0KQ|8QM0EW0M40Ju0La|8RM03_0KM0Js0K4|8RGvg00JO0K00Kf|8Rg00E0Jq0K50L3|8S54M00L50Jb0KD|8S7ng00K60M00J0|8Sg09H0OU0Ky0Jr|8VM0wF0JL0JJ0Kz|8XM0B40JA0Kv0Jk|8Xg0x70Ka0Kh0Kh|8YGvg00Kc0JU0LG|8Yg0Iz0L90Gc0KA|8ZM0080KE0JL0Kr|8-M09Z0IR0JF0Kw|8_M03Y0JT0KT0KL|8_g0150Jq0L80JV|929Dg00Kd0FQ0JX|93Ksg00KK0Je0L0|93y-g00LU0Jy0M-|94M0GE0Ju0Ij0Ke|94g0wt0ED0Lh0J_|95M0fz0Kp0Im0JE|96Gqg00HN0LT0K0|96a2g00Iw0Ki0K6|97M0GJ0K90Jt0Kn|97IFg00JU0KP0Jl|97cSM00Ld0Md0H8|97g0xO0J_0J_0Lh|98a3g00MD0Kt0Kd|98g04E0KV0GQ|99Dvg00HO0Kx0LT|99g04E0Mk0Mk|99g0bj0JC0Ky0Jx|9aM0GL0Ke0Lt0JK|9dM0fU0IH0I70Kp|9eM0fS0M20Ko0Kb|9eD7M00Ks0JR0Mc|9fM0w50KE0K20KX|9fD4M00L10Lz0Kq|9fa5g00N70Lb0Ki|9gM0J60JQ0JN0Ll|9hM0BA0J-0KI0KI|9hM09A0K30JP0IV|9hDng00Lf0NH0Kk|9ig0bl0NP0Km0JY|9kM0x60JZ0Lv0Iz|9lg0I-0K10LJ0HQ|9mK6M00Lp0KY|9mK5M00KG0Jf|9n4BM00JW0L70Jw|9oM00E0KN0K20Kr|9pg0dz0JM0MY0JC|9qILM00HL0KZ0KC|9rM0Ca0KI0MJ0HA|9rM0C20Kv0Kv0KH|9rM02u0IE0KS0K-|9rKkg00KP0K70L0|9sM03p0K40KT0K_|9vM04x0Jc0JT0Lr|9wM00M0K-0LA0KE|9w48M00L70Jz0Jp|9xK6g00Kf0Lq0KK|9zG5M00JR0L40He|9zg08l0JB0JB0Lo|9AM02B0K_0KJ0Lc|9AM03T0Lr0K40KL|9A94M00Ln0Mj0LH|9Bg0510PR0Ls0Kj|9CM0L50JN0LD0NJ|9CM0wk0Kr0Lm0Lj|9EL5M00KB0Ly|9EIHM00L20LK0KG|9FM01L0KJ0Lc0KN|9FM02J0Lr0KL0KS|9FKGg00KK0K70Lu|9Fz-M00JH0Ma0Ks|9GIDM00L40LN0KZ|9Ig00z0LP0L80JV|9KG8M00KQ0Ol0L2|9L6vM00Lx0HM0JW|9M04M00NT0Pf0Ja|9M4gM00KD0LE0KO|9Ng00Y0LP0K50L3|9Og0Gq0LR0Mr0K1|9PM0Fl0M40JS0MG|9Paag00Pa0Kt0Li|9QM01I0KS0K-0LI|9QeNM00Mp0Lg0Kg|9SM0dM0LV0JE0LM|9SBBg00HT0Mq0Kx|9SeUM00LO0H10Ld|9Tg0xz0Ka0O80Kh|9Ua9g00QR0Lb0Nt|9VM0ww0KX0LC0Lv|9V2lg00JI0Id0Ml|9WM0Ja0Lt0Ku0LD|9XM0w90LF0KX0LC|9Y9-M00Mb0MB0KU|9Zg07P0Pp0KR0Ls|9-KuM00M50KB0Ly|9-Kfg00LG0KP0Lw|9_M0420KM0K_0KT|9_g06y0QG0Lo0KV|a1M0Hg0MG0Kn0Ll|a1KSg00Lw0L00L_|a2M0wU0LS0Lj0Kz|a2Kog00Lq0Mm0Lu|a26AM00LH0MN0L5|a3KGM00Lp0Mo0KY|a5C-M00Mt0Ks0Mc|a6M00z0KN0LI0LF|a6g0AH0M70Ns0H9|a7M0wn0Lm0Lj0LS|a8M0Jq0Ll0MI0KW|a843M00L70Mw0LW|a9M00g0LA0Lm0L-|a9IRg00K00M60Lq|aa7fM00KU0LX0Lx|acM00B0Lc0LA0L-|acg0Jm0Nz0KA0MA|aeJpM00KZ0Ms0M5|aeg0Fv0LY0MU0LR|afM0d80Le0LQ0JG|afIEM00Ny0L20Ms|afg0LZ0Lg0Mz0HQ|afg01n0Jq0L30L8|ahM0d70LV0OA0LM|ahg0FL0LL0Mr0L9|akM0wo0L-0LC0Lv|alGag00Kk0M90Kc|alyrg00LZ0K80MC|amM0eM0Mi0LQ0Le|am3sM00LE0NO0Ja|am7tM00NA0M30LH|amg0Eb0IS0Mx0LL|anxZg00Jy0N10LU|aqM0wb0LI0LF0LS|aqLkg00Lu0Mf0M2|aq6-g00JX0NI0NM|aqg0A30Ob0Ox0M7|arM0f-0L_0Kp0Mi|ar7EM00Mj0MO0LX|asM0EH0JS0N20La|asJSM00LK0Mg0Lp|asJcg00LG0M80M8|asg0Aa0M10Od0LB|atJdg00M60M60MZ0Mv|auGag00My0LT0NV|auAEM00L10Nb0Me|auasM00Nf0Ln0ML|avDKM00Lz0Kq0No|awd4M00MH0Kg0Nc|axAOM00Ma0Mh0Mh|ayLeg00Mm0L_0Nd|ayJVM00MK0M50Mo|ayAPM00Me0Oo0Me0Mt|azM0fA0M20M_0LV|az8XM00MB0KU0M3|aAg04C0Kl0Kl0Po|aB2gg00OD0Lk0Mn|aCKBg00Lw0Mv0Mf|aC2fg00Ml0Mu|aDKKM00Mg0Ly0ME|aDf9M00MP0Ld0MH|aFBQg00Nu0Lf0NQ|aFg0GA0LR0L90MX|aHJhM00LN0MK0LK|aIBIM00Mh0No0Lz|aJ2ag00Mn0N80R0|aNKng00M80MZ0Mm|aN49M00NG0LE0NO|aNg0E90MF0LY0MV|aPF_g00Nq0M90PH|aQg0L00MP0MA0LO|aQg0KX0LJ0Ng0Mz|aR9dM00Ln0ML0Mj|aUyKg00N10LU0MW|aUg0g00JM0Ki0MY|aWKJM00Na0Mo0MM|aWg0E60OJ0Mx0NF|aXM0Gk0La0MQ0Lt|aXe4M00Mp0MS0Md|a-M0JT0LD0Oh0NJ|a_M0Dh0KH0Nn0Nn|b1JKM00Ms0MR0Mg|b49fM00Mb0N00MB|b9L7M00ME0NK|ba6fM00Lx0Ne0NU|bb8wM00N90M30NZ|bcf-M00Mz0Mp0N6|bdM0Ga0N20OQ0MG|bdJOM00Nr0MK0Na|bdevM00MT0MT0MH|beewM00N50NN0MS0MS|beg0Fx0MV0LL0Np|beg0F60Mx0NF0MU|bgzpg00MC0Nj0M-|bgg0Hi0Np0Mr0Nz|bhg0dC0MD0NP0KF|bkJOg00M80O60Mv|bkzNg00K80MW0Nu|blM0fR0Nh0Mi0OV|bm9dM00Nf0ML0N4|bny3g00LZ0N30MC|brM0Fo0M40O00MQ|bry3g00P10N10Nj|br97M00NW0N00N9|bsf0M00Nx0N60MT|bsf5M00MP0Nk0N5|btdfg00NS0Qi0Kt|bu23g00Mu0S70PN|bv90M00N40NE0MO|bxKBM00MR0Nl0ME|bzAXM00Ma0Ps0OS|bzd2M00NR0Md0Of|bALPg00Mf0Nm0Nh|bA6pM00NA0Nv0MN|bAaDM00Nw0Mb0N0|bAg0Lt0MA0Ni0Ni|bBL-g00Nd0Oj0M_|bBg0Lu0Nk0Ng0Ng|bCyMg00N30O_0MW|bCfvM00Ni0Nx0N6|bEKJM00O20Na0NK|bFLEg00ND0O90Nd|bGM0Dg0MJ0Og0MJ|bGDBM00Mt0Oo0Mc|bGg0Gb0NF0MU0MX|bJFig00NC0My0PL|bKJuM00Ny0O20MR|bNg0Bh0LB0Oc0IS|bO9Hg00Li0RW0OT|bQAjg00M-0NY0Mq|bQ6tM00PZ0Ne0Oy|bQaKM00Oi0Nf0NW|bQfbM00Nk0NN0N5|bRISM00P00LN0Nr|bSg0Iw0MX0Q90LJ|bT7ZM00NZ0LX0Ne|bVM0AC0OE0QH0RL|bVF2g00NH0Pq0Nq|bWLcg00Ok0Nm0O9|bX8_M00N_0N90N-|bXg0Fd0MF0MV0Np|bY4wM00NU0Mw0Ov|b-Ewg00Kx0NQ0NC|b-6Ng00M00OT0NM|b_M0LK0MI0KW0O1|b_LrM00Nl0MM0NL0NL|c0LsM00NK0NK0O4|c05Jg00M00NI0OD|c0eWM00Nx0NX0MT|c33gM00Mw0LW0Ov|c3g0da0MY0NS0Ky|c7E0g00Mq0Q00NH|c8dxM00NX0Or0Nc|c8g0da0N70NP0Om|ca0YM00O70L60Q7|ca4-M00MN0Oy0NG|cbIQg00M90Pn0O3|cd9ZM00Nw0N_0N4|cddGM00NN0OY0NR|cgAgg00Ou0Nu0OG|cg8dM00MO0NA|ch8dM00NE0PZ|ch9fM00NW0QJ0NE|ciM0Fw0N20Og0OQ|ckM0LX0On0NJ0O5|ckK8M00Nr0OR0Nl|ckJ4g00NV0Pj0O6|cnLWM00OI0NL0O5|coL-M00O10O4|cpJBg00O30MZ0Op|cq16M00OC0PD0NT|crg0yx0Lh0Oe0Ob|csLNg00ND0Nm0Oa0Oa|ctLOg00O90O9|cug0z20O80M10OK|cyg0Ba0Od0Ns0Ow|czg0B30M70Ot0Oc|cBg0yc0Oq0PP0O8|cDbJM00Nc0OW0Oi|cFM0Fo0Nn0SQ0O0|cGM0JS0OO0MI0On|cGbpM00Of0QO0Nw|cHM0g00Nh0OV|cHKMg00Op0ND0OZ|cHGzM00QB0L40P0|cHg0cQ0Qz0NS0Os|cJM0KB0Oh0O1|cKD1M00Mh0OS0No|cLKag00O60O-0Ok|cOg0x30OM0Rm0Oe|cPdvM00PW0NR0P2|cPg0cF0PK0Om0OU|cQg0Ap0Ox0Sg0Od|cRzYg00P30NY0Pl|cR2-M00NG0NO0P8|cRg0BT0Oc0RK0OP|cRg0Ai0OL0M10Ot|cS5DM00Nv0NU|cTM0490OF0Qt0Pb|cTM0df0Pr0LQ0QL|cT5DM00OX0Pu|cU1BM00P40P90O7|cU4yg00Rd0NM0Ml|cVM0xM0P50NB0R9|cVM04t0OH0QK0Oz|cVATg00NY0Q0|cWM05F0P60S20OF|cWKPM00OR0O4|cWg0D00OP0Rz0MF|cWg0zR0Ob0RA0OL|cXg0zY0OK0Sd0Ox|cXg0wx0ON0Rv0Oq|cXg0wt0PE14a0OM|cYM0JJ0Oh|cYg0CH0Ow0RD0OJ|cZM0FI0O00MQ|cZKHM00O20Px0OI|c_CSM00Nb0Pe0Oo|d06Wg00Nt0NI0Rd|d0g0bl0Os0Pm0JY|d1M0fI0Oj0M_0OZ|d5cjM00P20QD0Of|d75QM00Qq0PY0OB|d7eJM00Ph0PA0NX|d8M0fG0Ok0OV0Pr|d8Kkg00Pw0Op0Q1|d9yjg00P10Nj0P3|daHcM00Ol0PT0Ny|day8g00N30O_|dad9M00Or0PI0OW|dbz0g00O_0Ou0PC|db20M00P80-V0OC|dcM0wq0P70Su0OE|dcM0780QP0OH0S9|ddM0wi0Pb0P5|dd2IM00Ov0Pg0P4|df1uM00OC0Pc0Pc|dfcSg00Qh0QZ0Lb|dgM01I0Oz0QY0P7|dh1tM00P90P9|di1tM00-u|djCRM00Pk0OS0PS|djyAM00L60Pt0Pi|dl2TM00SF0Pu0P8|dlg0L-0OY0Qa|dnz8M00Pf0PF0PF|doJng00Pn0O30Py|dqCOM00Ps0Pe0PX|dqA6g00R70Ou0Qr|dqg0aP13t0OU0Pp|dwIOg00PG0NV0Pj|dxg0420Mk0Pv0PE|dxg0ay0Pm0Qd0Lo|dAFSg00NC0Ql0QF|dBM0et0OZ0Rc0OA|dBCHM00Nb0Pz0Pk|dCyoM00Qf0Qw0Pf|dC3IM00OB0Q80Pg|dCg04g13z0PR0Po|dEJWg00Py0O-0PU|dFKAM00PB0PJ0OR|dGJDg00Pj0Qp0Pw|dHCHM00Sc0Qm0Ps|dHeLM00Qj0OY0PO|dIK8M00PT0SJ0Px|dIz4g00R50P30R4|dI0eM00O70Q7|dIg02e0Po0RY0ON|dJzOM00Pi0Pi0Q2|dKIDg00PH0Pn0QE|dKIyg00My0Qe0PG|dLdjM00Q40P20Qg|dNKJM00Px|dPg0do0PM0PM0Os|dQHwg00Nq0Rh0Qe|dQg0dp0PK0R_0PK|dR0Lg00N80PQ0PQ|dReEM00PA0Qs0Q3|dRg0yf0Oe0Q50RB|dS0Kg00PN0PN0QV0R0|dTg06y0QG0KV0Pv|dUE2M00Pe0PX0PV|dVI3M00P00Rp0PB|dWKdg00Pw0Qo0P_|dXElM00PS0Q60Q6|dXdRM00Q30P-0Or|dYDVM00Pk0Qm0PS|dY5yM00OX0QU0Q8|e17SM00N-0Qq0Nv|e2dOM00Qx0PW0Qb|e3Kpg00PU0QA0Q1|e3DFg00OG0St0NQ|e5KHg00O-0P_0Qu|e5zVM00Rb0PF0R2|e5egM00PO0Qn0PW|e6dxM00Qb0PI0Qg|e7g0yd0RN0RZ0PP|e8EHM00PV0PV0Qm|e8xrM00NT0PD0Qf|e84mM00PY0QI0Pu|e8g0Ji0Nz0Qk0Qc|e9g0JB0Qc0R30Ph|eadIM00P-0QW0Q4|eag0Jp1410Q90Qa|eag09F13i0Pp0Qv|ebIjg00PL0PH0RT|edxXM00Q70Q_0Pt|edd7M00Q40PI0QD|edeJg00Qi0Pa0Rg|edeTg00Qy0N70Qh|effaM00R60PA0QC|egg0Jb13Z0Rz0Q9|ehFZg00Pq|eiEmM00Pz0PX0Q6|eletM00Qs0Qx0Q3|emK3g00Qp0PU0QA|enJDg00QE0Py0Qo|en7-M00Ru0PZ0OX|eoAAg00Pl0Rr|eoeIM00QC0PO0Qn|epM03U0Oz0Re0R-|epKRg00Q-0Q1|epg09e13q0Qd0QX|eqyIM00Pt0Rf0Rb|eqeqM00Qn0Rj0P-|erfvg00Qz0RC0Qi|esg0fC0Qy0RO0Om|etKlg00Qo0P_0Q-|etG9M00Sb0Ol0SD|eteOM00Qj0Ra0Qs|eucZM00Qg0QS0OW|evJxg00PG0Qp0QT|evGGg00Pq0Uk0Rh|evg08a0QX0Ls0PR|ewM0As0R90NB0RL|ex4JM00QN0Q8|ex9rM00QQ0N_0Ru|eyM04C0RR0OF0Re|eyM0av0OA0Sk0QP|ey4JM00RV|ey4KM00QU0RP0QI|ezb2M00R10Oi0QQ|eAM09v0QL0P60RE|eBb1M01260QO0QJ|eBb_g00Rq0Li|eBcZM00QW0R10QD|eCJxg00RS0QE0Rx|eC5tM00RP0PY0QN|eE0Cg00Rw0PQ0Rt|eEdDM00Ri0Qb0QS|eEg08m0Qv0Si0QG|eGM01Y0Rn0Pb|eGdxg00Rg0Pa0RJ|eHKyg00QA0Rx0Qu|eKxXM00R80Qf0Rf|eKw8g00Mu0PQ0Rs|eKcPM012M0QS0QO|eLAhM00Q20RM0S3|eMg0Lr0Qa0R60R6|eNzkg00R50PC0Rl|eNyJg00PC0R4|eNg0Lt0Ra0Qj0R30R3|eOzWg00Rl0Pl0Rr|eOxVM00RI0RI0Q_|ePM0zC0OE0QH|ePf2M00R60Ro0QC|eQzdM00Qw0Ry0Q2|eRM0f80RH0Pr|eR5Ug00OT0S10OD|eSM0490QK0RR0Qt|eSyJM00Q_0Qw0Ry|eSefg00RC0Qh0QZ|eTHYg00QF0PL0Rk0Rk|eTenM00SG0QW|eTeoM00Ro0Qx|eUHZg00Rh0Rh0RU|eWzog00R40R7|eXg0xj0Rv0Oq0RN|f0M02h0R-0SR0QY|f0eWM013Y0Ra0Rj|f1INM00SD0PT0Ti|f2cDg00RJ0QR0RX|f3A5g00R70Qr|f3w3g00Rt0R0|f30qg00QV0Rw0Rs|f38gM00QJ10G0Qq|f3g0wT0OM1480Rm|f40zg00QV0Rt|f5KBg00QT0Q-|f5zdM00Rf0RF0Rb|f6g0Fo0OJ0RG0Qk|f8g0zd0RB0SI0OK|fag0yN0PP0RZ0RA|fbeOg00Qy0RO0Rg|fbg0CA0RK0OP143|fcM09n0S00QP0S0|fezgM00Ry0RQ0RM|feg0Fo1350SH0Rz|ffM0fh0Rc0S4|fgxvM00Se0R80R8|fhdug00So0QZ0Rq|fkg0Ch0Ow0Sf0RD|fnM0CG0QH0NB0SN|fnAaM00RF0R20S3|fng0xC0Rm0Sj0Q5|fpe-g00Qz0RC|fr5gM00QU0RV0QN|fszeM00Z10RF0Yk|fwM04d0QK0Re0Sq|fxJeg00RT0QT0Sv|fyJ7g00Qe0RU0RS|fzJ6g00Rk0TL0RT|fz4ZM00RP0SF0QM|fB9xg00Sn0Nt0Sm|fBcug00Rq0SB|fCg01T13z0PE0SC|fDg0yr0Q51470RB|fEM03q0Qt0S80Rn|fFg0eB13N13Q0PM|fGM09g0RE0RE0Sa|fG6bg00Sr0Rd0S6|fHM05X0S90OH0Sq|fHAsM00RM0R20SE|fIM0eP0RH0SW0Sh|fJDtM00Sc0Wx0VE|fK69g00S10_I|fL1Vg00Sz0N80Sy|fMM03y0Sp0R-0SM|fMM06i0P60S2|fMM09d0S00T5|fNGaM00Ss0QB0Up|fOCBM00Pz0X80S5|fOg0Au0OL145|fPxuM00ZY0RI0Sl|fPg0Cb1430RK|fPg0Ca0Ot144|fSM0et0S40SW0Sk|fSg08j1341390QX|fUg0xz0RN147|fVM0cg0Sh0QL|fVxBM00Se0Sx0Sw|fV83g00RW10O0Sr|fW9Sg00SA11m0RW|fWdMg00RJ|fYM03_0SU0S8|fYM0400S20RR|fY6Tg00Sm0_-0S1|fZF-M00Vj0UN0Sb|fZDzg00Q0|f-M0wO0P5|f-K7g00RS0Tq0SL|f-yeM00Sl0Sx0Z4|f-xFM00Sl0ZD0Sw|f-1tg00S70-B|f-25g00_60S7|f-a0g011G0Sn|f-cig00RX|f-g01J13W0RY14a|f_HaM00QB0Up0Rp|f_AsM00Yh0S3|f_4WM00RV10m0Pg|f_dLM00Ri13h|f_g0EY13d1420RG|f_g0zj1470RA146|g0LDLL0PB0SK0SK|g0LCLK0Ti0SJ0SJ|g0Lxg00Sv0Tb|g0Lt3e0S80SS0SR|g0LsDP0RL0Uz0SQ|g0Lq6w0T20SX|g0Locn0S-0S-|g0L9EQ0Og0Tp0SN|g0KW2Q0Rn0ST0SM|g0KV3u0SZ0SU0SM|g0KU2Q0SZ0SV0SR|g0KT3E0Sp0T70SS|g0KO2o0Tf0SY0ST|g0KJe50S40Sh0S_|g0KI620T30T00SO|g0KH1e0TF0SV|g0KD330Td0SS0ST|g0KDcB0SP0Tc0SP|g0KAdZ0Tc0T10SW|g0Kx5L0T60T40SX|g0Kud-0Tb0T90S_|g0Kr720T50T30SO|g0Kn6g0T40T20SX|g0Km5X0Ts0T30T0|g0Km780Sa0TC0T2|g0Kl5s0Ts0T80T0|g0Ki3U0T80Ta0SU|g0Kf4R0TE0T70T6|g0KfdT0Tz0Tg0T1|g0Ke3S0Th0Te0T7|g0KeeI0Tg0SL0T1|g0K6cT0Tv0S_0S-|g0K53c0To0Te0SZ|g0K53h0Tm0Ta0Td|g0K2220TF0To0SV|g0J_eB0Tq0T90Tb|g0J-3V0Tm0Tk0Ta|g0JUK50Rp0Tr0SK|g0JUGT0Tl0Tl|g0JT440Tt0Tt0Th|g0JSGS0Tn0Tj0Tj|g0JR3P0TB0Te0Th|g0JJGN0Tu0Tp0Tl|g0JJ2_0Tx0Tf0Td|g0JCGq0UB0Tn0SQ|g0JBev0Sv0T-0Tg|g0JzJj0Um0Tw0Ti|g0Jz5v0TC0T40T6|g0Jv4h0TD0Tk0Tk|g0JqHJ0Vt0Tw0Tn|g0Jnd40TN0Tz0Tc|g0JmI70Ue0Tu0Tr|g0Jj310TA0Ty0To|g0Jf2Z0U10TM0Tx|g0Jfdd0TK0Tv0T9|g0Jd3i0U10TB0Tx|g0Jd3r0TJ0TA0Tm|g0Jd5q0TE0T50Ts|g0Jc4h0TT0TJ0Tt|g0Jb5o0TT0TC0T8|g0J40V0TH0Tf0SY|g0J3wo0TR|g0J20U0TQ0TM0TF|g0J1bE0U90TS0TN|g0I_3X0TO0TD0TB|g0I_dk0U00TN0Tz|g0IYf_0Ui0RU0TU|g0IV1U0U70Ty0TH|g0ISc10TK0Tv0TI|g0IR400TY0TW0TJ|g0IN0B0Un0TR|g0IN0C0Uf0TH|g0IIwn0Ub0TP0TG|g0IIaI0Ug0TX0TI|g0IF550TZ0TE0TD|g0IBfg0TV0TL0TV|g0IAff0UF0T-0TU0TU|g0Ix4v0U30TY0TO|g0Ixbk0U80U80TS|g0Iv410U40TW0TO|g0Iu520U30T_0TT|g0IudI0U00TV0Tq|g0Ir570Vf0UE0TZ|g0IrdD0U50T-0TK|g0Ip340U20Ty0TA|g0In340U60U40U1|g0Ik4U0Ux0TZ0TW|g0I93G0Ul0U20TY|g0HXdh0Ud0U90U0|g0HW2R0Ua0U70U2|g0HV2s0Uf0U60TM|g0HVcA0TX0TX|g0HVcB0U50TI|g0HM2U0Uo0Ul0U6|g0HLxW0Uh0Uc0TR|g0HJy90UG0Ub|g0HGdd0Uy0Ug0U5|g0HvIo0V20US0Tw|g0Hu1E0Uv0TQ0U7|g0Hnby0UA0Ud0TS|g0Hmxu0Uj0Uj0Ub|g0Hmf-0TL0UF0Uk|g0Hlxt0V70UP0Uh0Uh|g0Hlg00QF0Ut0Ui|g0Hh3M0Ux0Ua0U4|g0HgKs0UC0Ur0Tr|g0H40T0UO0UI0TP|g0H12G0UH0Uv0Ua|g0H0LP0Sb0SD0Uq|g0GZLI0UN0Us0Up|g0GYLg0UC0Us0Um|g0GWLm0UN0Uq0Ur|g0GVf-0UX0Uk|g0GUf-0UT|g0GO1U0Uo0Uf|g0GN1U0UI0UD|g0GJ400UE0U30Ul|g0GHdd0UK0UA0Ud|g0GGzt0UJ0UG0SN|g0GGbS0UR0Uy0Ug|g0GDEm0VQ0UJ0Tp|g0GCKc0UV0Ur0Um|g0GB1W0U_0UM0Uw|g0GB3_0UL0T_0Ux|g0GBem0UU0Ui0TV|g0Gzz30Vl0Uz0Uc|g0Gz390UM0UL0Uo|g0Gw1c0UQ0Uw0Un|g0GsE30W10Uz0UB|g0Grdd0UU0UR0Uy|g0Gk3U0V40UE0UH|g0Gf260V00UH0UD|g0GcLE0Ss0Us0Uq|g0Gc0W0UQ0UP0Un|g0Ga0G0V80UO0Uj|g0Ga110U_0UO0UI|g0GacD0Vk0UK0UA|g0G7Jv0Vb0UV0Ue|g0G4fX0UX0Uu|g0G3dM0UZ0UF0UK|g0G0JD0U-0US0UC|g0F-5x0V50UY0UY|g0FZeb0UZ0UT0Ut|g0FW5I0Vd0UW0UW|g0FVdP0VC0UX0UU|g0FUJF0Vb0V60UV|g0FS1d0V30UD0UQ|g0FN290V90V10UM|g0FL2c0Vg0V40V0|g0FJIm0Vt0Ve0Ue|g0FJ1c0Va0V90U_|g0FJ3S0V50V10UL|g0FI3T0Vh0UW0V4|g0FFKw0Vo0Vj0U-|g0FFw20Vz0V80Uj|g0FC0v0Va0V70UP|g0Fw1R0Vc0V30V0|g0Fu0N0Vr0V30V8|g0FpJ40Vi0U-0US|g0Fj1S0VI0Vg0V9|g0Fg6e0Vv0Vf0UY|g0FeIy0Vx0Vi0V2|g0Fe6i0VZ0T_0Vd|g0Fc1_0Vu0Vc0V1|g0Fa3U0VB0Vm0V5|g0F8ID0Vn0Vb0Ve|g0F5LC0Ss0Vq0V6|g0F5b-0VC0Vp0UR|g0F3yQ0Wk0VG0UG|g0F23W0VK0Vv0Vh|g0F1IE0VF0Vo0Vi|g0EZKd0Vw0Vn0V6|g0EVbM0W00VR0Vk|g0EULH0Vw0Vs0Vj|g0ES0n0Vz0Vy0Va|g0ERLL0VS0VE0Vq|g0EPH30Vx0V20Tu|g0EP210VI0VB0Vg|g0EP490VH0Vm0Vd|g0ENKc0VD0Vq0Vo|g0ENH30VM0Ve0Vt|g0EL0R0Wi0Wf0Vr|g0EJ0a0W80Vr0V7|g0EJ7c0Wh0VP0VO|g0EH2m0W50Vh0Vu|g0EHdC0VX0Vk0UZ|g0EGK90VS0VJ0Vw|g0EBL-0S50VV0Vs|g0EzIs0VT0VL0Vn|g0Ezz60WB0We0Vl|g0Ew4o0WJ0VZ0Vv|g0Ev1E0Wg0Vu0Vc|g0EuJ_0W30VT0VD|g0En3h0WD0W50Vm|g0EmIc0VT0VN0VF|g0EmGS0VU0VN0Vx|g0ElI90Wb0VM0VL|g0El7x0Wq0VP0VA|g0Ej720Wt0VO0VA|g0EiFb0WI0VU0UB|g0EibD0W40VY0Vp|g0EgKJ0W20VD0Vs|g0EdJa0VL0VF0VJ|g0EdGG0Wp0VQ0VM|g0EcLA0VW0VW0VE|g0EbLz0Ww0W60VV0VV|g0E6dD0Wa0VY0VC|g0E5dk0W90VX0VR|g0E3570VH0Vf|g0E2570WM0Wh|g0E28f0WE0Wq0Wr|g0E2b30Wz0W40Vp|g0D-CY0WI0W70UJ|g0DVKq0W60W30VS|g0DVKm0WK0VJ0W2|g0DVbx0W90W00VR|g0DU2p0Wc0VK0VB|g0DPKz0Wu0W20VW|g0DHCJ0Ws0We0W1|g0DHw60Wl0Wj0Vz|g0DGbD0Wv0VY0W4|g0DFd-0WG0VX|g0DEH-0WA0Wd0VN|g0DE2c0WF0Wm0W5|g0DDHY0WC0Wo0Wb|g0DCBl0WB0W70VG|g0Dz190Wi0Wg0Vy|g0Dz1c0Wm0Wf0VI|g0Dz5Y0Wt0V-0VA|g0Dx0-0Wj0Wf0Vy|g0Dw0V0Xb0Wi0W8|g0DvwQ0XW0Vl|g0DvwP0Xf0W8|g0Dv1k0WV0Wc0Wg|g0Dt8C0X50X00Wr|g0DsHg0WQ0Wp0Wd|g0DrGU0WW0Wo0VU|g0Dr7y0X30V_0VO|g0Dr8r0Wy0Wn0V_|g0DqCE0WI0WB0W7|g0Dq660WY0VP0Wh|g0DpKN0WT0Ww0W6|g0Dobl0Xs0Wz0W9|g0DnLi0Wu0Wx0VW|g0DmLj0S50WX0Ww|g0Dm8m0W_0WE0Wr|g0DlaL0X70Wv0W0|g0DkIb0WL0WC0Wb|g0DjBb0Ws0VG0We|g0DgHZ0WO0WA0Wd|g0Dg300WJ0WF0VK|g0Df850Xd0V_0Wy|g0De2S0Xg0WD0Wc|g0Dddx0WH0WH0Wa|g0Dcdw0XC0Xs0WG0WG|g0DaE80Ws0W10VQ|g0D73w0WS0WD0VH|g0D2JX0WP0WN0W3|g0D1Im0X20WZ0WA|g0D04s0Xt0WR0V-|g0C_JZ0X60WT0WK|g0C-HL0WZ0WQ0WC|g0CZJq0X20X10WK|g0CYHz0WW0WO0Wo|g0CY4o0Xq0WU0WM|g0CU3B0Xo0WU0WJ|g0COKv0W-0Wu0WN|g0CO3K0Xu0WR0WS|g0CN1E0Xp0Xi0Wm|g0CHG_0Xn0Wp0WQ|g0CCK_0X80W-0Wx|g0Cz6o0Xr0X30Wt|g0CwHW0Xh0WL0WO|g0CvKz0X60WX0WT|g0Cv8P0Xe0X00Wy|g0Cv8R0X40W_0Wn|g0CsJo0Xa0Xc0WP|g0CsIS0Xc0WP0WL|g0Cs6B0Xl0Wq0WY|g0Cs9f0XM0X00X5|g0Cs9h0X90X40Wn|g0CqKs0Xa0WN0W-|g0Co9S0XA0X90Wz|g0CmLI0Sc0XH0WX|g0Cm9M0XL0X70X5|g0ClKn0XO0X10X6|g0Ck0W0Xw0Xp0Wj|g0CjIQ0Xj0X10X2|g0Cj7x0Xl0Xe0WE|g0Cj7L0XK0Xd0W_|g0Ci030XW0Xw0Wl|g0Cg2y0Xk0Xi0WF|g0CdHR0Xn0Xm0WZ|g0Cc2b0XF0Xg0WV|g0CbIL0XP0Xm0Xc|g0Cb2G0XF0Xo0Xg|g0Cb6U0Xz0Xd0X3|g0C7I80XU0Xh0Xj|g0C7Hw0XU0WW0Xh|g0C72_0Xx0WS0Xk|g0C41l0XX0WV0Xb|g0C34b0Xv0Xu0WR|g0B-5p0Y40Xt0WY|g0B-bA0XA0WH0Wv|g0BZ5e0Xv0Xr0WM|g0BX3K0Xy0Xq0WU|g0BT530Y30Xq0Xt|g0BS0D0XR0Xf0Xb|g0BP3g0Y00Xy0Xo|g0BP3D0Y20Xx0Xu|g0BJ6W0Y10XN0Xl|g0BIbm0XG0X70Xs|g0BHAP0XI0XE0XD|g0BHdr0XT0XQ0WH|g0BBAS0Y50XJ0XB|g0BBAm0Ye0Yc0XB|g0BB240XV0Xk0Xi|g0BAbm0Yd0XY0XA|g0BzLj0XO0X8|g0BzC70XJ0XJ0XB|g0ByC60Y90XD0XI0XI|g0By8q0XS0XN0Xe|g0Bw9d0Y60XM0X9|g0Bt8V0XS0XL0X4|g0Bs7p0Yu0XK0Xz|g0BpKw0XP0XH0Xa|g0BpJf0XU0XO0Xj|g0BmdK0X_0XC|g0Bk0o0XX0XW0Xw|g0Bj8E0X-0XM0XK|g0BjcR0X_0XY0XC|g0BiIc0XP0Xn0Xm|g0Bg1M0Y00XX0XF|g0Bfw30Wk0XR0Xf|g0Bf1I0XR0XV0Xp|g0BcbI0XZ0XT0XG|g0B7bI0Yq0Yb0XY|g0B68B0Yt0Y60XS|g0B2dr0Y70XQ0XT|g0AT2t0Y20XV0Xx|g0AT6J0Yy0Y40Xz|g0AR4h0Y00Y30Xy|g0AP4F0Y40Y20Xv|g0AO5g0Y10Y30Xr|g0AGB60Yf0Y90XD|g0AG9j0Yl0XL0X-|g0ADdv0Yr0Ya0X_|g0AAeq0Yg0Ya|g0AyBk0YD0Y50XJ|g0Ase80Ym0Y80Y7|g0Arbp0YB0Yo0XZ|g0Agzk0YN0Ye0XE|g0Aea50YB0Yl0XG|g0AdzN0Yf0Yc0XE|g0A5zV0Yp0Ye0Y5|g0A5f50Ys0Y8|g0A4Lo0SE0Yk0Yj|g0A4Ji0YR0Yv0Yn|g0A3Ln0Z80Yn0Yh|g0A0Lu0RQ0Z10Yh|g0A09r0YF0Yd0Y6|g0A0ec0Yz0Ys0Ya|g0z-KH0Yw0Yj0Yi|g0zZby0YG0Yq0Yb|g0zXzZ0YT0YD0Yf|g0zWcE0Yo0XZ|g0zWcF0YC0Y7|g0zWeQ0YL0Yg0Ym|g0zV7Z0YF0Yu0X-|g0zU7T0Yy0Yt0XN|g0zSJi0Y-0Yw0Yi|g0zQKA0Zh0Yv0Yn|g0zQ490YX0YU0YP|g0zP7B0Zg0Yu0Y1|g0zKe00YK0YJ0Ym|g0zH2B0YW0YE0YE|g0zHaN0YI0Yd0Yb|g0zFcG0Y_0YJ0Yr|g0zDBe0Z70Yp0Y9|g0zv1r0YA0YH0YA|g0zv900Zg0Yt0Yl|g0zvbf0Y_0YI0Yo|g0zu1o0Zr0Z60YE|g0ztaO0YQ0YG0YB|g0zsd10YY0YC0Yz|g0zoe70YY0YO0Yz|g0zoeY0YM0Ys|g0zkeP0Z90YO0YL|g0zjyG0ZB0YT0Yc|g0zheA0Z90YM0YK|g0zc4N0YU0YS0Yx|g0zaaC0Zf0Y_0YI|g0z9Gg0-40YV0Yi|g0z84Q0Zj0Z20YP|g0z6zK0Z30YN0Yp|g0z23-0YZ0YP0Yx|g0z0Gn0ZJ0Z50YR|g0y_3e0Zd0YX0YA|g0y-3w0YZ0YW0Yx|g0yYdh0Zu0YK0YJ|g0yV3F0Za0YU0YX|g0yTIM0Zh0Z50Yv|g0yTbW0Zp0YC0YQ0YG|g0yTdN0ZM0ZC0ZC|g0ySLM0RQ0Z40Yk|g0yQ5B0Zm0Zb0YS|g0yPzM0ZU0Ze0YT|g0yOLF0Sw0Z80Z1|g0yOHX0ZA0YV0Y-|g0yM1E0Zs0Zr0YH|g0yLAY0ZK0Zc0YD|g0yKLg0Zi0Z40Yj|g0yJeP0YO0YM|g0yH3K0Zj0Zl0YZ|g0yD5C0Zo0Zk0Z2|g0yBAG0Zy0Ze0Z7|g0yB300Zq0Zn0YW|g0yyAm0ZI0Z30Zc|g0yv9K0Zp0Zg0YQ|g0yu9j0Yy0Zf0YF|g0ytK90Zi0Y-0Yw|g0ysKa0ZD0Zh0Z8|g0yo4y0Zt0Za0YS|g0yn5j0Zv0Zt0Zb|g0ym3L0ZG0ZF0Za|g0yh6n0ZW0Zo0Z2|g0yc2_0ZG0Zz0Zd|g0yc5Y0Zw0Zm0Zb|g0ybc30Zf0Zu0Y_|g0y82n0Zz0Zs0Zd|g0y71g0ZE0YH0Z6|g0y72j0ZE0Zq0Z6|g0y54S0Zx0Zk0Zj|g0y5ch0ZM0YY0Zp|g0y35w0ZL0Zw0Zk|g0y25P0ZW0Zv0Zo|g0y14S0ZL0ZF0Zt|g0xZAG0ZI0ZK0Zc|g0xX2F0ZS0Zn0Zq|g0xVIk0ZT0ZO0Z5|g0xVy10-50ZU0YN|g0xVe40ZN0Z00Z0|g0xRK40Sx0ZH0Zi|g0xR1W0ZS0Zr0Zs|g0xP4u0ZX0Zx0Zl|g0xN3q0ZP0Zl0Zn|g0xMK30ZY0ZT0ZD|g0xJA30Z-0Zy0Ze|g0xIGz0Z_0ZQ0YV|g0xIBv0-K0Zy0Z7|g0xG5e0ZV0Zv0Zx|g0xDdO0Zu0ZN0Z0|g0xDdZ0ZM0ZC|g0xAI20ZZ0ZR0ZA|g0xx3p0ZX0ZS0ZG|g0xvH90-30ZR0ZJ|g0xuHj0-10ZQ0ZO|g0xr2P0ZE0ZP0Zz|g0xpJA0-00ZZ0ZH0ZA|g0xoys0Z-0ZB0Z3|g0xn5f0ZX0ZW0ZL|g0xi5O0ZV0Zm0Zw|g0xg4t0ZV0ZP0ZF|g0xeLX0Se0-80ZH|g0xeIp0-00ZT0ZO|g0w_yD0-L0ZU0ZI|g0w-Gh0-40-20ZJ|g0wYI80ZT0-10ZZ|g0wYH-0-30-00ZR|g0wWGh0-d0-90Z_|g0wQHK0-90ZQ0-1|g0wODV0-a0Z_0YR|g0wJ0f0-E0-60ZB|g0wB0A0-D0-70-5|g0wA0J0-e0-b0-6|g0wxLZ0-h0ZY|g0wsHx0-d0-20-3|g0wlDN0-q0-p0-4|g0wa180-m0-l0-7|g0wadH0-H0-t0-g|g0w9Gb0-p0-90-2|g0w92l0-k0-f0-7|g0w92Y0_90-s0-e|g0w6eR0-t0-j0-c|g001LL0-v0-i0-8|g00gLT0-u0-h|g00kfY0-g|g00m290-s0-l0-e|g00r210-m0-k0-b|g00u1-0-o0-l0-b|g00xf70-r0-r|g00y1Y0-x0-w0-m|g00DFT0-y0-a0-d|g00JE00-C0-z0-a|g00LeP0-B0-n0-n|g00M2L0-G0-f0-k|g00Ne00-A0-c0-g|g00OLE0Pd0-v0-i|g00PKW0-Q0-u0-h|g00R1q0-S0-D0-o|g00U1_0-O0-F0-o|g00YFU0-N0-z0-p|g00_EI0-C0-y0-q|g010d_0_10-B0-t|g015eR0Sy0-A0-r|g018Eb0-N0-z0-q|g0180u0-J0-w0-6|g01cxL0-J0-I0-5|g01c2v0-P0-G0-x|g01d2W0-Y0-F0-s|g01far0_10-X0-c|g01ix_0_70-M0-E|g01k0p0-T0-D0-E|g01nyW0-_0-L0ZK|g01nyU0-M0-K0Z-|g01ryQ0-W0-I0-L|g01wFV0-U0-C0-y|g01B1O0-S0-P0-x|g01D1U0-R0-O0-F|g01HJW0_x0-V0-v|g01J210_40-Y0-P|g01L180-T0-O0-w|g01O120--0-S0-J|g01-G00_00-Z0-N|g01_KM0P40_x0-Q|g020yJ0_A0_30-M|g0207_0_O0_90-H|g0213R0_d0-R0-G|g025F-0_80_20-U|g025130_40_50-T|g02bBn0_F0_z0-K|g02cHD0_m0_l0-U|g02dcP0_60-H0-A|g02lFf0_j0_j0-Z|g02myB0_v0_g0-W|g02p2e0_t0--0-R|g02q0V0_i0_a0--|g02rd40Sz0_c0_1|g02ww20_e0_a0-I|g02xG90_p0_n0-Z|g02x5Z0_b0-X0-f|g02A0l0_e0_50_7|g02J5L0_B0_d0_9|g02Udd0_I0_6|g02W580_f0_b0-Y|g02Yw10_k0_a0_7|g02Z560_W0_t0_d|g02-xR0_h0_h0_3|g02_xQ0_v0_k0_g0_g|g0300X0_r0_q0_5|g035EE0_p0_20_2|g036wf0_q0_e0_h|g03eIq0_y0_m0_0|g03kIl0_s0_l0_0|g03kGW0_p0_o0_8|g03nGZ0_u0_u0_n|g03BFE0_n0_j0_8|g03B0o0_D0_k0_i|g03C300_H0_w0_i|g03FIb0_y0_u0_m|g03F410_w0_f0_4|g03GI30_o0_o0_s|g03Kxc0_30_D0_h|g03K3X0_L0_t0_r|g03MKv0_y0-V0-Q|g03MJ-0_s0_x0_l|g03RBl0_C0_A0-_|g03ZAN0_G0-W0_z|g03_691010__0_b|g041Br0_G0_E0_z|g04f0j0_H0_v0_q|g04gC60_J0_F0_C|g04iD40_K0_E0-_|g04lB80_J0_A0_C|g04w0F0_R0_r0_D|g04Adn0S60_M0_c|g04FBq0_N0_G0_E|g04LDj0_Q0_N0_F|g04-3m0_Y0_R0_w|g04_cO0_T0_S0_I|g05cBF1060_J0_K|g05x9f0_X0_P0-X|g05C8I0_Z0_X0_O|g05FE710A10a0_K|g05S2N1030_L0_H|g05Uby0_U0_T0_M|g05Wce0_S0_U0_M|g064cl0_S0_V0_T|g068cy0_-0_-0_U|g0695w1010_Y0_f|g06d8x0_Z0_O0_P|g06k4T10E0_W0_L|g06k7-0__0_X0_P|g06rdh0Sr0_V0_V|g06t7u1070_Z0_B|g06zzW108105102|g06z5P10z0_W0_B|g06FAr105104100|g06H2X10Z10U0_R|g06JAv10j10b102|g06RAa10b100102|g06WBO10j10c0_N|g06W7m10H10o0__|g06Yzy10h10d100|g06Zbt10g10g10g|g070Eg10N10e0_Q|g075Aa10h104105|g076BT10w10j106|g079zi10l10i108|g07lEf11610n10a|g07lwN10J10C10t|g07lbN109109109|g07mzR10k10810b|g07ozp10q10k10d|g07pBx10410c106|g07rzQ10p10i10h|g07ryU10u10r10d|g07vK20SF10G10A|g07vEh11n10B10e|g07v6z10M10z107|g07wzQ10P10v10k|g07wzm10v10u10i|g07yyF10I10s10l|g07zym10I10r|g07zyl10x10f|g07Bzj10v10l10q|g07DzJ10u10q10p|g07LC610K10y10c|g07Mx-10F10F10t|g07SBP11410K10w|g07T5V10D10o101|g07UIQ10N0_Q10m|g07WDO10-10-10n|g0800f10L10J10f|g0825L11510E10z|g0835I11f10D0_Y|g088xO11e10x10x|g08bLR0Ru10X10m|g08b8011210M107|g08eyB11d10r10s|g08iwa10Q10C10f|g08mC311410y10w|g08t0C11010_10C|g08t7M11310H10o|g08uIu10X10a10A|g08ucX0Sm11m10R|g08vzJ11d11810p|g08vwb11e10_10J|g08wcJ11a10W10O|g08xao10T11h10T|g08ybf10S11c10S|g08z2a117110103|g08A9711h10Y10Y|g08Bc111b11110R|g08CIs10G11l10N|g08D8I11210V10V|g08E3H11g117103|g08HDE11n10B10B|g08H0611j10L10Q|g08H1b11k10U10L|g08Hb_11c11910W|g08I8911o11310Y10H|g08K7R11511210M|g08NBg11810K10y|g08O7H11o10D113|g08PCI11r11p10e|g08P2_11t10Z10U|g08TBf11p10P114|g08Ucc11i11b111|g08UcF11q11b10R|g08Vcx11911a10W|g08XbG11i11110T|g08_yA10P11e10I|g091yh10Q11d10F|g0944t11U11g10E|g0954m12k11f10Z|g0959v11A10V10S|g09abK11s11911c|g09c0P11x11k10_|g09f1i11t11j110|g09gI912011B10X|g09jdv0Sn11q10O|g09lFh11B10-10n|g09r8c11w115112|g09tCi11r118116|g09wd411s11m11a|g09AC_11v11p116|g09Ad111z11i11q|g09H1W11u11711k|g09J1V11O11x11t|g09RDc11L11E11r|g09V8q11H11y11o|g09Z1611J11u11j|g0ah8J11F11D11w|g0ajdm11Z11G11s|g0aoac11Y11C11h|g0aqGl11L11l11n|g0auaa12711F11A|g0av8G11Q11H11y|g0ayDq11M11I11v|g0aG9I11K11C11y|g0aIdS0SA11R11z|g0aJ8B11P11w11D|g0aLDI12b11M11E|g0aM0N11T11N11x|g0aM9J11W11Q11F|g0aRGc11S11v11B|g0aTDn12i11I11E|g0aT0D12q12511J|g0aW1X11_11T11u|g0b18C12u11V11H|g0b69p11W11K11D|g0bddL12211-11G|g0brG912A12811L|g0bt1l11X11J11O|g0bv6y13312c11f|g0bv8Z12u11W11P|g0bv9b11K11V11Q|g0by1m12512111T|g0bHcG12411Z11A|g0bIcY12211Y11z|g0bIet12s12311R|g0bK2k12m12111O|g0bLKD12g12611l|g0bM1X12h11_11X|g0bOdg12n11Z11R|g0bTeY12o11-|g0bYc812K12a11Y|g0c00N12911X11N|g0c4Lf0QQ12l120|g0c4aC12U12e11C|g0c6F_13512b11S|g0c60J12B12z125|g0cmbD12-12e124|g0cnEx12i12811I|g0cq6M13913411U|g0csxm12V12w12q|g0csbb12p12a127|g0ctfD12o|g0cyKc12D12j120|g0cy1E12W12z121|g0czE012r12b11M|g0cAJo12I12A12g|g0cA4912t12m11g|g0cDLk12N12M126|g0cD3T12W12k11_|g0cEdQ12J12H122|g0cEeY12s12f123|g0cJb512X12U12e|g0cKwZ12E11N12d|g0cLDJ13d12x12i|g0cMeS12G12o11-|g0cO4k13z13312k|g0cQ8r13411V11P|g0cRA913M12x12w|g0cRA712y12v12d|g0cSBr12O12v12r|g0cSA614012T12w|g0cS0-12C12h129|g0cUJi12Y12j11S|g0cUw612F12E129|g0cU0-13e12L12z|g0cVKf12S12I12g|g0cVwW12R12B12q|g0cXw412_12L12B|g0cXeQ12H12s|g0cYek13012G12n|g0c-JT13712D12j|g0d3dr13l12K12n|g0d4d712-12J124|g0d70n13612C12F|g0daM00R112l|g0daL813212S12l|g0dfBD12P12P12x|g0dgBE13O13n12O12O|g0dgx213v12V|g0dgx113f12E|g0diKL13b12D12N|g0dizz13j13112y|g0dla013q12p127|g0dmye12Z12Q12d|g0dn2C13J12m12h|g0drb713q13i12p|g0dsJb13S13712A|g0dsym13y13112V|g0ducp13812K12a|g0dxwb13s13f12F|g0dxer13r13m12H|g0dyyG13A12Z12T|g0dALq13p13a12N|g0dC5T13912t11U|g0dC8l0Si12c12u|g0dDGS0RG13S128|g0dD0A13s13e12L|g0dIJJ13c12Y12I|g0dJcr13t13i12-|g0dK620Si13312c|g0dMLJ13E13h132|g0dMKs13w13c12S|g0dPJN13o13b137|g0dPDR0SH13n12r|g0dP1j13g13g13612C|g0dQwK13k12_12R|g0dQ1k13J13e13e|g0dRL-13F0SG13a|g0dUbS0Qd13812X|g0dZzz13U12T|g0d-wL13G13v13f|g0d-dD13B13m12J|g0d-dG13C13013l|g0d_C713T13d12P|g0e4JN13Z13D13c|g0e7Ln13E13w132|g0e7ah0Qv12X12U|g0e8eI13C13u130|g0ed0k13x12_136|g0edcN0Pm13B138|g0edeS13N13r|g0eexm13k13y12Q|g0efKH13D13p13b|g0ef0k13W13H13s|g0egxq13I13v12Z|g0eh4e0Pv0RY12t|g0ejyr13V13K131|g0ekdq13Q13l13t|g0ekeu13Q13m13r|g0eqKF14113o13w|g0erLY13F13p13a|g0etL-13h13E|g0euwo13R13H13k|g0evwi14913x13G|g0exxt13P13L13y|g0ez1L13W12W13g|g0eAyg13_13L13A|g0eFy013X13I13K|g0eKB514013O12v|g0eQfl0R_13u|g0eXBx13-13M12P|g0eXxj13X13R13I|g0f2eh0R_13B13C|g0f4wS13P13G|g0f5IQ13Z13512Y|g0f8Cf14213-13n|g0f9zd14613V13j|g0fayN13_13U13A|g0fd1E0SC13J13x|g0fnxB13L13P|g0fpLP0Ro141|g0ftJd0Qk13S13o|g0fyC014413O13T|g0fCyr14713K13V|g0fEAJ13M12y|g0g0Ls0Qc13Y13D|g0g0Dz13T0SH|g0g0Dy0Sf0RD|g0g0C213-0Sg|g0g0Ae1460Sd|g0g0zk14513U0SI|g0g0yt13_0Sj0RZ0SI|g0g0wV1490Rv|g0g00c14813H|g0g00d0SC0ON|";


		IMyTextSurface _drawingSurface;
		RectangleF _viewport;
		MySpriteDrawFrame spriteFrame;

		IEnumerator<bool> _stateMachine;

		int startInt = -1;
		int endInt = -1;

		//kdtree suport
		List<Vector3D> sortListV3Dkdtree = new List<Vector3D>();
		octoNode rootOctoNode;
		List<subTreeNeedsProcessing> subTreeNeedsProcessingVar = new List<subTreeNeedsProcessing>();
		bool pointsAreAllLoaded = false;
		bool kdtreeIsDoneBuidling = false;
		static int visited = 0;

		public Program()
		{
			// The constructor, called only once every session and
			// always before any other method is called. Use it to
			// initialize your script. 
			//     
			// The constructor is optional and can be removed if not
			// needed.
			// 
			// It's recommended to set RuntimeInfo.UpdateFrequency 
			// here, which will allow your script to run itself without a 
			// timer block.

			var Blocks = new List<IMyTerminalBlock>();
			GridTerminalSystem.GetBlocks(Blocks);
			Wheels = Blocks.FindAll(x => x.IsSameConstructAs(Me) && x is IMyMotorSuspension).Select(x => x as IMyMotorSuspension).ToList();
			RemoteControl = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMyRemoteControl) as IMyRemoteControl;
			//Sensor = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMySensorBlock) as IMySensorBlock;


			theAntenna = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMyRadioAntenna) as IMyRadioAntenna;

			theCockpit = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMyCockpit) as IMyCockpit;

			//Runtime.UpdateFrequency = UpdateFrequency.Update10;
			Runtime.UpdateFrequency = UpdateFrequency.Update100;


			// use the PB big display with the keyboard placed toward gravity
			// _drawingSurface = Me.GetSurface(0);
			// use the top center screen to display
			_drawingSurface = theCockpit.GetSurface(0);

			// Calculate the viewport offset by centering the surface size onto the texture size
			_viewport = new RectangleF(
				(_drawingSurface.TextureSize - _drawingSurface.SurfaceSize) / 2f,
				_drawingSurface.SurfaceSize
			);

			//initThePlanetGraph();

			// Initialize our state machine
			_stateMachine = RunStuffOverTime();

			Runtime.UpdateFrequency |= UpdateFrequency.Once;
		}
		//kdtree suport
		public class subTreeNeedsProcessing
		{
			public octoNode r;
			public List<Vector3D> listVectors;
			public int i;
			public int dim;
			public subTreeNeedsProcessing(octoNode ri, List<Vector3D> lVectors, int axisI, int dimI)
			{
				r = ri;
				listVectors = lVectors;
				i = axisI;
				dim = dimI;
			}
		}
		//kdtree suport
		public class octoNode
		{
			public double[] x = new double[3];
			public octoNode left, right;
		}
		//kdtree support
		public static List<Vector3D> sortingOnSpecificAxises(List<Vector3D> listToSort, int axisOnWhichToSort)
		{
			List<Vector3D> newResult = new List<Vector3D>();

			if (axisOnWhichToSort == 0)
			{
				SorterByAxisesOnVector3Dx storerX = new SorterByAxisesOnVector3Dx();
				listToSort.Sort(storerX);
			}
			if (axisOnWhichToSort == 1)
			{
				SorterByAxisesOnVector3Dy storerY = new SorterByAxisesOnVector3Dy();
				listToSort.Sort(storerY);
			}
			if (axisOnWhichToSort == 2)
			{
				SorterByAxisesOnVector3Dz storerZ = new SorterByAxisesOnVector3Dz();
				listToSort.Sort(storerZ);
			}


			//debug
			return listToSort;

			//return newResult;
		}
		//kdtree support
		static public Vector3D convertOctoNodeToV3D(octoNode ON)
		{
			Vector3D v = new Vector3D();
			v.X = ON.x[0];
			v.Y = ON.x[1];
			v.Z = ON.x[2];
			return v;
		}
		//kdtree support
		class SorterByAxisesOnVector3Dx : IComparer<Vector3D>
		{
			public int Compare(Vector3D x, Vector3D y)
			{
				return x.X.CompareTo(y.X);
			}
		}
		class SorterByAxisesOnVector3Dy : IComparer<Vector3D>
		{
			public int Compare(Vector3D x, Vector3D y)
			{
				return x.Y.CompareTo(y.Y);
			}
		}
		class SorterByAxisesOnVector3Dz : IComparer<Vector3D>
		{
			public int Compare(Vector3D x, Vector3D y)
			{
				return x.Z.CompareTo(y.Z);
			}
		}
		//kd tree support
		//nearest neighbors search
		static void nearest(octoNode root, octoNode nd, int i, int dim, ref octoNode best, ref double best_dist)
		{
			double d, dx, dx2;

			if (root == null) return;
			d = dist(root, nd, dim);
			//d = dist2(convertOctoNodeToV3D(root), convertOctoNodeToV3D(nd));
			dx = root.x[i] - nd.x[i];
			dx2 = dx * dx;

			visited++;

			if ((best == null) || d < best_dist)
			{
				best_dist = d;
				best = root;
			}


			//Echo("best:" + convertOctoNodeToV3D(best));
			//Echo("root:" + convertOctoNodeToV3D(root));
			//Echo("=============");

			/* if chance of exact match is high */
			if (best_dist == null) return;

			if (++i >= dim) i = 0;

			nearest(dx > 0 ? root.left : root.right, nd, i, dim, ref best, ref best_dist);
			if (dx2 >= best_dist) return;
			nearest(dx > 0 ? root.right : root.left, nd, i, dim, ref best, ref best_dist);
		}
		static public double dist(octoNode a, octoNode b, int dim)
		{
			double t, d = 0;
			dim = dim - 1;
			while (dim >= 0)
			{
				t = a.x[dim] - b.x[dim];
				d += t * t;
				dim = dim - 1;
			}
			return d;
		}
		static public double dist2(Vector3D a, Vector3D b)
		{
			double d;
			d = (a - b).LengthSquared();
			return d;
		}



		public bool initThePlanetGraph()
		{
			string s = encodedGraph;

			string[] subs = s.Split('|');

			// Echo("a:"+decodeAsCharNumberMax64('a'));
			// Echo("aa:"+decodeStr__NumberMax4095("aa"));


			int indexNumber = 0;

			//for the function
			nodes = new List<Node>();

			foreach (string sub in subs)
			{
				//string[] subs = s.Split('\n');
				//Echo(sub);

				Echo("indexNumber:" + indexNumber);

				//Echo("sub.Length:" + sub.Length);
				// string encodedIndexes = sub.Substring(5,sub.Length-3);
				int end = sub.Length - 1;


				//TODO: todo unsigned decoding
				int xNodeInit = decodeSignedStr(sub.Substring(0, 2));
				int yNodeInit = decodeSignedStr(sub.Substring(2, 2));
				int zNodeInit = decodeSignedStr(sub.Substring(4, 2));
				/*
				int xNodeInit = decodeStr__NumberMax4095(sub.Substring(0, 2));
				int yNodeInit = decodeStr__NumberMax4095(sub.Substring(2, 2));
				int zNodeInit = decodeStr__NumberMax4095(sub.Substring(4, 2));
				*/
				Vector3D position = new Vector3D(xNodeInit, yNodeInit, zNodeInit);
				Echo("position" + position);

				if (end == 6)
				{
					Echo("This node got no neighbors:" + indexNumber);
					nodes.Add(new Node(indexNumber, position));
				}
				else
				{
					
					// Echo("end:"+end);

					// string encodedIndexes = sub.Substring(5,sub.Length-1);
					string encodedIndexes = sub.Substring(6);
					// string encodedIndexes = sub.Substring(5,sub.Length);
					//Echo(encodedIndexes);

					string encodedNeighborsIndexes = encodedIndexes.Substring(0);
					//Echo("encodedNeighborsIndexes:" + encodedNeighborsIndexes);

					//int currentNodeIndexDecoded = decodeStr__NumberMax4095(encodedIndexes.Substring(0, 2));
					//Echo("currentNodeIndexDecoded:" + currentNodeIndexDecoded);

					// int indexNumber = int.Parse(subsub[2]);
					//int indexNumber = currentNodeIndexDecoded;
					nodes.Add(new Node(indexNumber, position));

					int numberOfSubstringNeighbors = encodedNeighborsIndexes.Length / 3;
					//Echo("numberOfSubstringNeighbors:" + numberOfSubstringNeighbors);

					foreach (int tmpIndex in Enumerable.Range(0, numberOfSubstringNeighbors))
					{
						string tmpNeighborStr = encodedNeighborsIndexes.Substring(3 * tmpIndex, 3);
						int tmpNeighborInt = decodeStr__NumberMax4095(tmpNeighborStr);
						nodes[indexNumber].neighborsNodesIndex.Add(tmpNeighborInt);
					}
					
				}



				indexNumber = indexNumber + 1;
			}

			return true;
		}


		public int decodeSignedStr(string EncodedStr)
		{
			if (EncodedStr.Length != 2)
			{
				Echo("if (EncodedStr.Length != 2)");
				Echo("ERROR");
			}


			char firstChar = EncodedStr[0];

			char secondChar = EncodedStr[1];

			int intFirstDecoded = decodeAsCharNumberMax64(firstChar);

			int intSecondDecoded = decodeAsCharNumberMax64(secondChar);

			//Echo("intFirstDecoded" + intFirstDecoded);

			//Echo("intSecondDecoded" + intSecondDecoded);

			int signNumber = intFirstDecoded * 64 + intSecondDecoded;

			//Echo("signNumber" + signNumber);

			int minus2048 = (int)signNumber / 2048;

			//Echo("minus2048" + minus2048);

			int resultInt = 0;

			if (minus2048 == 1) { 
				resultInt = -(signNumber - 2048);
			}
            else {
				resultInt = signNumber;
			}
			
			return resultInt;
        }

		public void Save()
		{
			// Called when the program needs to save its state. Use
			// this method to save your state to the Storage field
			// or some other means. 
			// 
			// This method is optional and can be removed if not
			// needed.
		}


		public int decodeStr___NumberMax262144(string strMax262144)
		{


			int resultInt = decodeAsCharNumberMax64(strMax262144[0]) * 4096 + decodeAsCharNumberMax64(strMax262144[1]) * 64 +decodeAsCharNumberMax64(strMax262144[2]) * 1;

			// # resultInt = 0
			return resultInt;
		}

		public int decodeStr__NumberMax4095(string strMax4095)
		{


			int resultInt = decodeAsCharNumberMax64(strMax4095[0]) * 64 + decodeAsCharNumberMax64(strMax4095[1]) * 1;

			// # resultInt = 0
			return resultInt;
		}

		public int decodeAsCharNumberMax64(char character)
		{
			// # print("number:"+str(number))

			// # print("character:",character)
			// int numberToProcess = (int) Char.GetNumericValue(character);
			int numberToProcess = (int)character;
			// # print("numberToProcess:",numberToProcess)
			// Echo("character:"+character);
			// Echo("numberToProcess:"+numberToProcess);

			int resultNumberUnder64 = 0;


			if (character == '-')
			{
				resultNumberUnder64 = 62;
				return resultNumberUnder64;
			}
			if (character == '_')
			{
				resultNumberUnder64 = 63;
				return resultNumberUnder64;
			}

			// # "0" "9" 48 58     0 9       58= 48 +10
			// # "A" "Z" 65 90     36 62     91= 65 + 26
			// # "a" "z" 97 122    10 35     122

			if (numberToProcess < 58)
			{
				// # 48 is "0"
				resultNumberUnder64 = numberToProcess - 48;
				return resultNumberUnder64;
			}
			if (numberToProcess < (90 + 1))
			{
				// # 97 is "A";
				resultNumberUnder64 = numberToProcess - (90 + 1) + 26 + 36;
				return resultNumberUnder64;
			}
			if (numberToProcess < (122 + 1))
			{
				// # 97 is "a";
				resultNumberUnder64 = numberToProcess - (122 + 1) + 10 + 26;
				return resultNumberUnder64;
			}




			return resultNumberUnder64;
		}

		//whip's code
		public void DrawLine(ref MySpriteDrawFrame frame, Vector2 point1, Vector2 point2, float width, Color color)
		{
			Vector2 position = 0.5f * (point1 + point2);
			Vector2 diff = point1 - point2;
			float length = diff.Length();
			if (length > 0)
				diff /= length;

			Vector2 size = new Vector2(length, width);
			float angle = (float)Math.Acos(Vector2.Dot(diff, Vector2.UnitX));
			angle *= Math.Sign(Vector2.Dot(diff, Vector2.UnitY));

			MySprite sprite = MySprite.CreateSprite("SquareSimple", position, size);
			sprite.RotationOrScale = angle;
			sprite.Color = color;
			frame.Add(sprite);
		}

		//TODO:
		//add new heuristic based on angles?
		//do heuristic change mid path ?
		//check for neighbors check at the beginning
		//do best path based on path combining
		//link faces
		//store all faces
		//display the current closest point and neighbors to help with changing path
		public void aStarPathFinding(int startIndex, int endIndex, out List<Node> listPathNode, out Dictionary<Node, double> gscoreOut)
		{
			listPathNode = new List<Node>();

			//Vector3D startPointGoal = startPoint;
			//Vector3D finalPointGoal = endPoint;


			//Echo("nodes.Count" + nodes.Count);

			//Echo("startPointGoal:" + startPointGoal);
			//Echo("finalPointGoal:" + finalPointGoal);

			//TODO: trouver le bon node de start pour avoir l'heuristique correspondant
			//int startingIndex = closestNodeToPoint(startPointGoal);
			int startingIndex = startIndex;

			Node nodeStarting = nodes[startingIndex];

			Echo("nodeStarting.position" + Vector3D.Round(nodeStarting.position,3));

			//1 make an openlist containing only the starting node
			List<Node> openlist = new List<Node>();
			// openlist.Add(nodes[3]);
			openlist.Add(nodeStarting);

			//2 make an empty closed list
			List<Node> closelist = new List<Node>();

			//int endingIndex = closestNodeToPoint(finalPointGoal);
			int endingIndex = endIndex;

			List<double> nodeGvalue = new List<double>();


			// Node ourDestinationNode = nodes[50];
			Node ourDestinationNode = nodes[endingIndex];
			// Node node = null;
			Node node = nodeStarting;

			Echo("ourDestinationNode.position" + Vector3D.Round(ourDestinationNode.position,1));

			Dictionary<Node, double> gscore = new Dictionary<Node, double>();
			Dictionary<Node, double> fscore = new Dictionary<Node, double>();

			Dictionary<Node, Node> came_from = new Dictionary<Node, Node>();


			// is 0 because it does not cost anything to move from starting node
			gscore.Add(node, 0);
			fscore.Add(node, gscore[node] + heuristic(node.position, ourDestinationNode.position));

			Echo("nodeStarting.index:" + nodeStarting.index);
			Echo("ourDestinationNode.index:" + ourDestinationNode.index);


			int debugCount = 0;

			List<Node> listHeapNodes = new List<Node>();
			listHeapNodes.Add(nodeStarting);

			Echo("start.position:" + node.position);
			Echo("goal.position:" + ourDestinationNode.position);

			while (true)
			{

				//Echo("heap.C:" + listHeapNodes.Count);
				if (listHeapNodes.Count == 0)
				{
					Echo("ran out of heap content, no path found");
					break;
				}
				node = listHeapNodes[listHeapNodes.Count - 1];
				listHeapNodes.RemoveAt(listHeapNodes.Count - 1);
				//Echo("node.index:" + node.index);
				// Echo("debugCount=====================:");
				// Echo("fscore["+node.index+"]:"+fscore[node]);
				// Echo("gscore["+node.index+"]:"+gscore[node]);
				// Echo("h:"+heuristic(node.position,ourDestinationNode.position));
				// Echo("node.position:"+node.position);
				// Echo(""+Math.Sqrt(distanceSquarred(node.position,ourDestinationNode.position)));

				if (ourDestinationNode == node)
				{
					Echo("goal reached");
					break;
				}
				else
				{
					if (closelist.Contains(node) == false)
					{
						closelist.Add(node);
					}
					List<Node> neighbors = new List<Node>();
					// Echo("nodes.Count:"+nodes.Count);
					// Echo("node.neighborsNodesIndex.Count:"+node.neighborsNodesIndex.Count);
					foreach (int index in node.neighborsNodesIndex)
					{
						//Echo("index:" + index);
						if (closelist.Contains(nodes[index]) == false)
						{
							neighbors.Add(nodes[index]);
						}
					}
					// Echo("neighbors.Count:"+neighbors.Count);

					Dictionary<Node, double> NodeFscore = new Dictionary<Node, double>();
					foreach (Node neighbor in neighbors)
					{
						// Echo("here11");
						//Echo("neighbor.index:"+neighbor.index);
						double tentative_g_score = gscore[node] + heuristic(node.position, neighbor.position);
						if (closelist.Contains(neighbor) == true)
						{
							double gscoreTmp = gscore.ContainsKey(neighbor) ? gscore[neighbor] : 0;
							if (tentative_g_score >= gscoreTmp)
							{
								continue;
							}
						}

						double gscoreTmp2 = gscore.ContainsKey(neighbor) ? gscore[neighbor] : 0;
						if (tentative_g_score < gscoreTmp2 || listHeapNodes.Contains(neighbor) == false)
						{
							// Echo("here1");
							came_from[neighbor] = node;
							gscore[neighbor] = tentative_g_score;
							fscore[neighbor] = tentative_g_score + heuristic(neighbor.position, ourDestinationNode.position);
							NodeFscore[neighbor] = fscore[neighbor];
							//listHeapNodes.Add(neighbor);
							// Echo("here2");
						}
					}

					foreach (KeyValuePair<Node, double> entry in NodeFscore.OrderByDescending(key => key.Value))
					{
						//Echo("entry.Key:"+entry.Key);
						listHeapNodes.Add(entry.Key);
					}
				}

				if (debugCount == 2000)
				{
					Echo("if (debugCount == 2000)");
					break;
				}
				debugCount = debugCount + 1;
			}
			Echo("debugCount:" + debugCount);

			gscoreOut = gscore;

			List<Node> data = new List<Node>();

			while (came_from.ContainsKey(node))
			{
				//Echo("node.positionR:"+Vector3D.Round(node.position, 0));
				//Echo("gscore[node]:" + Math.Round(gscore[node], 3));
				data.Add(node);
				node = came_from[node];
			}

			listPathNode = data;

			string toCustomData = "points_gened = [";

			int gps_number = 0;
			
			Point previousPointDebug = new Point(0, 0);

			foreach (Node pathNode in data)
			{
				// public Vector3D convertPointToV3D(IMyRemoteControl sc, int faceNumber, Point pointToV3D){
				//toCustomData = toCustomData + pathNode.position;
				//Vector3D nodeConverted = convertPointToV3D(RemoteControl, 4, pathNode.position);

				// MyWaypointInfo tmpWPINode  = new MyWaypointInfo("inter", nodeConverted);
				//MyWaypointInfo tmpWPINode = new MyWaypointInfo(gps_number.ToString(), nodeConverted);

				// toCustomData = toCustomData + tmpWPINode.ToString() + '\n';

				//toCustomData = toCustomData +"displayLarger(["+pathNode.position.X +","+pathNode.position.Y + "])" + '\n';
				/*
				if (previousPointDebug == new Point(0, 0))
				{
					previousPointDebug = pathNode.position;
				}
				else
				{
					toCustomData = toCustomData + "displayLine([" + pathNode.position.X + "," + pathNode.position.Y + "],[" + previousPointDebug.X + "," + previousPointDebug.Y + "])" + '\n';
					previousPointDebug = pathNode.position;
				}
				*/

				double PRfactorReverse = 1024.0 / 30000.0;

				//Echo("PRfactorReverse:" + PRfactorReverse);
				Vector3D pointTI = Vector3D.Round(PRfactorReverse * pathNode.position,0);
                if (gps_number == 0)
				{
					toCustomData = toCustomData + "(" + pointTI.X + "," + pointTI.Y + "," + pointTI.Z + ")";
				}
                else
                {
					toCustomData = toCustomData + ",(" + pointTI.X + "," + pointTI.Y + "," + pointTI.Z + ")";
				}

				gps_number = gps_number + 1;
			}

			toCustomData = "\n\n" + toCustomData + "]" + "\n\n";

			Me.CustomData = toCustomData;
		}



		public Point closestNodeToPoint(Vector3D thisPoint1, Vector3D thisPoint2)
		{
			Echo("thisPoint1" + thisPoint1);
			List<int> indexNodes = new List<int>();
			List<double> indexRadius1 = new List<double>();
			List<double> indexRadius2 = new List<double>();
			//Echo("nodes.Count"+nodes.Count);
			foreach (Node node in nodes)
			{
				Vector3D diffPos1 = node.position - thisPoint1;
				double diffPosLengh1 = diffPos1.Length();

				Vector3D diffPos2 = node.position - thisPoint2;
				double diffPosLengh2 = diffPos2.Length();

				indexNodes.Add(nodes.IndexOf(node));
				indexRadius1.Add(diffPosLengh1);
				indexRadius2.Add(diffPosLengh2);

			}

			Echo("indexRadius1.Count" + indexRadius1.Count);
			int minIndexRadius1 = indexRadius1.IndexOf(indexRadius1.Min());
			Echo("indexRadius1[]" + Math.Round(indexRadius1[minIndexRadius1], 1));

			Echo("indexRadius2.Count" + indexRadius2.Count);
			int minIndexRadius2 = indexRadius2.IndexOf(indexRadius2.Min());
			Echo("indexRadius2[]" + Math.Round(indexRadius2[minIndexRadius2], 1));

			//Echo("nodes5");
			// Echo("minIndexRadius:"+minIndexRadius);

			int indexOrClosestNode1 = indexNodes[minIndexRadius1];
			Echo("indexOrClosestNode1:" + indexOrClosestNode1);

			int indexOrClosestNode2 = indexNodes[minIndexRadius2];
			Echo("indexOrClosestNode2:" + indexOrClosestNode2);

			Point outputInts = new Point(indexOrClosestNode1, indexOrClosestNode2);

			return outputInts;

		}

		public void RunStateMachine()
		{
			// If there is an active state machine, run its next instruction set.
			if (_stateMachine != null)
			{
				// The MoveNext method is the most important part of this system. When you call
				// MoveNext, your method is invoked until it hits a `yield return` statement.
				// Once that happens, your method is halted and flow control returns _here_.
				// At this point, MoveNext will return `true` since there's more code in your
				// method to execute. Once your method reaches its end and there are no more
				// yields, MoveNext will return false to signal that the method has completed.
				// The actual return value of your yields are unimportant to the actual state
				// machine.
				bool hasMoreSteps = _stateMachine.MoveNext();

				// If there are no more instructions, we stop and release the state machine.
				if (hasMoreSteps)
				{
					// The state machine still has more work to do, so signal another run again, 
					// just like at the beginning.
					Runtime.UpdateFrequency |= UpdateFrequency.Once;
				}
				else
				{
					_stateMachine.Dispose();

					// In our case we just want to run this once, so we set the state machine
					// variable to null. But if we wanted to continously run the same method, we
					// could as well do
					// _stateMachine = RunStuffOverTime();
					// instead.
					_stateMachine = null;
				}
			}
		}

		public IEnumerator<bool> RunStuffOverTime()
		{
			// For the very first instruction set, we will just switch on the light.
			//*_panelLight.Enabled = true;

			// Then we will tell the script to stop execution here and let the game do it's
			// thing. The time until the code continues on the next line after this yield return
			// depends  on your State Machine Execution and the timer setup.
			// The `true` portion is there simply because an enumerator needs to return a value
			// per item, in our case the value simply has no meaning at all. You _could_ utilize
			// it for a more advanced scheduler if you want, but that is beyond the scope of this
			// tutorial.
			yield return true;

			// The following would seemingly be an illegal operation, because the script would
			// keep running until the instruction count overflows. However, using yield return,
			// you can get around this limitation - without breaking the rules and while remaining
			// performance friendly.
			/*
			while (true)
			{
				//_textPanel.WriteText(i.ToString());
				i++;
				// Like before, when this statement is executed, control is returned to the game.
				// This way you can have a continuously polling script with complete state
				// management, with very little effort.
				yield return true;
			}
			*/

			string s = encodedGraph;

			string[] subs = s.Split('|');

			// Echo("a:"+decodeAsCharNumberMax64('a'));
			// Echo("aa:"+decodeStr__NumberMax4095("aa"));


			int indexNumber = 0;

			//for the function
			nodes = new List<Node>();

			foreach (string sub in subs)
			{
				//string[] subs = s.Split('\n');
				Echo(sub);
                if (sub == "")
                {
					continue;
                }

				Echo("indexNumber:" + indexNumber);

				//Echo("sub.Length:" + sub.Length);
				// string encodedIndexes = sub.Substring(5,sub.Length-3);
				int end = sub.Length - 1;


				//TODO: todo unsigned decoding
				int xNodeInit = decodeSignedStr(sub.Substring(0, 2));
				int yNodeInit = decodeSignedStr(sub.Substring(2, 2));
				int zNodeInit = decodeSignedStr(sub.Substring(4, 2));
				/*
				int xNodeInit = decodeStr__NumberMax4095(sub.Substring(0, 2));
				int yNodeInit = decodeStr__NumberMax4095(sub.Substring(2, 2));
				int zNodeInit = decodeStr__NumberMax4095(sub.Substring(4, 2));
				*/

				//Vector3D position = new Vector3D(xNodeInit, yNodeInit, zNodeInit);
				int PR = 30000;
				//multiplying factor
				double muFa = PR / 1024;
				Vector3D position = new Vector3D(muFa * xNodeInit, muFa * yNodeInit, muFa * zNodeInit);
				position = PR*Vector3D.Normalize(position);

				//adding kdtree list populating
				sortListV3Dkdtree.Add(position);

				Echo("position" + position);

				if (end == 6)
				{
					Echo("This node got no neighbors:" + indexNumber);
					nodes.Add(new Node(indexNumber, position));
				}
				else
				{

					// Echo("end:"+end);

					// string encodedIndexes = sub.Substring(5,sub.Length-1);
					string encodedIndexes = sub.Substring(6);
					// string encodedIndexes = sub.Substring(5,sub.Length);
					//Echo(encodedIndexes);

					string encodedNeighborsIndexes = encodedIndexes.Substring(0);
					//Echo("encodedNeighborsIndexes:" + encodedNeighborsIndexes);

					//int currentNodeIndexDecoded = decodeStr__NumberMax4095(encodedIndexes.Substring(0, 2));
					//Echo("currentNodeIndexDecoded:" + currentNodeIndexDecoded);

					// int indexNumber = int.Parse(subsub[2]);
					//int indexNumber = currentNodeIndexDecoded;
					nodes.Add(new Node(indexNumber, position));

					int numberOfSubstringNeighbors = encodedNeighborsIndexes.Length / 3;
					//Echo("numberOfSubstringNeighbors:" + numberOfSubstringNeighbors);

					foreach (int tmpIndex in Enumerable.Range(0, numberOfSubstringNeighbors))
					{
						string tmpNeighborStr = encodedNeighborsIndexes.Substring(3 * tmpIndex, 3);
						//int tmpNeighborInt = decodeStr__NumberMax4095(tmpNeighborStr);
						int tmpNeighborInt = decodeStr___NumberMax262144(tmpNeighborStr);
						nodes[indexNumber].neighborsNodesIndex.Add(tmpNeighborInt);
					}
                    if (indexNumber % 500 == 0) { 
						yield return true;
					}

				}



				indexNumber = indexNumber + 1;
			}

			//allow to be the tree
			pointsAreAllLoaded = true;

			yield return true;
		}

		public double heuristic(Vector3D a, Vector3D b)
		{

			// return heuristicZero(a,b);
			return euclideanDistance(a, b);
			//return 0;
			// return manhattanDistance(a,b);
			// return distanceSquarred(a,b);
		}

		public double euclideanDistance(Vector3D a, Vector3D b)
		{

			return Math.Sqrt((b.X - a.X) * (b.X - a.X) + (b.Y - a.Y) * (b.Y - a.Y) + (b.Z - a.Z) * (b.Z - a.Z));
		}

		public double manhattanDistance(Point a, Point b)
		{

			return Math.Abs(b.X - a.X) + Math.Abs(b.Y - a.Y);
		}

		public double distanceSquarred(Point a, Point b)
		{

			return (b.X - a.X) * (b.X - a.X) + (b.Y - a.Y) * (b.Y - a.Y);
		}


		public double heuristicZero(Point a, Point b)
		{

			return 0;
		}


		public void Main(string argument, UpdateType updateSource)
		{
			// The main entry point of the script, invoked every time
			// one of the programmable block's Run actions are invoked,
			// or the script updates itself. The updateSource argument
			// describes where the update came from.
			// 
			// The method itself is required, but the arguments above
			// can be removed if not needed.
			
			if ((updateSource & UpdateType.Once) == UpdateType.Once)
			{
				RunStateMachine();
			}


			// ==============================================================================

			if (theAntenna != null)
			{
				theAntenna.HudText = str_to_display;
			}

			//var targetGpsString = "";
			//Echo("targetGpsString:" + targetGpsString);
			MyWaypointInfo myWaypointInfoTarget = new MyWaypointInfo("lol", 0, 0, 0);
			//MyWaypointInfo.TryParse("GPS:/// #4:53590.85:-26608.05:11979.08:", out myWaypointInfoTarget);

			if (argument != null)
			{
				if (argument != "")
				{
					Echo("argument:" + argument);
					if (argument.Contains(":#") == true)
					{
						Echo("if (argument.Contains(:#) == true)");
						MyWaypointInfo.TryParse(argument.Substring(0, argument.Length - 10), out myWaypointInfoTarget);
						// MyWaypointInfo.TryParse(argument.Substring(0, argument.Length - 10), out myWaypointInfoTerrainTarget);
					}
					else
					{
						Echo("not if (argument.Contains(:#) == true)");
						MyWaypointInfo.TryParse(argument, out myWaypointInfoTarget);
						// MyWaypointInfo.TryParse(argument, out myWaypointInfoTerrainTarget);
					}
					if (myWaypointInfoTarget.Coords != new Vector3D(0, 0, 0))
					{
						//x,y,z coords is global to remember between each loop
						myTerrainTarget = myWaypointInfoTarget.Coords;
						myWaypointInfoTerrainTarget = myWaypointInfoTarget;
					}
				}
			}

			if (myTerrainTarget == new Vector3D(0, 0, 0))
			{
				// //using the expected remote control to give us the center of the current planet
				// flightIndicatorsShipController.TryGetPlanetPosition(out myTerrainTarget);
			}



			Echo("if the script don't refresh the screen, the Remote Control might be gone, please hit Recompile");

			Echo("using subTreeNeedsProcessingVar");
			if(pointsAreAllLoaded == true)
			{
				if (rootOctoNode == null)
				{
					rootOctoNode = new octoNode();
					subTreeNeedsProcessingVar.Add(
						new subTreeNeedsProcessing(rootOctoNode,
						sortListV3Dkdtree, 0, 3));
				}
				else
				{
					//Echo("rootOctoNode.l.l:" + convertOctoNodeToV3D(rootOctoNode.left.left));
					//Echo("rootOctoNode.r:" + Vector3D.Round(convertOctoNodeToV3D(rootOctoNode.right),0));
					//Echo("rootOctoNode.l:" + Vector3D.Round(convertOctoNodeToV3D(rootOctoNode.left),0));
					//Echo("rootOctoNode:" + Vector3D.Round(convertOctoNodeToV3D(rootOctoNode),0));
				}
			}

			int testI = 0;
			//iterative way to build the tree
			while (subTreeNeedsProcessingVar.Count != 0)
			{
				subTreeNeedsProcessing nProc = subTreeNeedsProcessingVar[0];

				octoNode n = nProc.r;
				List<Vector3D> listToBeSorted = nProc.listVectors;
				int i = nProc.i;
				int dim = nProc.dim;

				//Echo("listToBeSorted.Count:" + listToBeSorted.Count);
				
				List<Vector3D> listSorted;
				if (listToBeSorted.Count <3950)
				{
					listSorted = sortingOnSpecificAxises(listToBeSorted, i);
				}
                else
                {
					listSorted = listToBeSorted;

				}

				testI = testI + 1;


				int intIndexPoint = (listSorted.Count - 1) / 2;

				int startLeft = 0;
				int endLeft = intIndexPoint - 1;

				int startRight = intIndexPoint + 1;
				int endtRight = listSorted.Count - 1;

				List<Vector3D> subListLeft = listSorted.GetRange(startLeft, endLeft - startLeft + 1);
				List<Vector3D> subListRight = listSorted.GetRange(startRight, endtRight - startRight + 1);

				i = (i + 1) % dim;

				//storing the point
				n.x[0] = listSorted[intIndexPoint].X;
				n.x[1] = listSorted[intIndexPoint].Y;
				n.x[2] = listSorted[intIndexPoint].Z;

				if (subListLeft.Count != 0)
				{
					n.left = new octoNode();
					subTreeNeedsProcessingVar.Add(
						new subTreeNeedsProcessing(n.left,
						subListLeft, i, dim));
				}
				if (subListRight.Count != 0)
				{
					n.right = new octoNode();
					subTreeNeedsProcessingVar.Add(
						new subTreeNeedsProcessing(n.right,
						subListRight, i, dim));
				}

				//todo remove the processed node;
				subTreeNeedsProcessingVar.RemoveAt(0);

				if (testI % 4000 == 0)
				{
					Echo("% 4000 == 0");
					Echo("ICkdtreebuilding:" + Runtime.CurrentInstructionCount);
					break;
					//yield return true;
				}
				if (subTreeNeedsProcessingVar.Count == 0)
				{
					Echo(".Count == 0");
					Echo("ICkdtreebuilding:" + Runtime.CurrentInstructionCount);
					break;
					//yield return true;
				}

				if (Runtime.CurrentInstructionCount > 30000)
				{
					Echo("Count > 30000");
					Echo("ICkdtreebuilding" + Runtime.CurrentInstructionCount);
					break;
					//yield return true;
				}
			}

			if( subTreeNeedsProcessingVar.Count != 0)
            {
				Echo("kdtree building in progress...");
				return;
			}

			if (Runtime.CurrentInstructionCount > 30000)
			{
				//Echo("Count > 30000");
				//Echo("ICkdtreebuilding" + Runtime.CurrentInstructionCount);
				return;
				//yield return true;
			}


			Echo("testI" + testI);

			Echo("pointsAreAllLoaded:" + pointsAreAllLoaded);
			if(pointsAreAllLoaded == true)
			{
                if (testI == 0)
                {
					kdtreeIsDoneBuidling = true;
				}
				Echo("kdtreeIsDoneBuidling:" + kdtreeIsDoneBuidling);
			}
            else
			{
				Echo("kdtreeIsDoneBuidling:" + "waiting for points loading");
			}


			Vector3D planetCenter = new Vector3D(0, 0, 0);

			bool planetDetected = RemoteControl.TryGetPlanetPosition(out planetCenter);

			Echo("planetCenter:" + planetCenter);

			Vector3D myPos = RemoteControl.GetPosition();
			Echo("myPos:" + Vector3D.Round(myPos, 2));

			Vector3D myRelPosOnplanet = myPos - planetCenter;

			Echo("myRelPosOnplanet:" + Vector3D.Round(myRelPosOnplanet, 2));




			Echo("myTerrainTarget:" + Vector3D.Round(myTerrainTarget, 3));

			if (RemoteControl == null)
			{
				Echo("Remote Control gone or not existant\n=\n=");
			}


			float SLerror = (float)(RemoteControl.SpeedLimit - RemoteControl.GetShipSpeed());

			spriteFrame = _drawingSurface.DrawFrame();

			int facenumberCalculated = -1;
			Point pixelPosCalculated = new Point(0, 0);

			faceAndPointOnPlanetsCalculated(RemoteControl, out facenumberCalculated, out pixelPosCalculated, 
				false, new Vector3D(0, 0, 0));

			Echo("facenumberMain1:" + facenumberCalculated);
			Echo("pixelPosMain1:" + pixelPosCalculated);

			whichFileShouldIlook(facenumberCalculated);

			// add the direction of the rover on the map
			int faceNumberTipRover = -1;
			Vector3D shipForwardVectorTip = 2 * 1024 * RemoteControl.WorldMatrix.Forward + Me.GetPosition();

			Point pointShipForwardVector = new Point(0, 0);
			faceAndPointOnPlanetsCalculated(RemoteControl, out faceNumberTipRover, out pointShipForwardVector, 
				true, shipForwardVectorTip);
			Echo("shipForwardVectorTip:" + Vector3D.Round(shipForwardVectorTip, 3));
			Echo("pointShipForwardVector:" + pointShipForwardVector);

			Echo("nodes.CountMain:" + nodes.Count);



			if (myTerrainTarget == new Vector3D(0, 0, 0))
			{

				// foreach (IMyMotorSuspension Wheel in Wheels)
				// {
				// Wheel.SetValue<Single>("Steer override", 0);
				// Wheel.SetValue<float>("Propulsion override", 0);
				// Wheel.Brake = true;

				// RemoteControl.HandBrake = true;

				// }

				startInt = -1;
				endInt = -1;

			}
			else
			{
				Vector3D targetV3Dabs = myWaypointInfoTerrainTarget.Coords;

				Echo("targetV3Dabs:" + Vector3D.Round(targetV3Dabs, 3));



				int facenumberCalculatedTarget = -1;
				Point pixelPosCalculatedTarget = new Point(0, 0);

				faceAndPointOnPlanetsCalculated(RemoteControl, out facenumberCalculatedTarget, out pixelPosCalculatedTarget, true, targetV3Dabs);


				// Echo("facenumberCalculatedTarget:"+facenumberCalculatedTarget);
				Echo("FNCalculatedTarget:" + facenumberCalculatedTarget);
				Echo("pixelPosCalcTarget:" + pixelPosCalculatedTarget);

				whichFileShouldIlook(facenumberCalculatedTarget);

				bool targetIsOnTheSameFace = false;
				if (facenumberCalculatedTarget == facenumberCalculated)
				{
					targetIsOnTheSameFace = true;
				}
				else
				{
					targetIsOnTheSameFace = false;
				}
				Echo("targetIsOnTheSameFace:" + targetIsOnTheSameFace);

				
				List<Node> aStarPathNodeList1 = new List<Node>();
				List<Node> aStarPathNodeList2 = new List<Node>();


				//Point startPointGoal = pixelPosCalculated;
				//Point finalPointGoal = pixelPosCalculatedTarget;



				Vector3D startPointGoal = Vector3D.Round(myRelPosOnplanet,1);

				Vector3D targetV3DrelToPlanet = targetV3Dabs - planetCenter;

				Vector3D finalPointGoal = Vector3D.Round(targetV3DrelToPlanet,1);

				Dictionary<Node, double> gscore1 = new Dictionary<Node, double>();
				Dictionary<Node, double> gscore2 = new Dictionary<Node, double>();

				if (nodes.Count == 0)
				{
					Echo("no nodes init, no path available!");
					return;
                }

                if (kdtreeIsDoneBuidling == true)
                {
                    octoNode testMyPosNode = new octoNode();
                    octoNode startNode = new octoNode();

                    Vector3D v3d = myRelPosOnplanet;

                    testMyPosNode.x[0] = v3d.X;
                    testMyPosNode.x[1] = v3d.Y;
                    testMyPosNode.x[2] = v3d.Z;

                    double best_dist = 5000000000;

                    visited = 0;
                    Echo("ICkdtreenearestbefore:" + Runtime.CurrentInstructionCount);
                    nearest(rootOctoNode, testMyPosNode, 0, 3, ref startNode, ref best_dist);
                    Echo("ICkdtreenearestafter:" + Runtime.CurrentInstructionCount);

                    Echo("" + Vector3D.Round(convertOctoNodeToV3D(rootOctoNode.left.left), 1));

                    Echo("visited:" + visited);

                    Echo("testON:" + Vector3D.Round(convertOctoNodeToV3D(testMyPosNode), 1));
                    Echo("test_Best:" + Vector3D.Round(convertOctoNodeToV3D(startNode), 1));

                    Vector3D v3d_test_Best = convertOctoNodeToV3D(startNode);

                    Echo("v3d_test_Best:" + Vector3D.Round(v3d_test_Best, 1));
                    Echo("best_dist(squarred):" + Math.Round(best_dist, 1));

                    Echo("infos_clos:" + Math.Round((v3d_test_Best - v3d).Length(), 1));


                    octoNode goalNode = new octoNode();

                    Vector3D v3dGoal = targetV3DrelToPlanet;

                    testMyPosNode.x[0] = v3dGoal.X;
                    testMyPosNode.x[1] = v3dGoal.Y;
                    testMyPosNode.x[2] = v3dGoal.Z;

                    double best_distGoal = 5000000000;
					
                    Echo("ICkdtreenearestbeforeGoal:" + Runtime.CurrentInstructionCount);
                    nearest(rootOctoNode, testMyPosNode, 0, 3, ref goalNode, ref best_distGoal);
                    Echo("ICkdtreenearestafterGoal:" + Runtime.CurrentInstructionCount);

					Echo("goalPos" + convertOctoNodeToV3D(goalNode));
					//Echo("goalIdx:" + sortListV3Dkdtree.IndexOf(convertOctoNodeToV3D(goalNode)));
					Echo("startPos" + convertOctoNodeToV3D(startNode));
					//Echo("startIdx:" + sortListV3Dkdtree.IndexOf(convertOctoNodeToV3D(startNode)));


					startInt = sortListV3Dkdtree.IndexOf(convertOctoNodeToV3D(startNode));
					endInt = sortListV3Dkdtree.IndexOf(convertOctoNodeToV3D(goalNode));

				}

                //debug purpose
                //startInt = 1;
				//endInt = 50;

				//aStarPathFinding(startPointGoal, finalPointGoal, out aStarPathNodeList1, out gscore1);
				if (startInt >= 0)
                {
					if(endInt >= 0)
					{
						aStarPathFinding(startInt, endInt, out aStarPathNodeList1, out gscore1);
					}
                }

				Vector3D gV3D = RemoteControl.GetNaturalGravity();
				Vector3D fowardRC = RemoteControl.WorldMatrix.Forward;

				displayThe3dPathCentered(aStarPathNodeList1, gV3D, fowardRC, myRelPosOnplanet);


				//getting vectors to help with angles proposals
				Vector3D shipForwardVector = RemoteControl.WorldMatrix.Forward;
				Vector3D shipLeftVector = RemoteControl.WorldMatrix.Left;
				Vector3D shipDownVector = RemoteControl.WorldMatrix.Down;

				double steerOverride = 0;
				// double steerOverride = shipForwardVector.Dot(Vector3D.Normalize(targetV3Dabs));
				// steerOverride*=100;
				// Echo("steerOverride:"+Math.Round(steerOverride,3))
				// ;

				Vector3D targetV3Drel = RemoteControl.GetPosition() - targetV3Dabs;

				Vector3D crossForwardTT = shipForwardVector.Cross((targetV3Drel));
				// Vector3D crossForwardTT = shipForwardVector.Cross(Vector3D.Normalize(targetV3Dabs));
				double turnRightOrLeft = crossForwardTT.Dot(shipDownVector);

				Echo("turnRightOrLeft:" + Math.Round(turnRightOrLeft, 3));

				// str_to_display = ""+"turnRightOrLeft:"+Math.Round(turnRightOrLeft,3);


				steerOverride = turnRightOrLeft / crossForwardTT.Length();

				Echo("targetV3Drel.L:" + Math.Round(targetV3Drel.Length(), 3));

				if (targetV3Drel.Length() > 10000)
				{
					steerOverride *= 4;
				}

				if (Math.Abs(steerOverride) < .98)
				{
					steerOverride *= 0.25;
				}
				// steerOverride*=0.25;

				steerOverride *= -1;
				// str_to_display = ""+"steerOverride:"+Math.Round(steerOverride,3);
				Echo("steerOverride:" + Math.Round(steerOverride, 3));


				steerOverride = MyMath.Clamp(Convert.ToSingle(steerOverride), Convert.ToSingle(-1), Convert.ToSingle(1));


				// foreach (IMyMotorSuspension Wheel in Wheels)
				// {
				// double areThisFrontWheel = shipForwardVector.Dot(Wheel.GetPosition() - RemoteControl.GetPosition());
				// Echo("areThisFrontWheel:"+Math.Round(areThisFrontWheel,3));

				// float MultiplierPO = (float) Vector3D.Dot(Wheel.WorldMatrix.Up, RemoteControl.WorldMatrix.Right);

				// // str_to_display = ""+"MultiplierPO:"+Math.Round(MultiplierPO,3);
				// // Echo(str_to_display);
				// //SLerror = -0.2f;

				// float localPO = -MultiplierPO * SLerror;

				// str_to_display = ""+"localPO:"+Math.Round(localPO,3);

				// if(areThisFrontWheel>0){
				// Wheel.SetValue<Single>("Steer override", Convert.ToSingle(steerOverride));
				// Wheel.SetValue<float>("Propulsion override", localPO);

				// }
				// else{
				// // Wheel.SetValue<Single>("Steer override", Convert.ToSingle(-steerOverride));
				// Wheel.SetValue<float>("Propulsion override", localPO);
				// }

				// }

				// //stop when destination is reached
				// if(targetV3Drel.Length()<5){
				// myTerrainTarget = new Vector3D(0, 0, 0);
				// }

				if (Math.Abs(pixelPosCalculated.X - pixelPosCalculatedTarget.X) <= 1)
				{
					if (Math.Abs(pixelPosCalculated.Y - pixelPosCalculatedTarget.Y) <= 1)
					{
						myTerrainTarget = new Vector3D(0, 0, 0);
					}
				}



			}

			Vector2 leftMyPosVector2 = new Vector2((float)pixelPosCalculated.Y - 24, (float)pixelPosCalculated.X) / 8;
			Vector2 rightMyPosVector2 = new Vector2((float)pixelPosCalculated.Y + 24, (float)pixelPosCalculated.X) / 8;
			DrawLine(ref spriteFrame, leftMyPosVector2, rightMyPosVector2, 6.0f, Color.Green);

			Vector2 leftMyRoverTipVector2 = new Vector2((float)pixelPosCalculated.Y, (float)pixelPosCalculated.X) / 8;
			Vector2 rightMyRoverTipVector2 = new Vector2((float)pointShipForwardVector.Y, (float)pointShipForwardVector.X) / 8;
			DrawLine(ref spriteFrame, leftMyRoverTipVector2, rightMyRoverTipVector2, 3.0f, Color.Green);

			// x 0 y 0 w 256 h 256

			Echo("_viewport:" + _viewport);
			// DrawSprites(ref spriteFrame);
			spriteFrame.Dispose();


			Echo("planetRegionPolynsLd:" + planetRegionPolygonsLoaded);



			Echo("ICkdtreeEnd:" + Runtime.CurrentInstructionCount);

		}


		public void displayThe3dPathCentered(List<Node> path, Vector3D grav,
			Vector3D forward, Vector3D centeredOn)
        {
			Echo("displayThe3dPathCentered");
			Echo("path.Count"+path.Count);

			if(path.Count< 2)
            {
				return;
            }

			//spot from which to draw from
			Vector2 prevplottingPath = new Vector2(128, 128+64);
			Vector2 plottingPath = new Vector2(128, 128+64);

			//double df = 0.25 * 0.25 * 0.25 * 0.25 * 0.25 * 1024.0 / 30000.0;
			//double df = 0.25 * 0.25 * 0.25 * 1024.0 / 30000.0;
			double df = 0.25 * 0.25 * 1024.0 / 30000.0;

			Echo("dfF:"+(path[0].position - path[path.Count-1].position).Length());
			double dfF = (path[0].position - path[path.Count - 1].position).Length();
			/*
			if (dfF > 30000)
				df = df * 1.0;
			if (dfF > 15000)
				df = df * 4.0;
			if (dfF > 7500)
				df = df * 4.0;
			if (dfF > 3500)*
				df = df * 8.0;
			*/

			//first line from myPos to the first node:

			//centeredOn = new Vector3D(26000, -13000, 3000);

			Vector3D prevnodePosition = Vector3D.Normalize(centeredOn)*30000;


			Vector3D nodePosition = path[0].position;
			Vector3D lines = nodePosition - prevnodePosition;

			Vector3D tmpProj = lines - VectorHelper.VectorProjection(lines, grav);
			//Vector3D tmpProj = VectorHelper.VectorProjection(lines, grav);


			Vector3D bodyRCX = Vector3D.Normalize(grav.Cross(forward));
			Vector3D bodyRCY = forward;

			double projX = tmpProj.Dot(bodyRCX);
			double projY = -tmpProj.Dot(bodyRCY);

			//offset for the first line
			projX = projX - plottingPath.X;
			projY = projY - plottingPath.Y;

			//factor according the the disance from the goal
			projX = projX * df;
			projY = projY * df;


			//plottingPath = new Vector2((float)(plottingPath.X + projX), (float)(plottingPath.Y + projY));

			//DrawLine(ref spriteFrame, prevplottingPath, plottingPath, 1.5f, Color.Red);

			prevplottingPath = plottingPath;

			//debugging
			//return;

			Echo("==================");
			Echo("plottingPath:" + plottingPath);
			Echo("prevplottingPath:" + prevplottingPath);
			Echo("nodePosition:" + Vector3D.Round(lines,1));
			Echo("==================");

			List<Node> path2 = path;

			path2.Reverse();

			//return;
			//prevnodePosition = centeredOn;
			prevnodePosition = path2[0].position;
			//prevnodePosition = path[path.Count-1].position;

			int counter = 0;

			foreach (Node node in path2)
			//foreach (int i in Enumerable.Range(path.Count-1,0))
			{

				nodePosition = node.position;
				//nodePosition = path[i].position;
				lines = nodePosition - prevnodePosition;

				tmpProj = lines - VectorHelper.VectorProjection(lines, grav);
				//tmpProj = VectorHelper.VectorProjection(lines, grav);

				projX = tmpProj.Dot(bodyRCX);
				projY = -tmpProj.Dot(bodyRCY);

				if(counter == 0)
				{
					//projX = projX - plottingPath.X;
					//projY = projY - plottingPath.Y;
				}

				projX = projX * df;
				projY = projY * df;


				plottingPath = new Vector2((float)(plottingPath.X + projX), (float)(plottingPath.Y + projY));

				//Echo("plottingPath:" + plottingPath);
				//Echo("prevplottingPath:" + prevplottingPath);
				//Echo("node.position:" + Vector3D.Round(nodePosition, 1));
				//Echo("==================");


				DrawLine(ref spriteFrame, prevplottingPath, plottingPath, 1.5f, Color.Red);

				//debug
				//break;

				//v2d
				prevplottingPath = plottingPath;
				//v3d
				prevnodePosition = nodePosition;

				if (counter > 5)
				{
					//break;
				}

				counter = counter + 1;
			}


		}

		//TODO: add credit to description
		public static class VectorHelper
		{
			// in radians
			public static double VectorAngleBetween(Vector3D a, Vector3D b)
			{
				if (Vector3D.IsZero(a) || Vector3D.IsZero(b))
					return 0;
				else
					return Math.Acos(MathHelper.Clamp(a.Dot(b) / Math.Sqrt(a.LengthSquared() * b.LengthSquared()), -1, 1));
			}

			public static Vector3D VectorProjection(Vector3D vectorToProject, Vector3D projectsToVector)
			{
				if (Vector3D.IsZero(projectsToVector))
					return Vector3D.Zero;

				return vectorToProject.Dot(projectsToVector) / projectsToVector.LengthSquared() * projectsToVector;
			}

		}


		//check from down6 gps to down3 gps
		//GPS:down3:-3957044.93:-55637.06:-748943.78:#FF75C9F1:
		//GPS:down6:-3971849:-53922.84:-787513.96:#FF75C9F1:
		public void faceAndPointOnPlanetsCalculated(IMyRemoteControl sc, out int facenumber, out Point pixelPos, bool debugMode, Vector3D testedV3D)
		{

			// Echo(Me.GetPosition()+"");
			Vector3D myPos = sc.GetPosition();
			if (debugMode == true)
			{
				myPos = testedV3D;
			}

			// foreach	(Point point in tmpTestNextPoints){
			// Echo("point"+point);
			// }

			Vector3D centerFacePositionOffset = new Vector3D(0, 0, 0);
			double planet_radius = 60000;

			Vector3D planetCenter = new Vector3D(0, 0, 0);

			bool planetDetected = sc.TryGetPlanetPosition(out planetCenter);

			//Echo("planetCenter:" + planetCenter);

			// planet_radius = (int) (planetCenter-myPos).Length();
			planet_radius = (int)(myPos - planetCenter).Length();

			Echo("planet_radius:" + planet_radius);

			Vector3D myPosRelToCenter = (myPos - planetCenter);

			double myPosXAbs = Math.Abs(myPosRelToCenter.X);
			double myPosYAbs = Math.Abs(myPosRelToCenter.Y);
			double myPosZAbs = Math.Abs(myPosRelToCenter.Z);

			Vector3D projectedSphereVector = new Vector3D(0, 0, 0);

			int faceNumber = -1;

			double pixelScalingToIGW = (2 * planet_radius / 2048);

			//shorter names formulas
			double intX = 0;
			double intY = 0;
			double intZ = 0;

			Point extractedPoint = new Point(0, 0);
			double extractionX_pointRL = 0;
			double extractionY_pointRL = 0;

			if (myPosXAbs > myPosYAbs)
			{
				if (myPosXAbs > myPosZAbs)
				{
					projectedSphereVector = (planet_radius / myPosXAbs) * myPosRelToCenter;
					intY = projectedSphereVector.Y;
					intZ = projectedSphereVector.Z;
					if (myPosRelToCenter.X > 0)
					{
						faceNumber = 3;
						extractionX_pointRL = planet_radius - intY;
						extractionY_pointRL = planet_radius - intZ;
					}
					else
					{
						faceNumber = 4;
						extractionX_pointRL = planet_radius - intY;
						extractionY_pointRL = planet_radius + intZ;
					}
				}
			}

			if (myPosYAbs > myPosXAbs)
			{
				if (myPosYAbs > myPosZAbs)
				{
					projectedSphereVector = (planet_radius / myPosYAbs) * myPosRelToCenter;
					intX = projectedSphereVector.X;
					intZ = projectedSphereVector.Z;
					if (myPosRelToCenter.Y > 0)
					{
						faceNumber = 5;
						extractionY_pointRL = planet_radius - intX;
						extractionX_pointRL = planet_radius - intZ;
					}
					else
					{
						faceNumber = 1;
						//extractionY_pointRL = planet_radius + intX;
						//extractionX_pointRL = planet_radius - intZ;
						extractionY_pointRL = planet_radius - intX;
						extractionX_pointRL = planet_radius + intZ;
					}
				}
			}

			if (myPosZAbs > myPosXAbs)
			{
				if (myPosZAbs > myPosYAbs)
				{
					projectedSphereVector = (planet_radius / myPosZAbs) * myPosRelToCenter;
					intX = projectedSphereVector.X;
					intY = projectedSphereVector.Y;
					if (myPosRelToCenter.Z > 0)
					{
						faceNumber = 0;
						extractionY_pointRL = planet_radius + intX;
						extractionX_pointRL = planet_radius - intY;
					}
					else
					{
						faceNumber = 2;
						extractionY_pointRL = planet_radius - intX;
						extractionX_pointRL = planet_radius - intY;
					}
				}
			}

			if (extractionX_pointRL == 0)
			{
				//out-ing
				facenumber = faceNumber;
				pixelPos = new Point(0, 0);

				return;
			}

			if (extractionY_pointRL == 0)
			{

				//out-ing
				facenumber = faceNumber;
				pixelPos = new Point(0, 0);
				return;
			}

			double tmpCalcX = extractionX_pointRL / pixelScalingToIGW;
			double tmpCalcY = extractionY_pointRL / pixelScalingToIGW;

			extractedPoint = new Point((int)tmpCalcX, (int)tmpCalcY);

			//Echo("extractedPoint:"+extractedPoint);
			//Echo("faceNumber:"+faceNumber);
			//Echo("projectedSphereVector:"+projectedSphereVector);

			Point calculatedPoint = new Point(-1, -1);


			//out-ing
			facenumber = faceNumber;
			pixelPos = extractedPoint;

		}

		public void whichFileShouldIlook(int facenumber)
		{

			string tmpStr = "" + facenumber + " is ";

			if (facenumber == 0)
			{
				tmpStr += "back";
			}
			if (facenumber == 1)
			{
				tmpStr += "down";
			}

			if (facenumber == 2)
			{
				tmpStr += "front";
			}
			if (facenumber == 3)
			{
				tmpStr += "left";
			}

			if (facenumber == 4)
			{
				tmpStr += "right";
			}
			if (facenumber == 5)
			{
				tmpStr += "up";
			}

			Echo(tmpStr);

			// 0 is back
			// 1 is down

			// 2 is front
			// 3 is left

			// 4 is right
			// 5 is up
		}



		public class Node
		{
			// voronoi vertex
			public int index;
			public Vector3D position;
			public List<int> neighborsNodesIndex;

			public Node(int index, Vector3D position)
			{
				this.index = index;
				this.position = position;
				this.neighborsNodesIndex = new List<int>();
			}

			public String toString()
			{
				return "index is:" + index + "\n" + "position is:" + position + "\n";
			}

		}




		public class faceRegionPolygon
		{

			public int faceNumber;
			public int regionNumber;
			public List<Point> polygon;
			public Point regionCentroid;

			public faceRegionPolygon(int faceNumber, int regionNumber, Point regionCentroid,
			List<Point> polygon
			)
			{
				this.faceNumber = faceNumber;
				this.regionNumber = regionNumber;
				this.polygon = polygon;
				this.regionCentroid = regionCentroid;
			}

			public String toString()
			{
				return "face is:" + faceNumber + "\n" + "regionNumber is:" + regionNumber + "\n"
				+ "regionCentroid is:" + regionCentroid;
			}

		}

		public bool isThisPointInThisRegion(int roverCurrentFaceNumber, Point currentPointT, faceRegionPolygon fRP)
		{
			if (roverCurrentFaceNumber != fRP.faceNumber)
			{
				return false;
			}
			// TODO:implement this

			// Echo("fRP.polygon.Count:"+fRP.polygon.Count);
			Echo("currentPointT:" + currentPointT);
			bool testResultTmp = InsidePolygon(fRP.polygon, fRP.polygon.Count, currentPointT);
			// Echo("testResultTmp:"+testResultTmp);
			return testResultTmp;
		}

		// eecs umich insidepoly
		public bool InsidePolygon(List<Point> polygon, int N, Point p)
		{
			int counter = 0;
			int i;
			double xinters;
			Point p1, p2;


			p1 = polygon[0];
			for (i = 1; i <= N; i++)
			{
				p2 = polygon[i % N];
				if (p.Y > Math.Min(p1.Y, p2.Y))
				{
					if (p.Y <= Math.Max(p1.Y, p2.Y))
					{
						if (p.X <= Math.Max(p1.X, p2.X))
						{
							if (p1.Y != p2.Y)
							{
								xinters = (p.Y - p1.Y) * (p2.X - p1.X) / (p2.Y - p1.Y) + p1.X;
								if (p1.X == p2.X || p.X <= xinters)
									counter++;
							}
						}
					}
				}
				p1 = p2;
			}

			// Echo("counter:"+counter);

			if (counter % 2 == 0)
				return (false);
			else
				return (true);
		}


		public Point getCentroidPointForThisRegion(int regionNumberPar)
		{
			Point tmpPoint = new Point(-1, -1);
			foreach (faceRegionPolygon faceRegionPolygon2 in faceRegionPolygonList)
			{
				if (faceRegionPolygon2.regionNumber == regionNumberPar)
				{
					tmpPoint = faceRegionPolygon2.regionCentroid;
				}
			}
			return tmpPoint;
		}

		public Vector3D convertPointToV3D(IMyRemoteControl sc, int faceNumber, Point pointToV3D)
		{
			Vector3D resultV3D = new Vector3D(0, 0, 0);

			// Vector3D cubeCenter = detectedPlanet;

			double intX = 0;
			double intY = 0;
			double intZ = 0;

			Vector3D generated_gps_point_on_cube = new Vector3D(0, 0, 0);


			Vector3D centerFacePositionOffset = new Vector3D(0, 0, 0);
			double planet_radius = 60000;


			//Get the PB Position:
			Vector3D myPos = Me.GetPosition();

			Vector3D planetCenter = new Vector3D(0, 0, 0);

			bool planetDetected = sc.TryGetPlanetPosition(out planetCenter);

			Vector3D cubeCenter = planetCenter;

			double distanceToCenter = (cubeCenter - myPos).Length();

			planet_radius = distanceToCenter;

			Point surface_face_offset = new Point(0, 0);

			// surface_face_offset.X = Convert.ToSingle((int)(pointToV3D.X * 2*planet_radius/2048));
			// surface_face_offset.Y = Convert.ToSingle((int)(pointToV3D.Y * 2*planet_radius/2048));
			surface_face_offset.X = (int)(pointToV3D.X * 2 * planet_radius / 2048);
			surface_face_offset.Y = (int)(pointToV3D.Y * 2 * planet_radius / 2048);



			if (faceNumber == 0)
			{
				intX = 1 * (-planet_radius + surface_face_offset.Y * 1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				//intZ = planet_radius * (centroid_surface_lack[1]-2048/2) * planet_radius;
				generated_gps_point_on_cube = new Vector3D(intX, intY, planet_radius);
			}
			if (faceNumber == 1)
			{
				intX = 1 * (-planet_radius + surface_face_offset.Y * 1);
				//intY = -1*(- planet_radius+surface_face_offset.X*1);
				intZ = -1 * (-planet_radius + surface_face_offset.X * 1);
				generated_gps_point_on_cube = new Vector3D(intX, -planet_radius, intZ);
			}
			if (faceNumber == 2)
			{
				intX = -1 * (-planet_radius + surface_face_offset.Y * 1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				//intZ = planet_radius * (centroid_surface_lack[1]-2048/2) * planet_radius;
				generated_gps_point_on_cube = new Vector3D(intX, intY, -planet_radius);
			}
			if (faceNumber == 3)
			{
				// intX = 1*(- planet_radius+surface_face_offset.Y*1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				intZ = -1 * (-planet_radius + surface_face_offset.Y * 1);
				generated_gps_point_on_cube = new Vector3D(planet_radius, intY, intZ);
			}
			if (faceNumber == 4)
			{
				//intX = 1*(- planet_radius+surface_face_offset.Y*1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				intZ = 1 * (-planet_radius + surface_face_offset.Y * 1);
				generated_gps_point_on_cube = new Vector3D(-planet_radius, intY, intZ);
			}
			if (faceNumber == 5)
			{
				intX = -1 * (-planet_radius + surface_face_offset.Y * 1);
				// intY = -1*(- planet_radius+surface_face_offset.X*1);
				intZ = -1 * (-planet_radius + surface_face_offset.X * 1);
				//generated_gps_point_on_cube = arr.array('d', [intX,planet_radius, intZ,]+center_of_planet);
				generated_gps_point_on_cube = new Vector3D(intX, planet_radius, intZ);
			}

			Vector3D generated_gps_point_on_planet = new Vector3D(0, 0, 0);

			//Echo("generated_gps_point_on_cube"+generated_gps_point_on_cube);


			Vector3D generated_gps_point_on_cube_norm = Vector3D.Normalize(generated_gps_point_on_cube);


			generated_gps_point_on_planet = planet_radius * Vector3D.Normalize(generated_gps_point_on_cube_norm) + cubeCenter;

			generated_gps_point_on_planet = Vector3D.Round(generated_gps_point_on_planet, 1);

			resultV3D = generated_gps_point_on_planet;

			return resultV3D;
		}


	}
}
