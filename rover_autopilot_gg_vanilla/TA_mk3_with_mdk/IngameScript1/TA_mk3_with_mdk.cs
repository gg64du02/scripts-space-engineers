using Sandbox.Game.EntityComponents;
using Sandbox.ModAPI.Ingame;
using Sandbox.ModAPI.Interfaces;
using SpaceEngineers.Game.ModAPI.Ingame;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using VRage;
using VRage.Collections;
using VRage.Game;
using VRage.Game.Components;
using VRage.Game.GUI.TextPanel;
using VRage.Game.ModAPI.Ingame;
using VRage.Game.ModAPI.Ingame.Utilities;
using VRage.Game.ObjectBuilders.Definitions;
using VRageMath;

namespace IngameScript
{
    partial class Program : MyGridProgram
	{
		//public PID PowerController = new PID(2, 0, .1, 1);
		public string Animation = "=|=";
		public List<IMyMotorSuspension> Wheels = new List<IMyMotorSuspension>();
		public IMyRemoteControl RemoteControl;
		public IMySensorBlock Sensor;

		public Vector3D myTerrainTarget = new Vector3D(0, 0, 0);

		MyWaypointInfo myWaypointInfoTerrainTarget = new MyWaypointInfo("target", 0, 0, 0);

		IMyRadioAntenna theAntenna = null;

		IMyCockpit theCockpit = null;

		string str_to_display = "";

		List<faceRegionPolygon> faceRegionPolygonList = new List<faceRegionPolygon>();

		string planetRegionPolygonsLoaded = "Pertam";

		List<Point> testPointRegionsLinked = new List<Point>();

		List<Node> nodes = new List<Node>();


		string nodesStringRight = "09ku04|0E3L0w0C|0Jhc090m|0Tf1060708|0Tkz000a0b0e|0Wce0r0z|0Wfk030m0v|0Ye_030t0E|0Ze_030t0E|0Zhz021d1e1f1g1i|0Zk5040q1k|0ZkK040f0Q|0-770s0V|0-9j0j0n|0-kL040f0Q|10lD0b0e0Q|13dt0o0z|158m0k0l|15bf0p0D|198W0d0l0M0N0O|1b850h0L|1d8x0h0j0I|1fga02060v|1i9r0d0B0R|1jec0g0t|1lbu0i0r0K|1njh0a1j|1obW050p0T|1p6Q0c0u|1pej07080o0E|1t6P0s0V0_|1ug5060m1m1o|1z4e010x0S|1A540w0_|1B3e0C0P|1DcM050g0H|1H0F0Z1O1P1R|1H9H0n0G11|1J3y010y0S|1KaB0i0F0G|1Lf207080t1c|1MaC0D0J18|1Nao0B0D10|1OcH0z0T13|1Q8C0l0L0M0N0O|1QaI0F0K16|1Qbe0p0J12|1R860k0I0X|1R8H0j0I0R|1R8I0j0I0R|1S8J0j0I0R|1T2R0y0Y|1Tlp0b0e0f1A|1U8N0n0M0N0O15|1V3E0w0C0-|1Wcu0r0H0U|1Ycu0T0W19|1Z7w0c0u0X|1Zct0U1214|217x0L0V1s|242K0P0Z0-|2a2k0A0Y1Y1Z1-|2i3v0S0Y1S|2i5A0u0x1x|2k9Y0G1118|2l9v0B1015|2rbx0K0W14|2rdh0H1b1c|2ubx0W1217|2v9d0R111F|2vaO0J171a|2vbx14161p|2yap0F101a|2Bcr0U1h1p|2Dau16181n|2Edd131h1l|2Hfv0E131m1o|2MhC091r|2OhC091r|2QhC091r|2ThC091r|2UcS191b1K1L|2UhC091r|2Vjl0q1k1C|2Zj-0a1j1A|2-dv1b1B1D|2_g20v1c1q|30ax1a1t1J|30g30v1c1q|31bD17191t|37g71m1o1y1I|3ehC1d1e1f1g1i1z1C|3f7e0X1u1v1w1G|3fbB1n1p1M|3h6C1s1x24|3h6D1s1x24|3h6E1s1x24|3i5z0_1u1v1w1S|3jgr1q1z23|3jgy1r1y27|3nlb0Q1k21|3pdV1l1H1I|3rij1j1r1W|3Cdb1l1H1K1L|3H8H1F1G1U|3H8I151E1J|3I831s1E24|3Kdv1B1D1N|3Lf61q1B1T|3U9x1n1F1U|3Uco1h1D1M|3Vcn1h1D1M|4ac41t1K1L1V|4gdH1H1Q1X|4m2K0A1_|4m2L0A1_|4mdA1N1V1X|4n2M0A1_|4o4c0-1x1Y1Z1-|4seF1I1X23|4vai1E1J20|4xc11M1Q20|4Bis1C292h|4Ne81N1Q1T|4R3R0Z1S1_|4T3Q0Z1S1_|4U3Q0Z1S1_|4_3M1O1P1R1Y1Z1-22|50bQ1U1V26|59nG1A2z|5b3K1_2n2U|5hfC1y1T25|5l7A1u1v1w1G2k|5lfC232b2p|5rc3202p2N|5rgQ1z292c|5A1a2n|5BhW1W272a|5ChW292j2q|5FfG252d2o|5HgK272e2f2i|5Tgp2b2e2f2g2t|5Tgq2c2d2g2i|5Tgr2c2d2g2i|5Ugq2d2e2f2i2t|61ka1W2l2r|62gW2c2e2f2g2q|62is2a2l2u|687P242m2A2B2D2H|69iF2h2j2u|6f8a2k2D|6k2B22282-|6tfq2b2C2F|6vdd25262E|6vhs2a2i2x|6Blc2h2y2G|6Ca72D2N|6CgI2d2g2w2C|6Giy2j2l2y|6K9v2D2N|6KgU2t2x2S|6Lhn2q2w2J|6PiM2r2u2R2T|6Qn8212G3V|6X9h2k2D|6X9i2k2D|6XfD2o2t2I2K2L|6Y9n2k2m2s2v2A2B2N31|73ds2p2F2O|73dt2o2E39|73mx2r2z34|767J2k2M2W|79fz2C2V30|79hG2x2P2Q32|7afz2C2V30|7bfz2C2V30|7k7P2H2X2Y|7oaD262s2v2D2Z|7rdd2E2Z3b|7Di82J2R2T32|7Ei92J2R2T32|7Jil2y2P2Q34|7Kgx2w2V36|7Kim2y2P2Q34|7O5E222W35|7SfO2I2K2L2S38|7X5V2H2U3d|84812M2Y3d|848h2M2X31|87aV2N2O31|891H2n373g|8eeG30393f|8ofr2I2K2L2_3a|8p9A2D2Y2Z|8phm2J2P2Q33|8qhm323436|8yi-2G2R2T33|8F4G2U373u|8KgC2S3338|8N432-353i|8Of_2V363a|8Pel2F2_3c|8QfY30383f|8-df2O3c3e|8-e0393b3k|92762W2X3h|9acK3b3l3y|9hfA2_3a3j|9j022-3I|9s7m3d3H4p|9v47373s3u|9vfu3f3k3P|9web3c3j3y|9xcR3e3p3S3U3W3Y3-|9Bc93p3q4041424445464748494a4b4c4d4e4f4g4h4i4k4l|9Gaf3o3A3B3H|9Hah3n3q3t|9Jcu3l3m43|9Lb23m3o3r|9Ra_3q3w3x|9S3K3i3E3I|9Vak3o3v3A3B|a04q353i3M|a1aB3t3w3K3L|a2aH3r3v3x|a3bd3r3w3C|a8dw3e3k3S3U3W3Y3-|aau63G4y4z4A4B4C4D4E|ab9R3n3t3J|ac9Q3n3t3J|acbi3x3D3F|ahbx3C3X4041424445464748494a4b4c4d4e4f4g4h4i4k4l|ai3R3s3M3R|akb43C3O3Q|aktx3z3V57|an9d3h3n3N|ar2x3g3s3R|at9w3A3B3N3T|ataq3v3O3T|atar3v3O3T|au493u3E4j|au9p3H3J4o|auaS3F3K3L3Z|aufz3j3_50|awbk3F3X3Z|ax3g3E3I4m|aydm3l3y3_|aza53J3K3L3Z|aAdl3l3y3_|aArx2z3G5i|aBdl3l3y3_|aCbw3D3Q4F4G4H|aDdk3l3y3_|aEb23O3Q3T|aEdk3l3y3_|aIdj3P3S3U3W3Y3-43|aKcB3m3D4n|aNcE3m3D4n|aOcF3m3D4n|aOdf3p3_4n|aPcF3m3D4n|aQcG3m3D4n|aRcG3m3D4n|aScH3m3D4n|aTcH3m3D4n|aTcI3m3D4n|aTcJ3m3D4n|aUcJ3m3D4n|aVcK3m3D4n|aWcK3m3D4n|aXcL3m3D4n|aYcL3m3D4n|a_cO3m3D4n|b0cO3m3D4n|b1cP3m3D4n|b34a3M4m4q|b5cS3m3D4n|b7cT3m3D4n|ba3R3R4j4w4x|bdcY404142434445464748494a4b4c4d4e4f4g4h4i4k4l4F4G4H|bq9z3N4s4O|bB5T3h4q4r|bH5n4j4p4w4x|bI5_4p4v4S4T|bM8Z4o4t4R|bO8m4s4u4L|bT7d4t4v4Q|bZ6L4r4u4U|b-574m4q58595a|b_564m4q58595a|ceuj3z4I4J4K4M4N4P|cfuj3z4I4J4K4M4N4P|cgui3z4I4J4K4M4N4P|chuj3z4I4J4K4M4N4P|ciuj3z4I4J4K4M4N4P|ckuj3z4I4J4K4M4N4P|cmuj3z4I4J4K4M4N4P|crcA3X4n4O|cscA3X4n4O|cucz3X4n4O|cxuk4y4z4A4B4C4D4E4W4Z5l5n5w|cyuk4y4z4A4B4C4D4E4W4Z5l5n5w|cAuk4y4z4A4B4C4D4E4W4Z5l5n5w|cB8t4t4Q4R|cBuk4y4z4A4B4C4D4E4W4Z5l5n5w|cDul4y4z4A4B4C4D4E4W4Z5l5n5w|cIcx4o4F4G4H4_|cIul4y4z4A4B4C4D4E4W4Z5l5n5w|cM8c4u4L4V|cO954s4L4-|d15S4r5d5e5g5h|d25R4r5d5e5g5h|dd774v4V5c|dn7T4Q4U4X|dsur4I4J4K4M4N4P5w|dt7Y4V4Y53|dt894X4-53|dtus4I4J4K4M4N4P5w|du964R4Y5s|dFcU4O505152|dOeW3P4_5m6f6g|dYcH4_5455565t5U5W|dZcG4_5455565t5U5W|d-824X4Y5r|e4cG51525W|e5cG51525W|e8cG51525W|edsP3G5b5k|el4w4w4x5g|en4z4w4x5g|eo4A4w4x5g|essp575f5i|ev6y4U5d5e5h5o|eG5N4S4T5c5j|eG5O4S4T5c5j|eGsp5b5k5p|eI584S4T58595a5j|eI5G4S4T5c5j|eNrG3V5b5p|eQ5e5d5e5g5h5K|e-th575f5l|f0tm4I4J4K4M4N4P5k5q|f6gh505z5D6f6g|fav94I4J4K4M4N4P5w|fk7D5c5r5I5J|fls95f5i5v|fut65l5v5B|fC8T535o5u|fC9o4-5t5u|fD9G51525s5C|fI985r5s5N|fIsh5p5q5x5y|fSvR4I4J4K4M4N4P4W4Z5n5X|g5ss5v5A5B|g6st5v5A5B|gsiW5m5D5E|gtrN5x5y5L5O5P5Q5S|gtsM5q5x5y5O5P5Q5S|gxad5t5F6a|gAgt5m5z5M|gNi-5z5G5H67|gXaJ5C5W5_|h0iy5E5M616263|h0iz5E5M616263|h57b5o5N5R|h67c5o5N5R|h83_5j5R66|hkrr5A5Y5Z5-60|hlgx5D5G5H64|ho7y5u5I5J5T|hxt85A5B5V|hyt95A5B5V|hzta5A5B5V|hA6o5I5J5K5T|hAta5A5B5V|hI6o5N5R66|hPc551525W|hPti5O5P5Q5S5X5Y5Z5-|hSbZ51525455565F5U5_|hVts5w5V6s6I6J6M6N|h-s25L5V60|h-s35L5V60|h-s45L5V60|h_bC5F5W69|i2rV5L5Y5Z5-6j|i4hs5G5H6467|i4hu5G5H6467|i4hv5G5H6467|i7gE5M6162636w|i8ph6e6h|ig2A5K5T6b|igjh5E6162636c|iind6f6i6k6l6o|ilbo5_6a6F|iG9q5C696y|iK1Y666v|iKjD676q6t|iOoO6e6h|iXoC656d6g6n|iYnK505m686g6i6k6l|iYo6505m6e6f6h6n6P|iYo8656d6g6n|j1np686f6r|j1qS606m6M6N|j2nn686f6r|j2no686f6r|jbqH6j6n6O|jips6e6g6h6m6P|jmm9686q6r|jpcZ6u6z6U|jqlg6c6o6E|jtmk6i6k6l6o6T|jtst5X6M6N|jzj96c6x6Q|jAcY6p6z6X|jI3s6b6K7o|jPhG646x75|jQiv6t6w75|jS966a6B6C6D6F|jXcm6p6u6S|k36R6G6L7y7z7A|k48g6y6G80|k48i6y6G80|k48j6y6G80|k4k-6q6H6V|k69x696y7d|k7836A6B6C6D7y7z7A|k9kW6E6Q6R|k9rO5X6M6N|karN5X6M6N|kf5b6v6L8b8c8d|kf5u6A6K88|kkrq5X6j6s6I6J6O|klrp5X6j6s6I6J6O|kpqM6m6M6N6P|kqpN6g6n6O|krjH6t6H6Y|ktkV6H6_72|kAcm6z6X7B|kAmi6r6V7b|kBep6p6Z73|kClE6E6T6_|kDvx6-71|kRdC6u6S6Z|kRjI6Q7277|kVdU6U6X76|kWua6W7071|kZlj6R6V78|l1u16-797J|l3uK6W6-|l6kD6R6Y78|l7fL6U7c7n|l7op7a7v8h|l8i-6w6x77|l9dW6Z7t7u|lgj76Y757b7q7s|lplh6_727b|lpsI707e87|lup1747p7v|lvl_6T77787q7s|lxgK737r7D|lKa06F7T828384|lRs0797m7E|lU0x7i7j7k7l8L|lV0y7i7j7k7l8L|lW0y7i7j7k7l8L|lX0y7f7g7h7j9e9h9t|lX0z7f7g7h7i7k7l8L9e9h|lZ0z7f7g7h7j9e9h9t|l-0z7f7g7h7j9e9h9t|m1qz7e7p7w|m3fM737r7u|m63S6v8a8n|m7pM7a7m7x|m8kG777b|mbgh7c7n7K|mbkt777b|mddj767B7F|mefE767n7K|mgoy747a7H|mjqJ7m7E7O|mopD7p7H7N|mp7g6A6G8j|mq7g6A6G8j|mu7g6A6G8j|muc36S7t7C|myc27B7G7U|mBht7c7K7V|mBrJ7e7w7R|mFdA7t7L7M|mIbK7C7T8z|mJoI7v7x7I|mKoI7H7_8O|mKuC707X|mLgN7r7u7D|mSdw7F7M7P|mSeu7F7L8k8p8t|mVpX7x7O7Q|mWqh7w7N7W7Y|n2cZ7L7U8s|n4pR7N7_8I|n4rT7E7S7Z|n5rU7R8u8w|naaf7d7G7-|nacG7C7P8i|nekB7D8e8-|noqF7O7Z8G8H|nouf7J8185868f8l8v|npqE7O7Z8G8H|ntqT7R7W7Y8m|nu9v7T8283848Y|nupp7I7Q8D|nv8g6B6C6D82838489|nvt_7X879C|nw8v7d7-80|nw8w7d7-80|nw8x7d7-80|nwtZ7X879C|nwt-7X879C|nCtp798185868u|nF6P6L8b8c8d8j|nF7U808r9j|nH4N7o8g8o8q|nH606K888g|nH616K888g|nH626K888g|nHld7V8h92|nHuA7X9z9B|nI5q8a8b8c8d98|nIlq748e8N|nJcM7U8x8y8A|nL7m7y7z7A888r|nLeX7M8B8V|nLuE7X9z9B|nMqX7Z8w8G8H|nN477o8o8q8L|nN4v8a8n9F|nNeZ7M8B8V|nO4u8a8n9F|nO7s898j9R|nOdx7P8A8J|nOeZ7M8B8V|nOsT7S878_|nOuJ7X9z9B|nRr87S8m8_|nUcz8i8K9n|nVcy8i8K9n|nXbB7G8K8W|n-dd8i8s8X|n-ek8k8p8t8C8E8F8Z|n_e88B8J9v|n_pF7_8I8T|o0e68B8J9v|o0e78B8J9v|o0qh7W7Y8m8M|o0qi7W7Y8m8M|o1pO7Q8D8M|o4dQ8s8C8E8F8X|obbU8x8y8z8U|od2u7f7g7h7j8n969799|ofq18G8H8I9d|ohm48h8S9193|ohnH7I8P8Q|oiny8O8S9b|oknM8O8R9g|oon-8Q8T9c|ormx8N8P94|oroG8D8R95|oubZ8K8W9f|ovfr8k8p8t8Zb7|oxaE8z8U8Y|oydj8A8J9s|oBaC7-8W90|oBeX8B8V9v|oFjN7V9ab7|oGrk8u8w9i|oHaB8Y9j9G|oHlM8N929r|oJkL8e91939a|oJlL8N929r|oKmA8S9b9D|oMoQ8T9k9l|oP1V8L9e9y9A|oQ1U8L9e9y9A|oQ5j8g9w9M9N9O|oR1T8L9e9y9A|oRkL8-929o|oRmZ8P949u|oUo78R9k9m|oVqc8M9i9l|oW1G7i7j7k7l9697999h|oXcd8U9n9H|oXnK8Q9m9P|oY1E7i7j7k7l9e9t|oYr08_9d9J|o-9L8990aA|o-oH959c9p9Xa4|o-q7959d9Y|p1o99c9g9-|p2cO8x8y9f9s|p3k-9a9qa0|p4oF9ka4|p7lq9o9rah|p7lu91939q9L|p8c_8X9n9I9K|pb0T7i7k7l9h|pcmY9b9E9S|peet8C8E8F8Za7|pi5E989x9Q|pk609w9Q9R|pl1T969799aJaK|pmvs8f8l8v9C|pn1U969799aJaK|pnvt8f8l8v9C|ppuu8185869z9B9U|pqmv949E9L|pqmz9u9D9V|pr4C8o8q9M9N9Oa1|praU909Hac|psbI9f9Gaq|ptdm9sa7a9aa|ptre9i9Z9_|pudn9sa7a9aa|pum79r9Dan|pv4U989F9T|pw4V989F9T|pw4W989F9T|pwnt9g9S9W|pz5h9w9x9T|pB7f8r9xa8|pCn09u9P9V|pD549M9N9O9Qab|pDu99Ca2a5|pEmS9E9Sap|pHnF9P9-ao|pHou9ka4|pIpJ9la3aXa-|pIr99Jb5ba|pKn-9m9Wa6|pKrY9Ja5ba|pLkA9oagbcbd|pN4k9Fakav|pUue9Uadas|pVoO9Ya4aXa-|pZor9k9p9Xa3a6|p-sT9U9_aB|p_oc9-a4aC|q0em9v9I9Kar|q27i9Raeafa_|q7cK9I9KauaFaI|q8cJ9I9KauaFaI|qb5c9Taiaj|qbap9Gaqay|qbu6a2azaB|qd6ua8ajaO|qe6ta8ajaO|qfk-a0ahaD|qfld9qagam|qg55abalb0|qg5labaeafaO|qh4na1alaL|qj4PaiakaP|qjlhahanaE|qkm89Lamat|qknj9WapaC|qmmE9Vaoat|qrbK9HacaH|qreFa7auaRaTaUaVaW|qsuXa2ax|qumpanapaw|qzcKa9aaaraG|qD3ta1aLb1|qDmlataQbb|qDuUasaz|qI9NacaAb4|qIu4adaxbu|qK9j9jayaZ|qPsTa5adbu|qQnVa6aobk|qTkiagaEbmbp|qTlfamaDaM|qUb-a9aaaGaH|qUcfauaFaIaRaTaUaVaW|qVbWaqaFaIaN|qVbZa9aaaGaH|q-1l9y9AbM|q-1m9y9AbM|r041akavaP|r0ljaEaQblbnbqbr|r2bRaHb4c5c6c7c9cb|r35Gaeafajb6|r443alaLaS|r5lzawaMb8|r9fkaraGbh|ra45aPaYb3|rbfmaraGbh|rdfnaraGbh|refoaraGbh|rgfparaGbh|riq29Ya3b5|rj4qaSb0bs|rj8taAa_bQbRbSbTbUbVbWbX|rjq39Ya3b5|rk8pa8aZbo|rn4_aiaYb6|rq2Iavb2bi|rv2_b1b3bg|rz3raSb2bg|rAbkayaNbQbRbSbTbUbVbWbX|rBqa9ZaXa-bC|rC5saOb0bx|rJhi8V8-bcbd|rQlUaQb9blbnbqbr|rTm1b8bbbL|rTra9Z9_bG|rVmhawb9bf|rWhha0b7be|rXhga0b7be|r_hfbcbdbhbmbp|s0mtbbbjbL|s53ob2b3bt|s5gdaRaTaUaVaWbec5c6c7c9cb|s92rb1bybI|sfo3bfbkcc|sfobaCbjbvbw|sgk6aMb8bF|shhDaDbebD|shk3aMb8bF|si8aa_bxci|sihDaDbebD|sik1aMb8bF|sjj_aMb8bF|sk44aYbtbH|sm3tbgbsby|sosKazaBc3|sxoKbkbzbAbBc2|syoLbkbzbAbBc2|sC5Pb6bobH|sD3jbibtbE|sKpzbvbwbCcr|sKpAbvbwbCcr|sKpBbvbwbCcr|sKqvb5bzbAbBbG|sNi5bmbpbF|sO3jbybJbP|sViHblbnbqbrbDbZ|sWqUbabCc3|t05kbsbxbK|t11HbibNbO|t137bEbOc0|t15jbHbPc4|t3lwb9bfb-b_|ta0HaJaKbN|tb19bIbMch|tc2LbIbJbY|ti4JbEbKc8ca|ttbCaZb4cA|tubDaZb4cA|tvbCaZb4cA|twbCaZb4cA|txbCaZb4cA|tzbDaZb4cA|tCbEaZb4cA|tDbEaZb4cA|tR2VbOc1cdcg|tVkKbFb-b_|tXkRbLbZcc|tXkSbLbZcc|tZ3nbJc1ce|t-3fbYc0cdcg|t_nkbvbwcfcj|u0sgbubGcz|u15wbKclco|u7dHaNbhcA|u9dFaNbhcA|uadEaNbhcA|ub46bPcecp|ubdDaNbhcA|uc45bPcecp|ucdCaNbhcA|uhlvbjb-b_cf|ul2JbYc1ch|ul3Rc0c8cacp|ullzc2ccck|um2IbYc1ch|uo2EbNcdcgcm|uw9kbocn|uFmWc2ckcq|uHlQcfcj|uI63c4cncx|uM2Achcwcy|uM6ocicl|uO51c4cucx|uR4jc8cacecs|uSnPcjcr|uTnXbzbAbBcqct|v14ncpcucv|v1o3crcz|v54rcocs|va3Wcscy|vg1Zcm|vl5Bclco|vt3kcmcv|vut9c3ct|vHc8bQbRbSbTbUbVbWbXc5c6c7c9cb";

		string nodesStringLeft = "0xir050j|0ykF0f0V0Z|0Dl_040c|0MhC0b0h|0Rmd020E0F|0TiN00070n|0Tt10g0A|0Wje050p|10gT0b0k|138j0X0Y1l1o|140G0y|14hi03080l|15lw020f0Q|1a1Q0s0B|1bep0x0C|1cl8010c0V0Z|1lsm060M1g|1pi6030j0l|1qbD1d|1rih000h0n|1vgj080m|1vhu0b0h0z|1ygi0k0x0J|1Aiq050j1a1b|1E390s10|1EjH071q|1H5-191h|1HuE0w0A|1I2G0d0o0I|1I5-191h|1J5-191h|1JvP0H0R0S|1KuF0r0H0W|1LfG0e0m0K|1N180a0G|1Nhq0l0D1e|1NtH060r0N|1O1t0d0G0L|1Oeb0e0U1m|1Ohm0z0J1f|1Omg040O0Q|1Pmf040O0Q|1Q1r0y0B1j|1Wvl0v0w0-|1X2v0s0L1I|1XgM0m0D0T|1YfJ0x0_17|1Z2q0B0I1j|1-r50g2123|21tN0A0W1c|2bnV0E0F1P|2c451119|2dlT0c0E0F1v|2dvN0v0-|2evM0v0-|2hgL0J171f|2jeG0C0_1F|2kkq010f1s|2muy0w0N1p|2nap091213141W|2naq091213141W|2nkp010f1s|2nvu0H0R0S1x|2qfp0K0U1r|2s3B0o111t|2s3C0P1022|2saG0X0Y1d2n|2saH0X0Y1d2n|2saI0X0Y1d2n|2t001A1-|2u021A1-|2ugc0K0T1C1D|2v031A1-|2v4-0q0t0u0P1V|2xj10n1e1q|2xj20n1e1q|2xtF0N1g1w|2Abf0i1213141K|2AiI0z1a1b1k1n|2Bh10D0T1i|2Bt70g1c1L|2I620q0t0u1V26|2Ih41f1k1n1H|2J1u0G0L1y|2Jik1e1i1X|2K7P091z1W|2Kd00C1K1U|2Kii1e1i1X|2L7P091z1W|2LuQ0W1x1J|2MjT0p1a1b1s|2WfF0_1C1D1F|2Wkb0V0Z1q1u|2Y2V101I29|2Zkd1s1v1X|30lr0Q1u1Q1R1S|30tU1c1J1T|30vf0-1p25|311q1j1B1N|317I1l1o2l2r|321l1516181B1E|321m1y1A2f|32g4171r1G|33g5171r1G|341l1A1-2a|35f30U1r1M|37g91C1D1H24|37gU1i1G1O|382q0I1t1N|39ua1p1w1Z|3abU1d1m20|3btj1g1T2123|3ef21F1U24|3j2g1y1I2i|3og_1H1X2t|3qo70O1Q1R1S1Y|3sn_1v1P2u|3so01v1P2u|3so11v1P2u|3ttn1w1L1Z|3ueo1m1M2c|3w4M191h1_|3x9o0X0Y1l1o2n|3yhj1k1n1u1O|3Aot1P282A|3Auc1J1T2b2d2e|3B0l1516181E|3E4G1V2226|3Mb-1K2h2Q|3Mqs0M1L28|3N4m111_29|3Nqr0M1L28|3Tfm1G1M27|3UvL1x2b2d2e|3Z5u1h1_2G|43fd242k2t|48qf1Y21232C|493M1t222g|4b0_1E2f|4fuG1Z2533|4gd-1U2h2k|4guE1Z2533|4guF1Z2533|4i1v1B2a2p|4j3y292j2H|4jdC202c2s|4m2F1N2j2p|4m3m2g2i2K|4reF272c2o|4t6_1z2m2r|4v6V2l2q2x2y2z|4v9u1213141W2Q|4FeI2k2s2w|4M2j2f2i2v|4X6D2m2x2y2z2D2F|4Z7p1z2l|56e62h2o2P|5afo1O272w|5ann1Q1R1S2A2E|5e252p2K|5efg2o2t2L2M|5h6g2m2q2B|5i6g2m2q2B|5j6g2m2q2B|5jnI1Y2u2E|5l6g2x2y2z2G2I|5rqL282J33|5t7m2q2I|5tnr2u2A2N|5u7m2q2I|5z5S262B2H|5D5Q2g2G30|5D7h2B2D2F2O|5Nqc2C2N31484e|5R2P2j2v2T|64eP2w2P2Z|64eQ2w2P2Z|68ne2E2J2S|6e7G2I2W|6ge42s2L2M2R|6kbn202n2_|6qdW2P2Y3g|6tmX2N2V3b|6u2V2K2U2X|6x342T2-37|6Dme2S393b|6E7S2O3c3d3e3f3i|6I2D2T3B3C|6OeJ2R2Z3l|6Qfd2L2M2Y3m|6S4i2U3538|6Vbx2Q3k3I|6Y6x2H353i3r3s3t3u|6-o_2J3p3S3T3U3V3X4e|6_ij343y3M3W3_|70sE2b2d2e2C3w3z|71ix323A3J|754m2-303n3o3s3u|783w37383q|793n2U363x|793Q2-363n3o|79le2V3a3A3Y4h|7dle393G3R3Y4h|7dmH2S2V4g|7e8l2W3h3I|7f8i2W3h3I|7f8j2W3h3I|7f8k2W3h3I|7gcB2R3k3v|7i8d3c3d3e3f3j3E|7j7S2W303j3r3t|7k7V3h3i3K|7kck2_3g4p|7leQ2Y3v3D|7lfW2Z3y3D|7m4035383q|7n3_35383q|7nnC3148|7p3_363n3o3x|7p7m303i|7u4O3035|7u6S303i|7v5D3035|7vdG3g3l4p|7vsW333H|7w3j373q3B3C|7wgb323m3F|7wsX333H|7xjF343944|7y322X3x|7z332X3x|7zfq3l3m3P3Q|7A8g3h3K3Z|7Lga3y3P3Q4b4c|7Lm23a3R3Y|7Mt23w3z3O|7Nar2_3c3d3e3f3L|7PiB343_42|7S7_3j3E4l|7Sao3I3N4B|7VhO323_|7Wak3L3Z4t|7-sJ3H4e4H|80fO3D3F4b4c|81fN3D3F4b4c|8alQ3a3G3Y|8dnV3148|8enW3148|8fnW3148|8fnX3148|8gh-323_|8gnY3148|8hm6393a3G3R4h|8q9x3E3N4l|8qjJ404344|8sil323J3M3W41|8sjj3-4345|8uim3_424b4c|8uiF3J4145|8vjl3-4049|8xjR3A3-46|8BiU40424f|8DjQ44494d|8Dlx4h4m4o|8Eoo2J3p3S3T3U3V3X4e|8Fjq43464f|8H4e|8HgN3F3P3Q41|8IgN3F3P3Q41|8IjR464i4j|8Ooo2J313O484g|8Tji45494j|8Uom3b4e4H|8WlU393a3Y474m|8Xka4d4n4o|94jy4d4f4s|954z|958H3K3Z4r|97lN474h4N|9bka4i4q4s|9ikw474i4q|9jd33k3v4K|9okq4n4o4s|9s8z4l4v4x4M4_5G|9tjW4j4n4q|9vaf3N4F4_|9D2P4D4G4Q4R4W|9D874r4C4L4M5G|9E2Q4D4G4Q4R4W|9E864r4C4L4M5G|9F2Q4D4G4Q4R4W|9F2R4D4G4Q4R4W|9F2S4D4G4Q4R4W|9Ib83L4F4O4P|9O7x4v4x4L4M|9R0n4u4w4y4z4A4E4G4Q4R5r|9T3s4D4G4Q4R4W|9Taw4t4B5p|9Y3F4u4w4y4z4A4D4E4I4J4Q4R4W|a6oe3O4g4T|aa4u4G4J4Q4R|ac3L4G4I4Q4R|acdb4p4O4P4U|ar7i4v4x4C4M|av6K4r4v4x4C4L5G|aPlI4m4S4T|aXcF4B4K54|aYcE4B4K54|bm354u4w4y4z4A4D4E4G4I4J4W|bn344u4w4y4z4A4D4E4G4I4J4W|bolq4N4V4Y|bpnf4H4N4Z|bwfn4K4X5b|bHl74S4-50|bI2K4u4w4y4z4A4E4G4Q4R5r|bNfK4U535c|bOm34S4Z4-|bSm_4T4Y5D|b-lr4V4Y51|c19C4r4t5t|c2kO4V515I|ccll4-505D|chtN555d5h5M5W|cihe4X5o5q5A|ckbU4O4P565758595m|ckuj525K5M5S5W|clbT545758595m5z|clbU54565b5z|clbV54565b5z|clbX54565b5z|cns25d5i|cscZ4U5758595l|csfE4X5j5l|cssg525a5f5g5i|ctpF5i5k5B5C5M|cCsj5d5h5E|cDr25d5i|cGsn525f5E|cQqU5a5d5e5g5B|cWgf5c5n5o5q|cWoF5e5M|d0f55b5c5y|d2aQ54565p5J5L|d4g15j5v5w|d4hW535j5A|d5aE4F5m5u|d5hY535j5A|d92F4D4W5s|dk2G5r5x|dk9Q4_5u5G|dla25p5t6q|dsfI5n5w5y|dwg35n5v5Y5Z|dD2U5s6165|dDf75l5v5F|dEdO565758595F5P|dHiI535o5q5I|dHqb5e5i5H|dKpd5e5M|dPlt4Z515V|dPrG5f5h5H|dXeZ5y5z5N|dY7m4r4v4x4M5t61|dZq85B5E5M|d_iQ505A5T|e0cc5m5P5-|e2uQ555S|e3cg5m5P5-|e7q052555e5k5C5H5W|eeeZ5F5O5X|eheV5N5R6a|ejd-5z5J5L5Q|eqe95P5R60|esef5O5Q68|esu9555K6b|eAiX5I5U5Y5Z|eAiY5T5V6I6J6K|eBj25D5U75|eCpX52555M6369|eIfD5N5_62|eKi05w5T5_|eKi15w5T5_|eQd65J5L606c|eQhM5X5Y5Z6C|eRdw5Q5-68|eS595x5G6p|eUfy5X6a6B|eUoc5W666g|eY1d656e6k|f0215x6467|f2oG63696g|f521656p6t|f9e15R606h6i6j|fapY5W666f|fbeD5O626h6i6j|fdv35S6d|ffdg5-6o6q|ffvF6b|fh1d64|fipY696v6x|fjo163666x|fue3686a6l|fve3686a6l|fwe3686a6l|fy0U64|fye36h6i6j6m6n6s6u6w|fBd_6l6o6s6u6w|fCd-6l6o6s6u6w|fGdT6c6m6n6r|g72j61676t|g9d35u6c6r|g9dH6o6q6z6A|g9eS6l6m6n6z6A|ga1h676p|gbeV6l6m6n6z6A|gbqe6f6y6F|gceV6l6m6n6z6A|gqnR6f6g6D|gsry6v6E6L|gBfi6r6s6u6w6B|gBfj6r6s6u6w6B|gBfr626z6A6C|gJfN5_6B7b|gQnX6x6F83|gQrL6y6G6W6X6Y70|gXqi6v6D6L|gZr-6E6H6U|gZs86G6M6P|g_iF5U6S7677|h0iE5U6S7677|h1iE5U6S7677|h5qn6y6F7c|hfsl6H6Q6Z6-6_|hgbz6R6V79|hjad6R7i7u|hlto6H6Q7l|hnti6M6P7d|hoaM6N6O73|hpit6I6J6K7b7R|hsdd6V7a7e|hwru6G6W6X6Y6Z6-6_70|hxcC6N6T78|hzri6E6U7c|hArg6E6U7c|hArh6E6U7c|hAs16M6U7d|hAs26M6U7d|hAs36M6U7d|hBrf6E6U7c|hD1X747h7U|hD2f747h7U|hEaN6R7j7k|hI1W7172|hIlw5V7f7M|hJk36I6J6K7f7A|hKk46I6J6K7f7A|hNcB6V7r7x|hPby6N7j7x|hRe66T7o7p|hWi36C6S8a|hXqB6L6W6X6Y7083|hXsl6Q6Z6-6_7V7W7X|hYdn6T7n7r|h-kG7576777D|h_uk7l|i13z71727t7-|i2ad6O7k7q|i2ba73797m|i3aw737i7v|i4ua6P7g7s|i6ba7j7v7w|i8dE7e7o7C7E7F|i8dH7a7n7L|i8eM7a7L8g|ica47i7u7G|icd1787e7C7E7F|icu97l7y7Y|ie3Y7h7z7I|ih9E6O7q7T|ioaJ7k7m7G|iobu7m7J7K84|ioci78797J7K|irul7s7N8o8r8t|iy627t7B86|iykm76777D7R|iA6J7z8b8s|iBd07n7r80|iBkG7f7A7M|iCd07n7r80|iDd07n7r80|iEaq7q7v7T|iK1c8789|iK437t7O7P7Q8q|iKci7w7x7Z|iLcj7w7x7Z|iMeo7o7p8g|iMkZ757D8k|iMvl7y7S8G|iN477I868f|iN487I868f|iO497I868f|iQjM6S7A82|iQvP7N8I|iRas7u7G84|iS2h7172|iTs07d7Y88|iTs17d7Y88|iTs27d7Y88|iUsU7s7V7W7X8C|iWcn7J7K7_81|iZ2M7h8d8e|i-cv7Z808v|j0cO7C7E7F7_8g8i8j8m|j2c37Z858v|j6jK7R8a8B|j8qq6D7c88|j9bc7w7T85|jbbe81848v|jf5k7z7O7P7Q8h|jg1v7H898d|jgqP7V7W7X838C|jk1c7H878c|jkiH7b828N|jo6Y7B8y8F|jr13898x|jr1X7-878n|jv2-7-8n8p|jv4K7O7P7Q8h8E|jveF7p7L808i8j8m|jw5d868f8l|jweC808g|jxeB808g|jCle7M8B8Q|jD5e8h8M8P|jIdq808g|jJ218d8e8J|jOuu7y8A8D|jP3l8e8q8U|jP3m7I8p8u8w|jPuv7y8A8D|jQ8v7B8z8X|jQuv7y8A8D|jR3o8q8E98|jRbU7_8185|jS3p8q8E98|jV1b8c8H8J|jW7X8b8z8_|jW828s8y9i9k9l|jYuz8o8r8t8D8G|j-jY828k8K|j_th7Y888D|j_ti8o8r8t8A8C|k04w8f8u8w8P|k26x8b8M8R|k4vl7N8A8I|k50Y8x8S|k5vx7S8G|k71R8n8x8O|k7jU8B8L8T|kcjO8K8N9m|kf5T8l8F9f|khjl8a8L9m|kp1U8J8S8U|kw4F8l8E99|kylj8k8T9d9e9r9s|kC6H8F8_9g|kD1u8H8O|kGl78K8Q9o9q|kI2u8p8O8-|kPaL8W8X|kQbl8V8Y9v9x|kR9i8s8V9y|kRbJ8W8Z9u|kUdA8Y919w|kW2y8U9597|l87r8y8R94|lgg3969OazaCaD|lheh8Z9396|lhsf9b9G9I|lieh919n9E|lj7o8_9c9h|lk358-989t|lkfF90919z|ll2j8-9tas|lp4n8u8w9599|lr4r8P989j|lrux9b9B9N|lttf929a9H|lw74949g9X|lwm38Q9o9p9q|lxm48Q9o9p9q|ly4R8M9j9R|ly6M8R9c9Q|ly7C949i9k9l9U|lz8G8z9h9y|lA4x999f9C|lA8J8z9h9y|lB8J8z9h9y|lBkk8L8N9p|lCdY939J9K|lGkO8T9d9e9p9r9s|lHkN9d9e9m9o9q9r9s|lHkO8T9d9e9p9r9s|lIkO8Q9o9p9q|lIkP8Q9o9p9q|lJ2B9597ao|lPcq8Y9w9A|lQb18W9D|lQcL8Z9u9F|lRb08W9D|lU998X9i9k9l9S|lVfp969O9P|lZcg9u9Dac|l_vT9aa7|m24i9jaoaw|m4bQ9v9x9Aae|m5eH939Pab|m7d19w9Jad|m8rq929La8a9|m8sO9b9I9W|mbs3929H9L|mddo9n9F9M|mddR9n9Mab|merY9G9I9_|mgdt9J9Kar|miuj9a9Ta1|mjfZ909zazaCaD|mkf69z9EaQ|ml6n9g9R9-|mm659f9QaF|mm9e9y9V9Ya3a4|mnun9Na5al|mp8i9h9V9Ya2|mp8l9S9Uat|mpsV9H9Za1|mq6T9c9-a0|mq8k9S9Uat|mqsV9Waiam|ms6G9Q9XaH|msr-9Laham|mt779Xa2aH|mttq9N9Wai|mu789Ua0aB|mv9o9Sa6aKaL|mw9p9Sa6aKaL|mxuB9Ta7aa|mz9va3a4aN|mBv79Ba5aA|mIq_9GafaZ|mJq_9GafaZ|mLuxa5anaJ|mNeo9E9KaP|mPcj9Aadae|mUcq9Facap|mVbH9Dacagajak|mZrya8a9ahaM|m-bBaebn|m-rK9_afav|m-tp9Za1al|m_bBaebn|n0bBaebn|n0tW9Taian|n3so9Z9_ay|n3tZaaalbebgbh|n72N9t9Cb3|n7cxadaubG|nao7aEbkblbF|ned99Maua_|nf0q97bc|nf7X9V9YaBbj|ngd0aparbxbz|nhrZahaya-|nk4I9CaFb4|nklbaEb0bW|nkscamavb2|nlgO909OaW|nlvda7aGaJ|nm7Ga2ataI|nmgO909OaW|nogO909OaW|nomFaqaxb1|np5b9Rawbi|nqvoaAbm|ns7r9-a0aI|ns7BaBaHbj|nsuKaaaAbb|nt8sa3a4bjbB|nv8ra3a4bjbB|nvrjafaZa-|nw9Wa6aOaRaSaXbD|ny9ZaNbnbO|nyePabaTa_|nyf99PaTaUaVb5|nz9-aNbnbO|nz9_aNbnbO|nAeUaPaQaUaVaY|nAeVaQaTaYbP|nAeYaQaTaYbP|nAgOazaCaDb5bV|nBa1aNbnbO|nBeUaTaUaVbabP|nCqPa8a9aMbq|nCrWavaMb2|nEdSaraPbf|nElmaxb1bW|nEmIaEb0bkbl|nFr_aya-by|nH2naob7b8b9bc|nJ4oawb6b7b8b9|nJgbaQaWbQ|nN4qb4bibA|nO2Nb3b4bA|nO2Pb3b4bA|nO2Qb3b4bA|nPeOaYbIbP|nSuxaJbdbm|nT20asb3bobpbrbs|nTuwbbbebgbhbvbw|nWuhanbdbE|nXdBa_bxbzbL|nXufanbdbE|nXuganbdbE|o24XaFb6bY|o27NataIaKaL|o2mZaqb1cBcC|o3mZaqb1cBcC|o6vpaGbbbM|o7aUagajakaOaRaSaXbt|o825bcc7cA|o925bcc7cA|o9qDaZbFbH|oa25bcc7cA|ob26bcc7cA|obaWbnbGcb|odt7bCbEbJ|oduFbdbKbR|oeuGbdbKbR|oicPaubfb_|ois0b2bCbH|ojcNaubfb_|ok4pb6b7b8b9bY|ol8vaKaLbDbO|omsdbubybJ|oo8WaNbBbO|oqtZbebgbhbubR|ovp9aqbqcS|oybAapbtb_|oyr4bqbybZ|ozembabSce|oFsxbubCc8|oGvpbvbwbMb-|oHdIbfbSc3|oIvKbmbKbN|oKvRbMcl|oL8QaOaRaSaXbBbD|oMfbaUaVaYbabX|oOfRb5bXco|oOubbvbwbEbTbU|oPd-bIbLcd|oQubbRb-ca|oRubbRb-ca|oSiPaWbWdf|oSiQaxb0bV|oTfIbPbQcj|oV4obibAc7|oXrcbHc0er|oXugbKbTbUcl|oZb_bxbzbGc1|o-ribZc8cp|p2c1b_c2c3c4c5c6cc|p3c1c1c3cccm|p3c2bLc1c2c4c5c6cm|p4c1c1c3cccm|p6c2c1c3cccm|p7c2c1c3cccm|p83_bobpbrbsbYcy|pcsAbJc0c9|pdsAc8cacp|pdsGbTbUc9cfcgch|pe9LbtccdI|pf9Mc1c2c4c5c6cbcucwcx|pfe2bScecr|pjeabIcdci|prt7cacscz|pst8cacscz|pst9cacscz|pwebcecncr|pwfebXckcn|pDfzcjcocE|pEumbNb-ct|pFc8c2c3c4c5c6cqcx|pGeRcicjcv|pGg3bQckdhdidjdk|pGsmc0c9dJdKdOdPdRdUdVdWdYd-|pMdQcmcrcJ|pMdRcdcicq|pVtIcfcgchctcz|pVtJclcsc_d4|pWakcccx|pWePcncDcZ|p-awcccx|p-c5cccmcucwcU|q23xc7cLd0|q4tycfcgchcsdJdKdOdPdRdUdVdWdYd-|q92nbobpbrbscLcO|q9nGbkblcSdf|q9nHbkblcSdf|qbf1cvcGcW|qbflckcGdhdidjdk|qbvDd8da|qcf3cDcEd9|qh1xcOcRcT|qh1zcOcRcT|qhdWcqcXcZ|qi1DcOcRcT|qi2xcycAcPcQcVcYc-|qj1GcOcRcT|qk1IcOcRcT|qk1NcAcHcIcKcMcNcRcTd6|qk2ycLd0dl|ql2ycLd0dl|qm1LcHcIcKcMcNcOd6|qmocbFcBcCer|qn1LcHcIcKcMcNcOd6|qnc7cxcXd7|qp2zcLd0dl|qwePcDd1d2d3d9|qxcFcJcUdb|qy2DcLd0dl|qye7cvcJd1d2d3|qz2DcLd0dl|qGu7ctdcdedt|qH4bcycPcQcVcYc-dn|qHe9cWcZd5|qIe9cWcZd5|qJe9cWcZd5|qJu8ctdcdedt|qTe8d1d2d3dbdp|qU1kcOcRcTdL|qWbWcUdddA|qYvwcFda|q_facGcWdE|q_v9cFd8dcde|r0dmcXd5du|r0v8c_d4dadt|r1bWd7dmdz|r1v7c_d4dadt|r6j5bVcBcCdg|rcj3dfds|rehQcocEds|rfhScocEds|rhhVcocEds|rihVcocEds|rj2ScPcQcVcYc-dndo|rjc6dddudx|ro4ud0dldT|rz2SdldqdMdNdQ|rAevd5dwdE|rG3ddodrdHdTe6|rH3mdqdT|rHivdgdhdidjdkdy|rMu8c_d4dcde|rOd8dbdmdv|rWdcdudwdB|rWdydpdve3e5|sbcodmdBdG|sei8dse1|smb5dddAdCdD|snb3d7dzdI|sncXdvdxdF|ssbhdzdGe0|stbidzdGe0|stfyd9dpe2|sucYdBeaec|svb-dxdCdDe0|sx4IdqdT|sxaXcbdAdX|szrCcpczeK|szrDcpczeK|sB17d6dZ|sC2pdodSd_|sD2ododSd_|sDrAcpczeK|sErzcpczeK|sF2ndodSd_|sHrzcpczeK|sI2mdMdNdQdZe7|sJ5ldndqdrdHe6|sJrzcpczeK|sKrxcpczeK|sLrxcpczeK|sNaUdIebef|sNrwcpczeK|sQ1NdLdSen|sQrvcpczeK|sS3-dMdNdQe6e8|sSc1dCdDdGe4|sTgtdye2eu|sVfVdEe1e9|s_eudwe9ea|t0c6e0ebed|t0evdwe9ea|t34pdqdTd_|t82FdSe8ez|t92Gd_e7eE|t9fse2e3e5eiej|tad7dFe3e5ee|tcbKdXe4ehepeq|tfcNdFedee|tgcGe4ecem|tjcWeaecek|tlavdXegeA|tnavefelex|txbKebeq|tEf8e9eteR|tFf7e9eteR|tPd2eeeset|tQaregeCeD|tQceedeqes|tR1mdZeoez|tS1lenew|tWb_ebeq|tZc5ebehemepey|u1qvbZcSeK|u4cPekemev|u4e8eiejekeQ|u4gpe1|u8cNeseyeN|ua1jeoeH|ubbbegeCeF|ubcbeqeveF|ue28e7eneH|uh8TefeBeG|um9FeAeDeM|umaBelexeI|una4eleBeI|uo3fe8eJeLeOeZf0|uoc6exeyeS|uv8JeAeWeXf1f2f3|ux23ewezeJ|uxaheCeDeM|uy23eEeHeP|uEqNdJdKdOdPdRdUdVdWdYd-er|uI3xeE|uI9ZeBeIeW|uIc_eveTeU|uK3yeE|uL1UeJ|uPdDeteReT|uReOeiejeQ|uTcpeFeU|uTd9eNeQeV|uVcxeNeSeYe-e_|v0dbeTeYe-e_|vl9teGeM|vm7aeG|vpcQeUeV|vq3_eE|vqcOeUeV|vqcPeUeV|vu41eE|vM6TeG|vP6SeG|vR6QeG";

		string nodesStringUp = "00tf0y0F0G0I0J|0rmA0f|0wnQ070o|0xln080f|0ylm080f|0Cib0a0k0l0m|0Mj40a0c|0Nok02090p|0Rkg03040b|0SoP070d|0TiE05060k0l0m|0-k9080c0E|14jj060b0T|15oX090e0v|18p70d0x|1vlK0103040n|1EdU0h0w|1Gaa0g0r|1Pf90w0K0L|1Pfa0w0K0L|1ThL050a0A|1UhK050a0A|1VhK050a0A|1YlJ0f0u0z|1Znn020q|20oi070s0v|22nE0o0s0N|23a10h0t0C|23o40p0q0H|24a10r12131y|24mX0n1p|26p60d0p0x|27eo0g0i0j0D0Z15|28pT0e0v0y|2aq5000x0M|2dll0n0E0_|2ihv0k0l0m0K0L|2k6S0C0U|2k6T0r0B19|2neo0w15|2Cks0b0z0V|2Cs4000W18|2Ds3000W18|2Eoa0s0N0X|2Es3000W18|2Fs2000W18|2Hhz0i0j0A0Q|2IhA0i0j0A0Q|2Iq00y0O0Y|2VnS0q0H0R|2Zq70M0W0-|2-ni0R1A|30hP0K0L0S16|35nJ0N0P10|3ei-0Q0T1D|3ej10c0S0V|3h3a0B1o|3ijT0E0T0_|3rqK0F0G0I0J0O14|3yoC0H0Y10|3zoE0M0X1W|3HeU0w15|3Lqd0O141b|3Nkf0z0V1a|3Noe0R0X111u1J|3Woc101J|3Z8N0t191t|3-8M0t191t|3_qy0W0-17|42f40w0D0Z161v|48gI0Q151r|4gqt14181q|4hqZ0F0G0I0J171z|4n7m0C12131o|4vkJ0_1p1w1x|4ypU0-1q272829|4z0z1V2G|4A0C1V2G|4A0D1V2G|4B0F1V2G|4B0H1V2G|4C0J1V2G|4C0L1V2G|4D0M1V2G|4F0Q1V2G|4G0Q1V2G|4G0S1V2G|4H0T1V2G|4J6P0U191s|4Jlk0u1a1A|4Lqb171b1z|4Ngi161v1F|4P6U1o1B1V|4S8w12131B1L|4SnQ101J|4Vfs151r1E|4Zkn1a1D1H1I1K|4-kn1a1D1H1I1K|5adR0t1C1Y|5aqj181q2d|5omv0P1p1J|5s7r1s1t1X|5sem1y1E1U|5xjp0S1w1x1H|5Bfl1v1C1F|5Efu1r1E1Z|5Hiv1H2g2h2j|5Hji1w1x1D1G1I1K1R2g2h2j|5Kk71w1x1H|5Tnm10111u1A1S1T|5VjM1w1x1H|5_8j1t1M1N1O1P1Q1X2U3S|618u1L3S|618v1L3S|628w1L3S|628x1L3S|628y1L3S|66iq1H2g2h2j|66nE1J1W2J|66nF1J1W2J|69er1C1Y20|6b6-1c1d1e1f1g1h1i1j1k1l1m1n1s1-|6bnU0Y1S1T21|6n7L1B1L1-|6qdG1y1U1_|6rfx1F2q2u2v2w|6v7E1V1X232x2G|6vdE1Y222n2o2z2A2B2C2D|6BeI1U2n2o2q|6DoD1W2728292P|6Edo1_25262z2A2B2C2D|6I7x1-2G|6KcM252y|6KcN22242b2t2y|6Tdq222b2z2A2B|6Tpj1b212a2c2d|6Upk1b212a2c2d|6Upl1b212a2c2d|6_pC2728292d2e2f2P|70dg25262y|70pD2728292d2e2f2P|70pE1z2728292a2c2e2f|71pE2a2c2d2i2P|71pF2a2c2d2i2P|74h_1G1H1R2k2l|75h_1G1H1R2k2l|76pM2e2f2m2E2F|77hZ1G1H1R2k2l|78hZ2g2h2j2p2I|79hC2g2h2j2p2u2v2w|7aq52i2r3f3h3i3j3k|7eed1_202C2D|7fed1_202C2D|7fhN2k2l2N|7gff1Z202K|7gq_2m2s3f3h3i3j3k|7hrg2r2H3p|7rcN252y|7Fgl1Z2l373839|7Hgk1Z2l373839|7Igj1Z2l373839|7L6s1-2G|7Rdx24252b2t2z2A2B|7Ze51_22262y2C2D|7Ze61_22262y2C2D|7-e71_22262y2C2D|82en1_222n2o2z2A2B2K|83eo1_222n2o2z2A2B2K|85pz2i2S35|86py2i2S35|8b661c1d1e1f1g1h1i1j1k1l1m1n1-232x3l|8jvj2s3w|8njB2k3a3m|8oma1S1T2L30|8tf22q2C2D2V2-2_|8DlE2J313b|8Fc92O2R343E|8Fhz2p2W33|8Hcd2M2Q343E|8Lox212a2c2e2f2T|8NbA2O2R343E|8Qcy2M2Q343E|8RoT2E2F2T35|8Soy2P2S3B|8T9r1L3S|8Tfo2K34363E3S|8Tij2N2X2Y2Z3y3z|8Viq2W3a3r|8Vir2W3a3r|8Vis2W3a3r|8Yfr2K34363E3S|8Zfs2K34363E3S|90m62J3132|91m02L303b|91mb303o3u|93g_2N3738393d3e3g464a|95d52M2O2Q2R2V2-2_3S|95pi2E2F2S3t|96fA2V2-2_3738394z4A|96fB2u2v2w3336|96fC2u2v2w3336|96fD2u2v2w3336|9bjl2I2X2Y2Z3s|9elF2L313c|9ilC3b3n3C|9mhe333P3T464a|9mhf333P3T464a|9nqL2m2r3p|9phg333P3T464a|9pqM2m2r3p|9qqN2m2r3p|9rqN2m2r3p|9sqO2m2r3p|9t5-2G3V|9uk42I3x3M|9wlp3c3G3H|9Bnb323u3F|9BqX2s3f3h3i3j3k3q|9CqX3p3t3w|9Ej92X2Y2Z3s3y3z|9Fjj3a3r3x|9Fpg353q3v|9HmV323o3C|9Hpa3t3B3K|9Lu22H3q4o|9Mjt3m3s3A3I3L|9NiJ2W3r3U|9OiJ2W3r3U|9Ojt3x3L|9Qoo2T3v3D|9XlZ3c3u3G|9-oi3B3F3N|9_b82M2O2Q2R2V2-2_3S|a0oc3o3D3Z3-3_|aalI3n3C3J|abkX3n3J3M|adjG3x3L|aelE3G3H3R|aho_3v3N3O|aijP3x3A3I3Q3U|aikG3m3H3Q|alop3D3K3O|aqoS3K3N3X|avig3d3e3g3W3Y|axkA3L3M3R|azkA3J3Q4w|aF9V1L1M1N1O1P1Q2U2V2-2_343E47|aUhO3d3e3g3W46|aUjs3y3z3L4I|aY6k3l41|aZif3P3T3Y|a_p43O4e4f|b6iw3P3W46|b6nz3F3-3_4048|b7nA3F3Z4045|b7nB3F3Z4045|b8nz3Z3-3_4345|bf6C3V4244|bi6H414447|binv404548|bq5s41424p4q4r|bqnA3-3_404349|bshY333d3e3g3T3Y4a|bv9z3S424C4E4G|bEmA3Z434c|bKnz454g4m|bUhY333d3e3g464b4n|bWhP4a4n4z4A|bWmA484h4k|c3uY4i|c6pn3X4f4H|c7px3X4e4s|c9ne494h4m|can84c4g4u|cauT4d4J|cbr94l4t4x|cdmw4c4u4w|cesa4j4o4x|cknJ494g4v|cmhN4a4b4F|cmts3w4l4J|cs1F445Q|ct1G445Q|cv1I445Q|cvpT4f4t4D|cvpV4j4s4D|czmG4h4k4y|cznB4m4H4L|cAl13R4k4I|cBrO4j4l4B|cCmH4u4L4Q|cFf2364b4_|cGf2364b4_|cUrU4x4K4M4N4O4P4X|c_aj475f5i5k5l|c_ps4s4t4R|d1al475f5i5k5l|d1hl4n4_51|d2al475f5i5k5l|d2oa4e4v4R|d4kV3U4w4Q|d4tN4i4o4K4M4N4O4P|d7tN4B4J4S|d8nb4v4y5B5C|d9tN4B4J4S|dctN4B4J4S|dftO4B4J4S|dgtO4B4J4S|dkk_4y4I4W|dooq4D4H5n|dptP4K4M4N4O4P4T4U4V4X|dqtP4S535s|drtQ4S535s|dstQ4S535s|dEl14Q4-56|dGrl4B4S5758595a5c|dKji4-50545j5m|dLjj4-50545j5m|dMjn4W4Y4Z56|dReN4z4A4F52|dRiu4Y4Z555b|e0g44F5255|e3eH4_515g|eauh4T4U4V5z|ecjk4Y4Z5m|efhP50515h|ekli4W4-5B5C|eupT4X5n5s|eupU4X5n5s|eupV4X5n5s|eupW4X5n5s|eviz505h5m|evpX4X5n5s|ew7w5e5q5x|ez5N5d5u5y|eFby4C4E4G5i5k5l5N67686u|eGef525t5v|eIi0555b5o5p5r|eKbS4C4E4G5f5t|eKiW4Y4Z5m|eLbT4C4E4G5f5t|eLbV4C4E4G5f5t|eLiN4Y4Z545b5j5o5p5r|eOp14R5758595a5c5M|eVi45h5m5v|eWi55h5m5v|eX715d5u5x|eXi55h5m5v|eZr_4T4U4V5758595a5c5z|e-dn5g5i5k5l5R5T|f66g5e5q5y|fffi5g5o5p5r5E5F5G5H5I|fgr45D5J|fo7b5d5q5y|fs6j5e5u5x|fwtQ535s5O|fArQ5D5J|fGm64L5666|fHm74L5666|fLrW5w5A5J5K5L|fSg05v5Z61|fSg15v5Z61|fTg25v5Z61|fUg35v5Z61|fVg35v5Z61|fWqj5w5A5D5M5X|g4se5D5L5S|gcrA5D5K5V|gmnY5n5J5U|gt6X5f636g6u|gutH5z5S6c|gy2m5Q5Y|gy304p4q4r5P62|gzdy5t6i6j6k6n|gAtw5K5O5W|gBdy5t6i6j6k6n|gJnC5M5_66|gPr05L5X60|gRtj5S606l|gSqE5J5V5_|gT0_5P65|gTgF5E5F5G5H5I5-64|gVgJ5Z6164|gVqA5U5X6b|gXrI5V5W6h|gYhA5E5F5G5H5I5-6R6S6U|h2365Q656s|h6745N6768|hggQ5Z5-79|hi145Y6269|hlmQ5B5C5U6a|hx6b5f636g6u|hy6a5f636g6u|hC0L656o|hFmM666b6D|hFoW5_6a6d6e6f|hFv55O6Q|hNqZ6b6h6q|hNq-6b6h6q|hNq_6b6h6q|hP6V5N6768|hPrU606d6e6f6l|hUdE5R5T6n6t|hVdE5R5T6n6t|hWdE5R5T6n6t|icsz5W6h6m|iesz6l6q6T|igeL5R5T6i6j6k6w|ii1C696p6r|ik1M6o6s6x|imr46d6e6f6m6A6B|iq0w6o6x|is3m626p6u|ivdL6i6j6k6w6y|iE3q5f5N67686s6v|iG3q6u6E6I|iHeA6n6t6C|iO0S6p6r6z|j8dL6t6C6F|je0W6x6J|jipJ6q6G77|jjpI6q6G77|jmek6w6y6X|jHm36a6G6R6S6U|k45B6v6H6I|k5d06y6P6Z7t7v|k8nF6A6B6D747576|k95B6E6W6-|ka316v6E6N|kd2r6z6K6L6M|kf2Y6J6N6O7e|kg2X6J6N6O7e|kg2Z6J6N6O7e|kg2_6I6K6L6M6O6Y|kh2_6K6L6M6N6Y7e|khdb6F7v|kkth6c6T|kolq616D6_|kplq616D6_|kpt76m6Q6V|kqlp616D6_|ktt66T70727377|kG5W6H717j|kHf86C7a7b7c7d|kO3c6N6O6-7h|kOdD6F7v|kY3Q6H6Y71|k-k-6R6S6U797B7C7D7F7H7J7K7M|l9uk6V787i|la4p6W6-7n|laul6V787i|lbun6V787i|lgpO6G7f7r|lgpP6G7f7r|lhpQ6G7f7r|ljso6A6B6V7f|llv2707273|lmiv646_7a|lvi06X797l|lNfr6X7l7o7p7q|lPfr6X7l7o7p7q|lQfr6X7l7o7p7q|m60u6K6L6M6O7g|m9rT747576777w|me0H7e7h7k|me2-6Y7g7m|mevh7072737w|mr9m6W7n7t|my0Q7g7u|mEfN7a7b7c7d7o7p7q|mJ307h7u7A|mM7W717j7N|mUfi7b7c7d7l7s|mUfj7b7c7d7l7s|mVfh7b7c7d7l7s|mZo-7475767B7C7D7F7H7J7K7M7Z8182|m-f97o7p7q7v7P|n3bx6F7j7z|n42L7k7m|nedP6F6P6Z7s7y|nts87f7i7x|nCs87w7-|nHcH7v7z7T|nKcf7t7y8384|o54_7m7E7G7I7L7N|o5mD6_7r7V7W7X|o7mE6_7r7V7W7X|o8mF6_7r7V7W7X|o94-7A7R7S|o9mG6_7r7V7W7X|oa4Z7A7R7S|oamG6_7r7V7W7X|ob4Z7A7R7S|obmH6_7r7V7W7X|ocmI6_7r7V7W7X|od4Y7A7R7S|odmJ6_7r7V7W7X|og5M7n7A7Y|p1gG7P7Q85|p2gc7s7O89|p4hA7O8086|pd437E7G7I7L7S8i|pd4L7E7G7I7L7R7U|pgdR7y83848c|pv4P7S7Y8i|pBnR7B7C7D7F7H7J7K7M7Z81828v|pCnS7B7C7D7F7H7J7K7M7Z81828v|pDnT7B7C7D7F7H7J7K7M7Z81828v|pE5K7N7U7_|pEnW7r7V7W7X87|pEr17x8h8o|pF5K7Y8k8l|pFic7Q888b|pGnX7r7V7W7X87|pGnY7r7V7W7X87|pIbK7z7T8F8G8H|pJbK7z7T8F8G8H|pQgQ7O868j|pUhk7Q858a|pXob7Z81828e8f8g8A|pYjp808s8t|q3fN7P8d8j|q5hA868b8n|q6hD808a8s|q8ff7T8d8y8I8K8M8N|q8fs898c8q|q9p2878h95|q9p3878h95|q9p4878h95|qgpQ7-8e8f8g9j|qk4p7R7U8p|qkge85898n|qo5z7_8l8p|qr6b7_8k8B|qIuv8r|qMgp8a8j8q|qOsy7-8r9j|rd4V8i8k8O|rdge8d8n8D|reth8m8o|rqiQ888b8u|rxjZ888v8w|rEiY8s8w8z|rOlE7V7W7X8t8A|rRjI8t8u8X|rYi88z8C8S|rZdh8c8K8M8N|s2ig8u8x8T|s2m5878v8Q|sf7q8l8P8R|sigV8x8E8J8L|skg58q8E8_909192|sngo8C8D8J8L|soaA83848K8M8N8P|sqaz83848K8M8N8P|sraz83848K8M8N8P|sEcX8c8K8M8N|sFh08C8E8S|sGcW8c8y8F8G8H8I9k9l|sGh18C8E8S|sHcV8c8y8F8G8H8I9k9l|sIcV8c8y8F8G8H8I9k9l|sO4x8p8U|t2ai8B8F8G8H9t|t9lP8A8W94|tf6h8B8U|thho8x8J8L8V|tjim8z8V8-|tk5j8O8R|tnhp8S8T93|tulb8Q8Y8Z9o|tvjU8w8Y8Z8-|twjY8W8X9m|txjZ8W8X9m|tHji8T8X9e|tLgJ8D9398|tOgM8D9398|tOgN8D9398|tPgO8D9398|tQgR8V8_9091929b|tTmW8Q959d|tVnx8e8f8g949v9w9x|t_eh9899|t_ei9899|u1f08_90919296979a|u3e296979k9l|u6f6989c|ubgG939c9q|uogk9a9b|uvmQ949u|uHi-8-9f9g9h9i|uMiM9e9q|uMiN9e9q|uMiO9e9q|uNiK9e9q|uOqD8h8o9v9w9x|v3bF8K8M8N999t|v4bE8K8M8N999t|v5ky8Y8Z9n|vckH9m9o9p9r9s|vclC8W9n9p9r9s|vdlC9n9o9u|vehm9b9f9g9h9i|velD9n9o9u|vflE9n9o9u|vBaY8P9k9l|vFlT9d9p9r9s|vYqL959j|vZqM959j|v-qM959j";

		string nodesStringDown = "0JoX060d|0WtM0p0q|0Zqu0f0i|1d4V0e|1e4W0e|1f4Y0e|1jnP0009|1kh60r0z|278-0j0m|2dnU060a0b0c0g|2go3090d0h0y0C|2go5090d0h0y0C|2go6090d0h0y0C|2go_000a0b0c0f|2o5X0304050m0o|2rq1020d0h|2wmW090l|2Oqn0a0b0c0f0i0y0C|2Oqp020h0p0q|2Q9H080u0A|2XlX0l0n|2Xl-0g0k0K1p1t|2Y6W080e0w|2-ju0k0s|304W0e0t|3dt4010i0M|3et5010i0M|3fj3070s0z|3fja0n0r0B|3o520o0w0L|3pc90j0v0x|3pch0u|3q6H0m0t0A|3qcd0u|3ros0a0b0c0h|3uiB070r0B0D0E0F0G0H0I0O|3R9r0j0w0J|3Wjr0s0z0D0E0F0G0H0I0O1G|4foX0a0b0c0h|4Nj80z0B|4Oj70z0B|4Qj70z0B|4Rj60z0B|4Sj60z0B|4Vj50z0B|4-9U0A0N11|59o60l0P0W1p1t|5k1L0t0U|5IuY0p0q1u1v|5Tbm0J0Q0-1A|5Wil0z0B|63o-0K0S0T|6abR0N1A|6l9T0X0_1a|6qoG0P0W0Z|6tpi0P0Y1p|6x2Z0L1s2x|6yiY1018|6Eoo0K0S16|6IaH0R131d|6PoO0T0Z1b|6SoG0S0Y16|6Tcb0N1A|70910R111a|74hO0V12141m|798g0J0_19|7dhG10181m1q1A|7ebo0X1c1e|7gjf1018|7k7E171h1s|7noi0W0Z1b|7o7W15191h|7oje0V12141m|7q8h11171r|7u9g0R0_1o|7voj0Y161p|7Ibj131e1i1j1k|7Sa50X1f1g1o|7SbW131c1l|7Ta51d1i1j1k1L|7Ua61d1i1j1k1L|7W7C15171Q|7Xax1c1f1g1x|7Xay1c1f1g1x|7Xaz1c1f1g1x|7XbX1e1n1y|7Zjv1012181q1E|7-c21l1w1z|859j1a1d1r|89oc0l0K0T1b1t|8ajv121m1N|8b9e191o1P|8c6N0U151S|8eo80l0K1p1B1C1D1U282a2b|8ftw0M2q2w|8gtv0M2q2w|8hcj1n1z1I|8kb81i1j1k1y1J|8kbi1l1x1J|8kcA1n1w1H|8kfv0N0Q0-122m|8lod1t282a2b|8mnJ1t1K282a2b|8noe1t282a2b|8qlC1m1F1N|8slL1E1G25|8ymt0B1F1K|8DcC1z1I1Y|8Fcm1w1H1O|8Hb51x1y1M|8HmH1C1G2k|8JaN1f1g1M21|8MaU1J1L1Z|8NjR1q1E25|8Scj1I1T1Y|8T8Z1r1R1_|8W7Y1h1R1S|8W8I1P1Q2S|8Y7R1s1Q1W|8Ycc1O1X2g|8Zou1t282a2b|91dJ2c2e2m|927K1S202Z|92bI1T1-23|96cG1H1O2c|9bb61M1-24|9bb81X1Z22|9e9b1P212h|9g7e1W2o2Y|9gao1L1_24|9gbe1-23|9gbG1X222d|9maP1Z212i|9uk41F1N38424C|9vhp2G3b3g|9whq2G3b3g|9xob1t1B1C1D1U2n|9y4b2o2u2H|9yo81t1B1C1D1U2n|9zo61t1B1C1D1U2n|9Ad91V1Y2e|9BbM232f2l|9Cd91V2c2j|9EbD2d2z|9Ece1T2j2l|9G9i1_2L2M2N34|9Ga_242r|9Gd92e2g2O|9HmZ1K2n3y|9Jc82d2g2E|9Jem1A1V2p|9KnR282a2b2k3c|9Q6n20292y|9Ueg2m2Q3k|9Ws_1u1v2w3K|9XaX2i2t2v|9Xbd2t2F|9Ya-2r2s2V|9-1T29313Q|9-aQ2r2L2M2N2X|9-vO1u1v2q|a00D0U323337|a26g2o2C35|a3bx2f2F2_|a46a2C2H2I|a46b2C2H2I|a46c2y2A2B2D2K2R|a5692C2H2I|a5cb2l2_39|a6bm2s2z2J|a6hl26273a3e|a852292A2B2D2I|ac562A2B2D2H36|agbj2F2V3i3j|ai662C363u3v|aia22h2v2X|aia32h2v2X|aia52h2v2X|aidw2j2P2W|aidx2O2Q3S|aidE2p2P3k|aj652C363u3v|ak811R2-34|akft|akfD|alb62t2J30|aldu2O3946|aoaJ2v2L2M2N30|ap7l202Z35|ap7N1W2Y2-|aq7R2S2Z3o|aqbP2z2E3m|araO2V2X3d|as1D2u3233374k4n|at0S2x314k4n|av0T2x314k4n|av8U2h2S3f|ay6Z2y2Y3r|az5o2I2K2R3t|aA0V2x314k4n|aAkp254C|aBcC2E2W3l|aEh02G3b3z|aFgy26273a3x|aGog2n3B3E|aJaZ303i3j3C|aLht2G3n3z|aN8Q343o3J|aNiC26273h3n3W4a|aOiD3g4a|aPbw2J3d3p|aPbx2J3d3p|aQeJ2p2Q3V|aRce393m3q|aSbU2_3l3p|aThR3e3g3R|aV8e2-3f3s|aXbO3i3j3m3q|aYbO3l3p3G3I|a-6Z353s3w|b0853o3r3-|b25t363u3v3Q|b25I2K2R3t3w|b35H2K2R3t3w|b36m3r3u3v3U|b5gC3b3D4i|b5mV2k3E4z|b8ha3a3e3A|b9ha3z3D3H|b9ot3c3F3T|bcaN3d3J3L|bcg_3x3A4i|bdo33c3y3F|beo33B3E3X3Y3Z|bfbi3q3L4I|bfhe3A3R4V|bgbh3q3L4I|bi9P3f3C3_|bkt02q3M3N3O3P|boaR3C3G3I3_|bouA3K4344|bouB3K4344|bouC3K4344|bss_3K4p5t|bt392u3t49|bvhI3n3H4a|bwe02P3V46|bwpr3B4d4e|by6n3w4f4w|byea3k3S4t|bBis3g4a|bBoc3F4m4P4Q|bCod3F4m4P4Q|bDod3F4m4P4Q|bG8f3s4045|bKaE3J3L48|bN8e3-414b|bS83404c4q|bTkP254C|bTuS3M3N3O444p|bTvu3M3N3O43|bU9i3-484v|bVdA2W3S4t|bW544f4l4x|bWaz3_454I|bX333Q4l4D|bZi93g3h3R3W4V|b-8j404o4q|b_7N414g4j|b_oY3T4h4m|b_q03T4r4X|c15n3U474y|c17l4c4s4w|c1o-4d4r4N|c2gf3x3D4V|c37O4c4s4u|c412313233375h|c44547494B|c5ou3X3Y3Z4d4W|c712313233375h|c78z4b4v4E|c8ut3P43|c985414b4u|capz4e4h4N|cb7v4g4j4H|cedz3V4656|cf7_4j4q4A|cf8-454o4G|cg6J3U4g5e|ch4L474y4B|ch5l4f4x4F4K4M|cjmt3y4P4Q4R|ck804u4H4J|cn4B4l4x4M|cnkz2538424R515q5P|cr2L494M5d|ct8B4o4G4L|cv5o4y4M|cv8F4v4E4T|cx7P4s4A4O|cBaM3G3I48505m6g|cE8f4A4L4O|cF4S4y4M|cF8i4E4J4S|cG4P4y4B4D4F4K|cHps4h4r4Y|cM7S4H4J4U|cUnc3X3Y3Z4z4_|cVnd3X3Y3Z4z4_|cYlA4z4C5g|c_8x4L4T4Z|d18C4G4S595a5b5c|d27F4O4-55|dkgc3H4a4i|dko84m4_52|dlpO4e4Y5s|dopG4N4X52|dq8k4S4-595a|dr7Q4U4Z54|drnL4P4Q4W58|dtaK4I6g|dtjY4C5j5l5p5w5x5P|dBpu4W4Y5n|dD9D|dE7N4-55595a|dH7I4U545i|dHdp4t5F5I|dJ6I|dJnz4_5g5y5z5X6H|dK8v4T4Z545b5c|dK8w4T4Z545b5c|dK8A4T595a|dL8y4T595a|dU1g4D5h5k5r5A5B5E5K5L|dU6d4w5u5v5C5L|dW9Q|dWlK4R586u|d_134k4n5d|e27E555v5M|e3jd515q|e42-5d5A5B5E5K5L|e4jb515q|e6aU4I6g|eapE525s5R|eb6Q|edkb515q|eij24C5j5l5p5w5x5P|ek3F5d5A5B5E5K5L|ekpY4X5n5W|eqtg3P6A|et5K5e5L|ex6R5e5i5D|eyjv515q|eyjw515q|eAnJ586H|eBnK586H|eG405d5k5r5E5K5L|eI4i5d5k5r5E5K5L|eJ5n5e5L|eK6_5v5H5M|eR4C5d5k5r5A5B5L|eUcX565I6e|eZ6D5H65|f06K5D5G5Q656h|f0d7565F5S6c6q|f2985N5O5Y5Z60|f4515d5k5r5A5B5L|f4535d5e5k5r5u5A5B5C5E5K65|f57V5i5D6r|f99g5J5O5Y|fb9y5J5N5Y5-63|fbiV4C515q5V66|fd695H65|fdpv5n5U61|fidj5I6q|fiih5V5_64|flpp5R6f6k|foiL5P5T62|fpqh5s616o|fqnQ586H|fs985J5N5O5Z5-6063|ft975J5Y5-6d|ft985O5Y5Z60636a6d|ftid5T646m|fu965J5Y5-6d|fuq75R5W69|fviO5V666j|fy9E5O5Y5-686g|fyhS5T5_7d|fz5B5G5H5L5Q6h|fAjq5P626n|fC0z6N7s|fH9y636b6y|fHq9616l6o|fI9j5-6b6d|fI9v686a6v|fKdB5I6q|fQ8W5Z5-606a6p|fSci5F6i6s|fUoZ5U6k6E|fZaa4I505m636y|g06y5H656T|g2cz6e6I6U|g5iZ626m6n|g6pf5U6f6x|g9pY696x6z|gciH5_6j7k|gcka666j6D|gcqp5W696C|gd8R6d6t6v|gddX5I5S6c6w7p7q|gg8g5M6t6P|ggbV6e6Y71|gh8C6p6r6R|ghkN5g6D6J|gj936b6p6F|gjec6q6W77|gkpC6k6l6K|gm9H686g6F|gnq66l6C6K|gntj5t6B7u|gntQ6A|gpql6o6z72|gtkH6n6u6G|gtoL6f6M6Q|gv9z6v6y75|gvkH6D6S737478|gwnc585y5z5X6J6O|gxdj6i6Z6_707a7b|gxna6u6H7e|gxpW6x6z72|gzgQ7c7d7f|gCoL6E6O6Q|gD4n677l7t|gEnp6H6M7e|gF8j6r6R79|gFoW6E6M7g|gH8w6t6P79|gHkw6G7k7O|gI6A6h6V7r|gKcI6i6Y6Z6_70|gL6F6T7h7w|gLeI6w6-777j7-|gNa-71767Q|gQbZ6s6U7m|gRd06I6U7a7b|gRfd6W7-|gSd16I6U7a7b|gSd26I6U7a7b|gUbm6s6X7m|gUq06C6K7g|gVl56G7n7o7O|gWl66G7n7o7O|gX9W6F767N|gXav6X757N|gYex6w6W7z|gYl76G7n7o7O|gZ8k6P6R7h|gZdn6I6Z6_707p7q|g-do6I6Z6_707p7q|h0h26L7d7i|h0h5646L7c|h1n86J6O7K|h8gF6L7i7_|h9ph6Q727F|hg7w6V797w|hggP7c7f7V|hifr6W7-|hmjl6m6S7M|hn4J6N7t7I|hnbI6Y717X|hnlR7374787K7S|holT7374787K7S|hqe26q7a7b7z|hse36q7a7b7z|hv5-6T7v7C|hw2T677x7y7A7B7E7G|hw5v6N7l7v|hxt36A8y8Q|hy5y7r7t7H|hz6_6V7h7C|hB2V7s8d|hC2V7s8d|hEea777p7q7R|hF2V7s8d|hH2W7s8d|hI6E7r7w7U|hInr7J7Y|hJ2W7s8d|hJnU7g7J7P|hK2W7s8d|hK5A7v7U85|hL4d7l85|hNnF7D7F7L7P7Y|hUmA7e7n7o7T|hUnc7J7Y|hVj17k8289|hXaO75767Q|hYlu6S7374787S|i5nJ7F7J7Z|i8b46X7N7W|i9e97z7-83|iam07n7o7O7T|iemu7K7S7Y|ih5Z7C7H87|iogK7i8184|ipbl7Q7X8q|ipbp7m7W83|irnf7D7J7L7T7Z|irng7P7Y8t|itfn6W6-7j7R7_|ixfu7f7-80|iFfE7_8196|iFfH7V808H|iHi27M8489|iMd37R7X98|iNhU7V8286|iO5t7H7I87|i-hW848e8J|j05-7U858l|j6kD8a8b8m|jajw7M828g|jhlF888p8A|jvjQ888h8m|jx5B8d8f8j|jy5k7x7y7A7B7E7G8c8i|jzii868g8n|jA608c8l8r|jCip898e8h|jEir8b8g8Y8Z|jF5k8d8k8u|jF5C8c8k8o|jI5u8i8j8u|jK6n878f8B|jKkG888b8A|jLif8e8M8W|jM5N8j8r8x8z|jNnB8a8s8v8I949M9V|jOad7W8O8V|jS608f8o8C|jTn58p949M9V|jTo67Z8v8U|jW5u8i8k8w|jXnV8p8t8P|jY5x8u8x8z8F8G|jZ5O8o8w8D|jZuA7u8Q|j-5P8o8w8D|k1kM8a8m8E8T90|k56w8l8C8L|k76m8r8B8D|kf628x8z8C8F8G|klkD8A90|kn5V8w8D8_9t9z|ko5U8w8D8_9t9z|kpgr818J8R|kpmB8p949M9V|kqgI868H8K|kxgQ8J8M8R|ky7p8B8N9d|kAhU8n8K8-|kB7D8L8O9d|kB7J8q8N8S|kCn-8v919f|kDr_7u8y|kEgd8H8K9a|kF7O8O8X9l|kFkj8A90|kIoC8t9197|kJac8q93959e|kJiz8n8Y8Z8-|kK7-8S929i|kOja8h8W90|kPjb8h8W90|kQif8M8W90|kT5w8F8G9z|kUjd8A8E8T8Y8Z8-|kZon8P8U9c|l08U8X93959o|l19t8V929J|l1mp8p8s8I9V|l29s8V929J|l3ep80999a|l4oW8U9c9g9s9w|l9do83999e|ledw96989h|lif68R969A|lihJ9q9G|ljoq91979f|lp6Y8L8N9u|lybh8V989m9p|lzof8P9c9r|lApi979w|lIdA999n9E|lX7J8X9j9o|lZ7F9i9l9F|lZhY9q9G|l-7f8S9j9v|l-bf9e9n9H9S9T|l-dv9h9m9p9H9Tam|l_81929i9D|l_be9e9n9H9S9T|l_hY9b9k9x9G9Q|l_op9faaab|m0pq979w|m13d8F8G9z|m56_9d9v9B|m8749l9u9y|mapr979g9sa0a2abaN|mcha9q9Ga3|mk749v9B9N|mm2E8F8G8_9taD|mofF9a9C9O|mp6w9u9y9U|mpfG9A9Pa9|mq869o9F9I|mrec9h9K9La5|mz7D9j9D9N|mAgt9b9k9q9x9P|mCdf9m9n9p|mD8z9D9J9X|mE8_93959I9R|mEev9E9Oa7|mFew9E9Oa7|mHlw8p8s8I9V|mL7j9y9F9U|mOf09A9K9La6|mOg49C9Ga9|mRiE9q9-9_|mS969J9Sa4|mSaK9m9p9RaQb0b1b6b8|mSd59m9n9p|m_7f9B9Na1|n5ll8p8s8I949M9Wac|n7li9V9Zal|n97_9Ia1a4|n9jF9Z9_ae|nblb9W9Yarasat|ncif9Qa3a8|ncj39Q9Yag|nhrI9waN|ni7A9U9Xa4|njr59waN|nohf9x9-bnbrbsbAbC|nv8r9R9Xa1|nweD9Eadam|nxf99Oa7af|nzeZ9K9La6ad|nCiw9-ahbnbrbsbAbC|nEfS9C9Pai|nEmU9rabac|nEn79r9waa|nHmE9Vaaal|nQeXa5a7ap|nSjz9YagaAaB|nVfAa6aiao|nXj69_aeah|nYj0a8agbvbwbx|o0fKa9afao|o17eanauavawaxayazaE|o18wanaPb0b1b6|ogm79WacaC|oheo9na5ap|oi7KajakaJ|opfsafaiap|oCf6adamao|oGqraMaT|oHkH9ZaAaBaC|oIkG9ZaAaBaC|oLkF9ZaAaBaC|oQ6iajaEaJ|oQ6jajaEaJ|oQ6majaEaJ|oQ6najaEaJ|oR6hajaEaJ|oR6kajaEaJ|oRkAaearasataFaHaI|oSkzaearasataFaHaI|oUmaalarasataL|oX3K9zaGaU|oZ58ajauavawaxayazaK|o_kwaAaBaLbE|p33RaDaK|p4kuaAaBaLbE|p5ktaAaBaLbE|p67TanauavawaxayazaO|pb4yaEaGbD|pbmlaCaFaHaIbo|pkpOaqbH|posF9wa0a2aR|ps8vaJaPbD|ps8AakaOb0b1b6|pAaz9Sb0b1b6|pCsqaNaTaZ|pF3Ic6c7|pFrmaqaRbH|pH1HaDbI|pI3Ic6c7|pI3Jc6c7|pJ3Kc6c7|pK3Lc6c7|pKsZaRbJ|pM3Lc6c7|pN3Mc6c7|pN9n9SakaPaQb8|pO9p9SakaPaQb8|pP3Mc6c7|pP3Nc6c7|pQ3Oc6c7|pR3Pc6c7|pS9y9SakaPaQb8|pT3Pc6c7|pT9A9Sb0b1b6|pU3Qc6c7|pW3Qc6c7|pY3Rc6c7|pY3Sc6c7|pY3Tc6c7|pZ3Rc6c7|pZ3Sc6c7|p-3Tc6c7|p_3Sc6c7|p_3Tc6c7|q03Sc6c7|q03Tc6c7|q03Uc6c7|q13Uc6c7|q1hoa3a8bF|q2n2aLbG|q33Vc6c7|q43Vc6c7|q4hpa3a8bF|q5hpa3a8bF|q63Wc6c7|q73Yc6c7|q7hTahbEbF|q7hUahbEbF|q7hVahbEbF|q83Xc6c7|q83Yc6c7|q8hqa3a8bF|qa3Zc6c7|qahqa3a8bF|qb5GaKaObX|qbj-aFaHaIbvbwbxc3|qchqbnbrbsbvbwbxbAbCc4|qim-bobLbMbNb-|qir3aMaTbJ|qq0HaUbPbQ|qrr3aZbHbW|qtoYbLbMbNbR|qvnFbGbKbV|qvnGbGbKbV|qwnJbGbKbV|qx3hbUc2|qI0QbIbUc0|qJ0RbIbUc0|qLp7bKbSbTbV|qRpkbRbWc5|qRplbRbWc5|qZ1dbObPbQb_|rdoAbLbMbNbRbZ|reqfbJbSbTcu|rl66bDbYc6|rs6cbXcscw|ruosbVb-c5|rxm1bGbZc3|rC0WbUc1c2|rG0tbPbQc1|rI0Hb_c0cl|rO2UbOb_cm|rTlHbEb-cdcfch|rVglbFct|r-oHbSbTbZc8c9ca|s15kaSaVaWaXaYa-a_b2b3b4b5b7b9babbbcbdbebfbgbhbibjbkblbmbpbqbtbubybzbBbXcb|s24OaSaVaWaXaYa-a_b2b3b4b5b7b9babbbcbdbebfbgbhbibjbkblbmbpbqbtbubybzbBcbcc|s3oHc5cdcfchcx|s4oHc5cdcfchcx|s5oHc5cdcfchcx|s75lc6c7cgcicj|sl4Tc7cecgcicj|sxlLc3c8c9cack|sz4Qcccmcn|szlMc3c8c9cack|sA5ycbccco|sAlMc3c8c9cack|sC5zcbccco|sD5zcbccco|sGlMcdcfchcCcG|sH0yc1cD|sN2-c2cecpcr|sP52cecocB|sY5Ncgcicjcncq|t12YcmcDcF|t15Tcocscy|t22YcmcDcF|t36bbYcqcw|t4i3c4cvcTcUcW|t4pJbWcxcJ|t6i5ctcGcK|t86kbYcscY|tbp8c8c9cacuczcA|tj5tcqcBcY|tjoWcxcEcV|tkoUcxcEcV|tm4WcncycN|tqnOckcEcR|tr1eclcpcrcM|tvotczcAcCcO|tA35cpcrcNcQ|tAl3ckcv|tHt0cIcL|tRt1cHcP|tTqzcucLcV|tZibcvcTcUcW|u1rdcHcJc_|u30NcDcQ|ui41cBcFcZ|umopcEcSc-|uFsOcIc_|uJ1OcFcM|uRnucCcX|uWoecOcX|v0hPctcK|v4hPctcK|v4pBczcAcJc-|v7hPctcK|vanScRcS|vy59cwcycZ|vL50cNcY|vTpwcOcV|vXrYcLcP";

		string nodesStringBack = "0iao090m|0oug0i0j|0r9q0p0w|0w89060q|0ygQ0b0e|0GfR0e0x|0M7H03070o|0S7b060f|0SbA090k|0TaT00080m|0WcQ0n|0ZhU040P0Q0S|10vt0j|11eL0g0n|12gz04050P0Q0S|1573070h0F0G0H0I|15e70d0n|186T0f191c1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1z1A1B1C1D1E1F1G1H1J|1dua010l0u|1gv9010c0u|1kbF080y0z0O|1pu20i0r0s0t0J|1qah00090p|1rdQ0a0d0g|1s7J060q0v|1sag020m0y0z|1y8v030o0w|1Osh0l1Q1R|1Psg0l1Q1R|1Qsg0l1Q1R|1RuU0i0j0D|1Y7H0o0F0G0H0I0T0U0W|208X020q0T0U0W|22fK050M1e|2kai0k0p0K0L|2mai0k0p0K0L|2qv-0D1y|2rvX0D1y|2rvY0D1y|2uu_0u0A0B0C0E|2wuZ0D0J12|2A6b0f0v191c1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1z1A1B1C1D1E1F1G1H1J|2A6c0f0v191c1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1z1A1B1C1D1E1F1G1H1J|2C6a0f0v191c1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1z1A1B1C1D1E1F1G1H1J|2D690f0v191c1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1z1A1B1C1D1E1F1G1H1J|2EtT0l0E1P|2Nae0y0z0O0R|2Naf0y0z0O0R|2VeJ0x0N0O0V1a|2Yer0M0O|2-bZ0k0K0L0M0N0V|31iw0b0e0Y|33ix0b0e0Y|349E0K0L0X2a|34iy0b0e0Y|379d0v0w0X|389d0v0w0X|38cf0M0O|399d0v0w0X|3a9e0R0T0U0W0Z|3aiC0P0Q0S0-10111314151617181b1d1f|3c9c0X0_1Y|3fiP0Y1I1K1_20|3g970Z1O1T1U1V2i2l|3giT0Y1I1K1_20|3hiU0Y1I1K1_20|3hv20E1y1L|3iiX0Y1I1K1_20|3jiY0Y1I1K1_20|3jiZ0Y1I1K1_20|3ji-0Y1I1K1_20|3ji_0Y1I1K1_20|3kj00Y1I1K1_20|3l5a0h0F0G0H0I1T1U1V|3lfC0M1e1X|3lj20Y1I1K1_20|3m580h0F0G0H0I1T1U1V|3mj40Y1I1K1_20|3ogE0x1a1f|3ogF0Y1e1X|3p540h0F0G0H0I1T1U1V|3q520h0F0G0H0I1T1U1V|3s500h0F0G0H0I1T1U1V|3s510h0F0G0H0I1T1U1V|3t4-0h0F0G0H0I1T1U1V|3t4_0h0F0G0H0I1T1U1V|3u4-0h0F0G0H0I1T1U1V|3v4Z0h0F0G0H0I1T1U1V|3v4-0h0F0G0H0I1T1U1V|3w4X0h0F0G0H0I1T1U1V|3w4Y0h0F0G0H0I1T1U1V|3y4V0h0F0G0H0I1T1U1V|3y4W0h0F0G0H0I1T1U1V|3z4T0h0F0G0H0I1T1U1V|3z4U0h0F0G0H0I1T1U1V|3A4T0h0F0G0H0I1T1U1V|3B4R0h0F0G0H0I1T1U1V|3B4T0h0F0G0H0I1T1U1V|3CvF0A0B0C12|3D4P0h0F0G0H0I1T1U1V|3E4N0h0F0G0H0I1T1U1V|3E4O0h0F0G0H0I1T1U1V|3E4P0h0F0G0H0I1T1U1V|3F4M0h0F0G0H0I1T1U1V|3F4N0h0F0G0H0I1T1U1V|3G4L0h0F0G0H0I1T1U1V|3G4M0h0F0G0H0I1T1U1V|3J4I0h0F0G0H0I1T1U1V|3Jj_0-10111314151617181b1d1N2c2d2g|3K4I0h0F0G0H0I1T1U1V|3Kk10-10111314151617181b1d1N2c2d2g|3-uN121P|3_lV1N2223242526|47lu1I1K1M2p|498-0_1Z2f2i2l|49re0J1L1Q1R|4cr10r0s0t1P1S|4dr00r0s0t1P1S|4jqU1Q1R1-|4o3S0_191c1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1z1A1B1C1D1E1F1G1H1J1W|4o3T0_191c1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1z1A1B1C1D1E1F1G1H1J1W|4o3U0_191c1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1z1A1B1C1D1E1F1G1H1J1W|4A0a1T1U1V2q|4Af-1a1f21|4M9O0Z2a2j|4N8G1O2b2k|4Qqv1S28292h|4-gC0-10111314151617181b1d212c2d2g|4_gB0-10111314151617181b1d212c2d2g|54g71X1_2027|54od1M2e2F|54oe1M2e2F|55of1M2e2F|55og1M2e2F|56oh1M2e2F|58g6212c2d2g2C|59r01-2I|59r11-2I|5ba60R1Y2j|5f8O1Z2f2k|5hgG1I1K1_2027|5hgH1I1K1_2027|5ioM22232425262h|5j931O2b2i|5jgE1I1K1_2027|5joN1-2e2m2n2o|5t9k0_1O2f2k2l|5B9L1Y2a2l|5G8x1Z2b2i|5I9H0_1O2i2j2s|6SoP2h2r2F|6ToP2h2r2F|6UoP2h2r2F|7Djj1N2v2P|7R2q1W2w2D|7ToW2m2n2o2x2y2z2A2B3a|7Wah2l2t2u2C|8a9R2s2D3s|8b9Q2s2D3s|8pjd2p2E2N|8q2C2q3237|8zqb2r2H333536|8Aqc2r2H333536|8Aqd2r2H333536|8Bqe2r2H333536|8Cqg2r2H333536|8Wck272s3K3N3O|8Y6i2q2t2u2G|8Ylk2v2F2R|8Yll22232425262m2n2o2E|9c6B2D2J2K2L2-|9erV2x2y2z2A2B2I333536|9itb28292H30|9m7t2G2Y34|9n7u2G2Y34|9n7v2G2Y34|9pj02N2P3x3z|9pj12v2M2O2Q2Z|9qiZ2N2P3x3z|9riX2p2M2O2Q2S|9riY2N2P3x3z|9Blh2E2Z39|9Xil2P2T2U2V2W2X313h3i|9Zhs2S3i|9-hn2S3i|9-ho2S3i|9-hq2S3i|9-ht2S3i|a1892J2K2L3b3j|a6jP2N2R3c|a86z2G2_32|ab6B2-343d3e3f|aluk2I3u|atgL2S3i|az5_2w2-38|azs92x2y2z2A2B2H3u|aA7b2J2K2L2_3b|aAsa2x2y2z2A2B2H3u|aBsa2x2y2z2A2B2H3u|aM352w3H3I3S|aM66323d3e3f3p|aPn42R3a3l3m3n3o|aPou2r393C|aX7g2Y343r|aXkf2Z3g3y|a-6E2_383r|a-6F2_383r|a_6G2_383r|b1kr3c3k3M|b2hq2S3i3B|b5ha2S2T2U2V2W2X313h3v|bc8F2Y3q3w|bfl83g3l3m3n3o3G|bfl9393k3F|bfla393k3F|bflb393k3F|bflc393k3F|bp5T383t3H3I|bs993j3s4p4q4r|bx7e3b3d3e3f3t|by9A2t2u3q3K3N3O|bB7f3p3r3w|bKsV3033353643|bNgK3i3E3Y|bT7r3j3t4o|c1iw2M2O2Q3y3D|c1jJ3c3x3z3A|c2iv2M2O2Q3y3D|c8jK3y3Q3R|cahJ3h3D3E|cco-3a3P41|cgic3x3z3B3Z|cmhs3v3B4c|cplF3l3m3n3o3G3L|cqlg3k3F3J|cs5j373p4n|ct5k373p4n|cxld3G3M3U|cza12C3s49|czlW3F3P3V|cAkG3g3J3Q|cCa12C3s49|cDa22C3s49|cEnu3C3L3X|cFki3A3M3T|cJjt3A3Z40|cL2n374k|cMkl3Q3-40|cTle3J3V3W|cVlD3L3U3X|d6l43U3_4e|dfm23P3V4d|dhg23v494c|dliP3D3R4s|dlki3T3_42|dokX3W3-4j|dsk03R3T42|dspT3C4a4b4C|duk13-404w|durR3u44454647484a4b|dwr-434f4g4h4i|dwr_434f4g4h4i|dws0434f4g4h4i|dws1434f4g4h4i|dys5434f4g4h4i|dAad3K3N3O3Y4p4q4r|dCrz41434N|dCrA41434N|dDgU3E3Y4s|dDlY3X4e4m|dFlx3W4d4j|dFsn44454647484B|dFso44454647484B|dGsq44454647484B|dHsr44454647484B|dIkZ3_4e4l|e02o3S4u|e0kZ4j4t4x4y4z|ejm64d4v4C|er6T3H3I4o4A|er743w4n4p4q4r|ew7K3q494o|ex7L3q494o|ex7M3q494o|eCiC3Z4c4w|eCl14l4v4E|eD2C4k4A|eDlf4m4t4H4I4J|eZj0424s4x4y4z|f5jc4l4w4E|f6jd4l4w4E|f6je4l4w4E|fe2-4n4u|fetZ4f4g4h4i4D4N|finy414m4H4I4J|fsuE4B4F4G|ftk84t4x4y4z4H4I4J|fuv44D4G|fBv44D4F4K|fGmq4v4C4E|fGmr4v4C4E|fGms4v4C4E|g4v44G4N|g7cd4O4R4S4T|g7ce4O4R4S4T|g9uE4a4b4B4K|gnd64L4M4P4Z|gqey4O4Q5u5v|gqeF4P4U4V|gyaP4L4M4S4T4W|gPb94L4M4R4Y|gQba4L4M4R4Y|hdgS4Q4V56|hgfn4Q4U54|hiap4R4X59|hwba4W4Y5j|hwbm4S4T4X4Z|hLcw4O4Y5D5E|i0qn50575m5n|i3rv50535h|i4rj4-4_5e|i56w5262|i56x515d5k5t62|ibs_4_555h|iffo4V5658|ijte535p|iohP4U545f|ioqm4-5e5o|ipfn545b5u5v|iz9H4W5a5j|iD9r595g5T|iEfx585z5A5W5X5Y6i|iJuO5q5r5s5w|iK7U525i5k626b|iNqU50575M|iOie565l5B|iR8i5a5i5R5S|iRrB4_535M|iS855d5g62656b|iTan4X595x|i_72525d62|j1iQ5f5C6f|j1oD4-5o63|j2oC4-5o63|j4pj575m5n5N|j6tb555q5r5s5V|j9t_5c5p5w|j9u15c5p5w|j9u25c5p5w|jd5v5262|jedc4P585F|jfdb4P585F|jkuO5c5q5r5s5y|jlb45j5D5E64|jruX5w5U|jtfk5b6i|jxgw5b5B6c|jxgA5f5A69|jxk95l5J5K5L6j|jycK4Z5x5F|jzcL4Z5x5F|jAcN5u5v5D5E5G5H5I|jCcO5F5O5P5Q6r|jDcP5F5O5P5Q6r|jEcP5F5O5P5Q6r|jGlO5C6372|jHlQ5C6372|jHlR5C6372|jJrd5e5h5N|jLrd5o5M6a|jPcX5G5H5I6i6B|jQcX5G5H5I6i6B|jQcY5G5H5I6i6B|jR8I5g5-6v|jS8I5g5-6v|jV9m5a5-5_|jVuP5y5Z61|j_sW5p6061|k2eX5b6i|k3eW5b6i|k4eW5b6i|k5v25U6d|k79a5R5S5T6u|k79J5T686n6o|kcsH5V6a6h|ketR5U5V6d|kh6651525d5i5k5t6b|khni5m5n5J5K5L6p|kiaD5x66676e|kp705i6b6w|krae64686g|ksad64686g|ku9-5_66676k6l|kugW5B6c6f|kwrJ5N606V|kA6f5d5i62656-|kBgc5A697475767778|kDuw5Z61|kHaE646g6t|kPhn5l696q|kSak66676e6m|kXt9607A7R|kYdR5b5z5O5P5Q5W5X5Y6S|kZjz5C6E72|l19D686m6n6o|l19E686m6n6o|l1ad6g6k6l6y|l29x5_6k6l6x|l39w5_6k6l6x|l5nI636s6G6H6I6L|ldhs6f6z7475767778|ljbA5G5H5I6t6A|llnD6p6D6F6K6Q6T6U70|lmaZ6e6r6C|ln8R5-6v6x|lo8z5R5S6u6w|lp8u656v7k|lp8-6n6o6u6J|lqay6m6C6X|lshK6q6E81828385|ltbL6r6B6Y|ltbT5O5P5Q6A6S|lwaL6t6y6R|lDnJ6s7I9f|lEj36j6z7l7o7p|lFnK6s7I9f|lGq46p6V7F|lGq56p6V7F|lGq76p6V7F|lH9d6x6M6N6O6P71|lHnK6s7I9f|lHq86p6V7F|lI9d6J6N6P717b|lI9e6J6M6O6X7b|lJ9d6J6N6P717b|lJ9f6J6M6O6X7b|lJnL6s7I9f|lKaN6C6Z6_|lKe26i6B7E|lKnL6s7I9f|lOnM6s7I9f|lPqU6a6G6H6I6L7U7V7W7X|lT4X6-797e|lV9V6y6N6P6Z|lYbF6A6_73|l_a46R6X7b|m05K6b6W7i|m1aY6R6Y7c|m5n96s7h7z|mj9d6J6M6O7C7J|mnkV5J5K5L6j7m|mpc26Y7d7r7s7t|msfm6c6q7E|mufl6c6q7E|mvfk6c6q7E|mwfk6c6q7E|mzfh6c6q7E|mD2N6W7a7e|mE1n797Y|mFa96M6N6O6P6Z7u|mGaY6_7g7j|mHbR737g7n|mI2P6W797Q|mIkv7l7m7o7p8h8i8j8k8l8o|mJbB7c7d7w|mNnd709c9d9e9o|mP626-7q7Q|mPaV7c7v7x|mV7f6w7q7D|mViM6E7f8h8i8j8k8l|mVl8727f7z|mXc87d7r7s7t7w|mYiM6E7f8h8i8j8k8l|mZiM6E7f8h8i8j8k8l|n16i7i7k7S|n1dg737n7G|n1di737n7G|n2dk737n7G|n3af7b7v7J|n3ag7j7u7B|n3bC7g7n7y|n5bh7j7y7B|n8bw7w7x7H|nblF707m8P|nfvA6h7R|njb77v7x7H|nl8i717D7K|nm897k7C87|nneQ6S74757677787G|npph6G6H6I6L7I7U7V7W7X|nreR7r7s7t7E81828385|nsbf7y7B7M|nwpa6D6F6K6Q6T6U7F9k9l|nz9O717u7L|nA9N7C7L7T|nA9O7J7K7N|nCb67H7O7P|nPaw7L7O9G9I9J9L9M9N|nPay7M7N7P|nYbd7M7O9A9B9C9D9E|o1307e7i7-|o1tB6h7A86|o6697q848a|oa9A7K888p8q|obrS6V7F86|ocrS6V7F86|odrS6V7F86|oerT6V7F86|op1k7a7Z7_|or187Y|os2R7Q8089|ot1A7Y808O|ot2C7-7_8W|oBfe6z7G8I|oEfe6z7G8I|oFff6z7G8I|oG5R7S8c8r|oGff6z7G8I|oRs77R7U7V7W7X8g|oW8B7D888b|oX8_7T878d8e8f|p33j7-8c9x9y|p47s7S8b8Q|pc8h878a8s|pf4t848990|pi97888m8D|pj98888m8D|pk98888m8D|pqrX868z8B8C8N|psh_7f7l7o7p8n8o|puh-7f7l7o7p8n8o|pwhZ7f7l7o7p8n8o|pxhY7f7l7o7p8n8o|pyhY7f7l7o7p8n8o|pz9f8d8e8f8p8q8L|pzhX8h8i8j8k8l8o8t8u8v8w8x8E8F8G8H|pzhY7f8h8i8j8k8l8n8t8u8v8w8x|pAal7T8m8A|pBam7T8m8A|pE6b848y8J|pF8o8b8D8T|pJit8n8o8Pau|pJiu8n8o8Pau|pLiy8n8o8Pau|pLiA8n8o8Pau|pMiD8n8o8Pau|pO6s8r9398|pSsG8g8_a2|pTaW8p8q8K8M|pTsH8g8_a2|pUsJ8g8_a2|pX8G8d8e8f8s91|p-fK8n8Iat|p-fL8n8Iat|p-fM8n8Iat|p-fN8n8Iat|p_fy818283858E8F8G8H9v|q2618r909b|q2bl8A959G9I9J9L9M9N|q59a8m8M91|q89p8A8L95|q9r88g97999a9k9l|qc1g7_8W92|qckt7z8t8u8v8w8x9h9i9j|qd7F8a8-93|qeuA8_|qeuB8_|qf7-8s8-94|qfuu8_|qfuy8_|qg1K808O9x9y|qgut8_|qhun8_|qhup8_|qj7Q8Q8T9K|qjue8z8B8C8R8S8U8V8X8Y8Z9F9H|ql588c8J96|ql8P8D8L94|qq0S8Obe|qq758y8Q98|qs8O8T919g|qs9Q8K8M9t9u|qu58909b9m|quri8Nanaw|qv718y939n|qvrj8Nanaw|qwrj8Nanaw|qy5Z8J969Q|qyok7h9f9p|qyom7h9f9p|qyon7h9f9p|qyoy6D6F6K6Q6T6U9c9d9e9q|qA8P949s9S|qAl48P9waD|qBl58P9waD|qBl68P9waD|qBpU7I8N9r|qCpR7I8N9r|qF57969z9U|qF6_989Q9R|qFmQ7h9p9w|qGnn9c9d9e9o9TaYb7|qGph9f9ra-b1b3|qGpJ9k9l9q9X|qM8_9g9t9u9_|qN95959sa6a7a8|qN96959sa6a7a8|qOeJ8I9A9B9C9D9Ea3|qOlz9h9i9j9oa9|qP38898Wa0|qQ39898Wa0|qQ5h9m9U9V|qQeb7P9v9O|qQed7P9v9O|qQee7P9v9O|qRe77P9v9O|qRe87P9v9O|qUuN8_a4|qVdp7N8K9O|qVuO8_a4|qWdr7N8K9O|qWds7N8K9O|qX7S8-9P9R|qXdt7N8K9O|qXdu7N8K9O|qYdv7N8K9O|qYdx9A9B9C9D9E9G9I9J9L9M9Nac|r07-9K9S9Y|r1689b9n9W|r17a9n9K9Z|r18a9g9P9-|r3np9pb7|r54y9m9za0|r65-9z9Waf|r7669Q9V9Z|repP9rasaz|rq7V9P9-a1|rt719R9Wa1|rB8I9S9Y9_|rD8O9s9-a5|rH3l9x9y9Uae|rK7f9Y9Zab|rKu18z8B8Ca4ad|rQeS9vb0b2cw|rTuN9F9Ha2aq|rX8-9_a6a7a8aa|rX909t9ua5ak|rY919t9ua5ak|rY929t9ua5ak|s8lv9wagahaib7|s98La5alax|sa7ba1alam|scbS9OakaU|sju4a2aoaq|sm3da0ajbe|sm5h9Vajap|smlqa9aOaT|snlqa9aOaT|splqa9aOaT|sq54aeafaM|ssaBa6a7a8acay|sv7GaaabaC|sx6DabapaB|sztL97999aaoar|sztMadanaQ|sC5_afamaK|sEu_a4adav|sItAanawaH|sSps9Xa-b1b3bo|s-iv8E8F8G8HauaA|t1jd8t8u8v8w8xataD|t4vnaqaG|t8sm97999aaraI|ta8SaaayaF|ta9Gakaxba|tbqr9XaVaZbs|tciCataXbj|te6GamaLaR|tf7BalaEaJ|tfjz9h9i9jauaT|tg7PaCaFb8|tm8JaxaEaW|tmuWavaSbK|tntkaraPb6|tosrawaPbc|tp7oaCaRbB|tq6iapaN|tq6qaBbd|ts5wajaNb4|ts5AaKaMbb|tslhagahaib7c2|tssvaHaIbI|tsuoaoaSb6|tt7baBaJbd|ttuEaGaQbh|twjyagahaiaDb5|tybAacbVc3|tzqKazbcbA|tA8IaFb8bg|tAiZaAb5bk|tAn89pb7|tAqLazbcbA|tBox9qasbw|tC6ibbbn|tCgxa3bubvbXbY|tCox9qasbw|tDgya3bubvbXbY|tDox9qasbw|tE5faMb9bm|tGjeaTaXbl|tHtLaHaQbf|tJmw9p9Ta9aOaY|tL8paEaWby|tP4Ab4bibm|tP9naybgcb|tQ5LaNa_bt|tQrsaIaVaZbA|tS6VaLaRbn|tW2192aebi|tWtHb6brbJ|tX91aWbabR|tYusaSbrbz|tZ1_b9bebp|t-iIaAbkbZ|t-iKaXbjbl|t_j3b5bkbq|u55mb4b9bt|u66La_bdbF|u9pvasbsbx|ua1Sbic5|ubjgblc0c8|ubtWbfbhbEbH|ucp-azbobG|ud5CbbbmbT|udhpb0b2b_c4|uehqb0b2b_c4|ufoja-b1b3bCbM|uipqbobDbU|uj7_b8bBbR|ukurbhbEbHbP|uqqMaVaZbcbL|ur7JaJbyc6|urosbwbDc9|urp4bxbCbU|uru2brbzbQ|us6QbnbTc7|usq3bsbLbW|usu1brbzbQ|utsPaPbJbO|utt5bfbIbQ|uwu_aGbP|uxqCbAbGck|uynIbwbNbS|uznIbMbSc9|uzsMbIcj|uzuKbzbKc1|uAt_bEbHbJc1|uD8Ibgbych|uDnebMbNcqcr|uE5IbtbFc5|uIpGbxbDbW|uJbdaUb-cv|uLpYbGbUck|uNh3b0b2ci|uOh4b0b2ci|uOizbjcecl|uPbcbVcv|uShIbubvc4ci|uTkpbqc2c8|uUutbPbQ|uVkuaOc0|uWcaaUcw|uWhTbubvb_ce|uX5qbpbTca|uX7mbBc7cdcfcgch|uZ7ibFc6|uZjcbqc0cl|v2nWbCbNcc|v35rc5cn|v49Mbaco|v5nVc9cu|v67Xc6ch|v9i4bZc4|vb8Kc6ch|vc8Mc6ch|vd8QbRc6cdcfcgco|vdhwbXbYb_|vdrTbOcpcs|vfqqbLbWcm|vkj3bZc8|vtqqckct|vx5bca|vz92cbch|vAsgcjcs|vCnhbScu|vEnibScu|vGrEcjcpct|vOrBcmcs|vRnrcccqcr|vUaMbVb-|v-eta3c3";

		string nodesStringFront = "001i0b0i|01ff0d1E|09lV0n0Y|0lsh051v|0n520g0j|0nsh032m2q2r2M2N|0o520g0j|0oho0k0t|0p520g0j|0y4p0a0c|0R4a090c0B|0U1M000A0C|0V4u090a0j|0VfW010f0h1d1f1h|0WdI0w0O0P|0Wg60d0x|0X5p0406080l0m11|0Xg70d0x|0Z1a000p0C|0Z4y0406080c0E0F0G|0ZhS070t0y|0_620g|10630g|10mq020r12|10m-0r0u|12130i0U|12jR0z131415|12mu0n0o0I|142K0A1k|15gZ070k0v|15m_0o0I0J0K|17gW0t0x0T|18cM0e0H|19gz0f0h0v0Q|19iu0k0V|19ke0q0_|1b2q0b0s0D|1b3_0a0E0F0G1k|1c1x0b0i0M|1d2o0A0M10|1g4D0j0B11|1h4D0j0B11|1i4D0j0B11|1icN0w0L0W|1imT0r0u171a|1knI0u0Z|1lnJ0u0Z|1ocR0H0O0P1e|1p1H0C0D0R|1t9m0-|1vdZ0e0L1y|1wd-0e0L1y|1xgq0x1d1f1h1i|1z1G0M0S0X|1A1H0R101w|1Ch40v181j|1D150p0X|1FiK0y161m1o1t|1Hce0H0-1N|1J1f0R0U1I|1Jl5020_19|1Jn-0J0K1b1v|1K9m0N0W2g|1Lk20z0Y131415|1N1Z0D0S1p|1N4T0g0E0F0G1S|1Pmg0n171a1g|1QjH0q0_16|1QjI0q0_16|1RjG0q0_16|1TjA0V1314152l2o2p|1VmZ0I121b|1WhH0T1m1o1t1D|1Wlc0Y1g1H|1Wm-0I121b|1Wm_0Z171a1c|1Xm_1b1B2b|1YfK0d0Q1C|1-d50L1J1N|1-fJ0d0Q1C|1-m712191l|1_fI0d0Q1C|20gJ0Q1j1z|20gK0T1i1n1s|243w0s0B1r|2am91g1B1H|2civ0V181Q|2dgL1j1z1A|2div0V181Q|2e20101q1u1w|2e3y1p1r1P|2e3z1k1q1u1U|2egM1j1z1A|2eiu0V181Q|2f3w1p1r1P|2fpr030Z20|2g1Y0S1p1x|2h1X1w1I1L|2jeo0O0P1J1K|2jfV1i1n1s1C|2jgS1n1s1D21|2nmn1c1l23|2rfq1d1f1h1z1E|2rhp181A1M|2tfn011C1F|2ufn1E1G1K|2vfp1F1V2P|2vli191l1X1-1_|2w1k0X1x1Z|2we31e1y25|2wf51y1F2W|2x1X1x1O2829|2AhA1D1R2f|2Bcz0W1e1W|2L2i1L1P2829|2N2Y1q1u1O2B|2Nir1m1o1t1R2k|2Oib1M1Q2n|2R50111T1U|2R6l1S2g|2X4J1r1S2X|2Ygd1G212Q2R2S|2-cu1N272y|2-la1H2224262l2o2p|2-ma222324262s|2_1b1I2j|2_la1H2224262l2o2p|30l91H2224262l2o2p|30oz1v2b3P|31gt1A1V2a2c2d|31la1X1Y1-1_2s|31mJ1B1Y2e|32la1X1Y1-1_2s|33dK1J272T2U2V|33la1X1Y1-1_2s|34dI1W252O|351E1L1O2i|371D1L1O2i|37gz212h2F2G|37n31c202e|38gA212h2F2G|39gB212h2F2G|39mX232b3c|3bhr1M2h2n|3c8V0-1T2H|3dhl2a2c2d2f2F2G|3f1s28292j2B|3i1j1Z2i3A|3ij71Q2t2I2J2K|3ijz161X1-1_2t|3irB052z2A2C4748|3jhS1R2f2I2J2K|3jjy161X1-1_2t|3kjy161X1-1_2t|3krB052z2A2C4748|3lrA052z2A2C4748|3ml81Y2224262E|3ojx2k2l2o2p2w|3oum2L2Y|3pun2L2Y|3qjy2t2E3B|3qun2L2Y|3rbV1W2D37|3vrC2m2q2r3g3i|3wrC2m2q2r3g3i|3y2M1P2i2X|3yrC2m2q2r3g3i|3SaZ2y2H3e|3WkY2s2w35|3Zg-2a2c2d2h2_32|40g_2a2c2d2h2_32|499q2g2D3J|4ahN2k2n3d|4bhM2k2n3d|4chM2k2n3d|4duq2u2v2x3438|4etb052Z303338|4ftc052Z303338|4gdT272T2U2V37|4jfx1G2Q2R2S2-|4jfL1V2P2_32|4jfM1V2P2_32|4jfN1V2P2_32|4leK252O2W|4leL252O2W|4meM252O2W|4meN1K2T2U2V2-|4s3f1U2B31|4tvl2u2v2x36|4wta2M2N3f3l|4xf02P2W39|4xh32F2G2Q2R2S3d|4xt92M2N3f3l|4y3d2X3n3A|4yh42F2G2Q2R2S3d|4yt92M2N3f3l|4zuH2L363a|4Dlm2E3c3y|4DuQ2Y343h|4Hd62y2O3e|4Iuc2L2M2N3b|4Me-2-3v3M|4Nuo343b3m|4Ouj383a3f|4PlL2e353P|4Qhm2I2J2K2_323z|4XcZ2D373L|4Yu62Z30333b3r3s|53sm2z2A2C3i3k|5buV363j3m|5crP2z2A2C3g3u|5eu_3h3I|5gsM3g3l3o3p3q|5hsV2Z30333k3C|5juA3a3h3r3s|5k4i313t3E|5lsD3k3u3w|5lsE3k3u3w|5lsF3k3u3w|5qu93f3m3C|5qua3f3m3C|5s4E3n3x3W3Z41|5wr_3i3o3p3q3w|5zes393L3S|5Bs13o3p3q3u3R|5D5F3t3D3-|5HjN353B4C4D|5JhO3d3B3M|5L0D2j31|5LiC2w3y3z|5RtL3l3r3s3F3G|61653x3T3U3V3X3_|643Q3n3Q3W3Z40|64tW3C3K4m|64tX3C3K4m|68vk3I3Y|6avb3j3H3K|6fa12H3O454r4z4J4L4V4Y|6ruE3F3G3I3Y|6ycN3e3v3O|6ygL393z3N|6AgK3M3S4f|6DcJ3J3L4f|6Dnl203c4l|6H3C3E4346|6HrU3w4a4b4c4h|6KfG3v3N4f|6Q6v3D444B|6R5a3D3-44|6R6v3D444B|6S4t3t3E4041|6S6v3D444B|6SuD3H3K4w|6T4u3t3E4041|6T4P3x3U42|6T6u3D444B|6V4t3E3W3Z4143|6V4u3t3W3Z4042|6Y4E3-4149|72443Q404g|785v3T3U3V3X3_4p|7f8S3J4z4J4L4V4Y|7m0t3Q4s4t4u|7opb2m2q2r4a4b4c4d4e|7ppa2m2q2r4a4b4c4d4e|7w4S424i4o|7wrk3R47484h|7wrl3R47484h|7wrm3R47484h|7yoV47484l4E|7zoT47484l4E|7CeJ3N3O3S|7O3I434i4v|7Ssw3R4a4b4c4j4k|7Y3X494g4n|7YsG4h4m4G|7YsH4h4m4G|7_nV3P4d4e4y|84t53F3G4j4k4q4w4x|864d4i4o4R|8k5n494n4p|8k5p444o4B|8ktv4m4w|8l7y3J4z4J4L4V4Y|8o2i464v53|8o2k464v53|8o2l464v53|8q2v4g4s4t4u4Q|8quv3Y4m4q4x|8sud4m4w|8Lnv4l4C4D545556575e|8R7T3J454r4A4F4J4L4V4Y|8V8C4z4F4M|8Y5K3T3V3X3_4p4T|8Ymt3y4y5D|8Zms3y4y5D|8-qW4d4e4G4P|977_4z4A4S|99rW4j4k4E4P|9bax4I4K4N|9fbB4H4J4O|9hbM3J454r4z4I4L4V4W4Y|9ja84H4U4Y|9lcE3J454r4z4J4V4Y5t5U|9m9c4A4S4V|9maO4H4O4U|9naT4I4N4W|9rr_4E4G4-|9s3_4v4R5b5c5d|9u474n4Q4Z4_|9u8A4F4M4V|9v5I4B4X4Z4_|9yar4K4N50|9z9q3J454r4z4J4L4M4S4Y|9Bb64J4O50|9F6y4T5k5m|9F9N3J454r4z4J4K4L4V50|9G4W4R4T5s|9Gr-4P5152|9H4V4R4T5s|9Oae4U4W4Y|a1rR4-5258|a1sn4-515g|a92T4s4t4u595f|a9ob4y5a5G|abod4y5a5G|agoe4y5a5G|anoi4y5a5G|anrD515a5o|ao37535b5c5d6a|apry54555657585e5w5x5y|aq3c4Q595s|ar3d4Q595s|ar3e4Q595s|arok4y5a5G|au28535h5R|azsN525i5o|aB1p5f5j5v|aJsY5g5p5B|aK0A5h5q5u|aQ8F4X5l5r|aS8K5k5n5E|aZ784X5r5z|aZaI5l5t5P|aZrU585g5w5x5y|aZtP5i5A5Q|b20s5j5u|b37G5k5m5F5I|b63U4Z4_5b5c5d5C|b6by4L5n6566|bd185j5q5v|bf1j5h5u5R|bgr35a5o5G|bgr45a5o5G|bgr55a5o5G|bs6E5m5H5J|butB5p5B5V|bCt45i5A5_|bF405s5L6h6i6j6l|bFhI4C4D5U6k|bJ8H5l5K5M5T|bL7z5r5J5K5M|bLp0545556575e5w5x5y6x|bM6h5z5N5O5S|bM7y5r5J5K5M|bQ7t5z5F5I5W5X5Z|bS8u5E5F5I6Q6X6Z|bT5d5C5S6869|bT8t5E5F5I6Q6X6Z|bW6A5H5W5X5Z6c6d6f|bX6B5H5W5X5Z6c6d6f|bYa85n5Y63|bYuk5p5V5-|bZ1L5f5v6a|b-5W5H5L61|b_905E5Y6v|b_hk4L5D6E6F6G|c0u15A5Q62|c27q5J5N5O6c6d6f|c47q5J5N5O6c6d6f|c49K5P5T60|c57q5J5N5O6c6d6f|ckvI5Q6e|cmsA5B626r6s6t|cq9N5Y636v|cz5H5S68697o7p7q7r7s7t7u7v7w|cDtn5V5_67|cGaw5P6064|cQaN6365666y6z6A6B6C|cQbb5t646g|cRba5t646g|cUtq626b6e|cY455L616h6i6j6l|cZ435L616h6i6j6l|c_29595R6m|d5tj676n6o6w|d77s5N5O5W5X5Z6Q6X6Z|d97s5N5O5W5X5Z6Q6X6Z|d9uP5-676u|da7s5N5O5W5X5Z6Q6X6Z|dvb965666q6J|dB325C68696p|dC315C68696p|dD305C68696p|dDkE5D6E6F6G6L6M6N|dE305C68696p|dN2c6a6p|d-sp6b6r6s6t6w|d-sq6b6r6s6t6w|e32D6h6i6j6l6m6D|e4aG6g6y6z6A6B6C6J|e4q95_6n6o6x|e4qa5_6n6o6x|e5q85_6n6o6x|e8us6e6w|e98T5T606V6Y|e9tv6b6n6o6u|eepI5G6r6s6t6K|eia8646q6V6Y|eia9646q6V6Y|eja6646q6V6Y|eka4646q6V6Y|ela3646q6V6Y|es2T6p6H6U6W|eGgN5U6k6I|eHgM5U6k6I|eJgM5U6k6I|eO3i6D7b7c7C|ePgK6E6F6G6L6M6N6T|eQd66g6q6O6P6R6S6_|eYpy6x797d|f2gW6k6I7e7f7h7i7j|f4gY6k6I7e7f7h7i7j|f5gZ6k6I7e7f7h7i7j|fedK6J6-6_707172|fgdO6J6-6_707172|fh7P5K5M6c6d6f7a|fhdO6J6-6_707172|fidR6J6-6_707172|fkf36I737B|fo276D7C|fo8g6v6y6z6A6B6C78|fp266D7C|fp7R5K5M6c6d6f7a|fr8d6v6y6z6A6B6C78|fs7S5K5M6c6d6f7a|fs9n6O6P6R6S727778|fse46J6O6P6R6S7273|ft9a6O6P6R6S727778|fu956O6P6R6S727778|fud_6O6P6R6S6-6_707177|fueg6T6_747576|fweg737y8j8k8l|fxef737y8j8k8l|fyef737y8j8k8l|fzdP6-7071727g|fA856V6Y6-70717a|fJpR6K7l7m7n7Y7Z7-|fK7V6Q6X6Z787x|fT5m6H7o7p7q7r7s7t7u7v7w84|fT5o6H7o7p7q7r7s7t7u7v7w84|fWm96K7k7l7m7n|g2hF6L6M6N7k8b|g2hG6L6M6N7k8b|g3cQ777D7E7F7G7H7I7J7K7L7M|g3hH6L6M6N7k8b|g4hI6L6M6N7k8b|g5hI6L6M6N7k8b|g8hL7d7e7f7h7i7j7N7P7Q7R7S|giq1797d7Y7Z7-|gjq2797d7Y7Z7-|gkq2797d7Y7Z7-|gn6N617b7c7x|gn6O617b7c7x|gp6R617b7c7x|gp6S617b7c7x|gq6U617b7c7x|gq6W617b7c7x|gr6X617b7c7x|gs6-617b7c7x|gs6_617b7c7x|gC7o7a7o7p7q7r7s7t7u7v7w7O|hncQ7475767T8d|hu0I7A7V|hv0a7z7U7V|hveS6T8e8F8J|hx1S6H6U6W7W|hza67g7G7H7I7J7K7L7M7T|hzab7g7G7H7I7J7K7L7M7T|hzac7g7G7H7I7J7K7L7M7T|hB8Y7g7D7E7F7O|hB8Z7g7D7E7F7O|hB917g7D7E7F7O|hC8T7g7D7E7F7O|hC8V7g7D7E7F7O|hC927g7D7E7F7O|hD8R7g7D7E7F7O|hJhv7k8b8D|hK7G7x7G7H7I7J7K7L7M7X|hKhu7k8b8D|hLhu7k8b8D|hMht7k8b8D|hNht7k8b8D|hObJ7y7D7E7F89|hU1c7A7V|hX1g7z7A7U7W868788|hX1Q7C7V83|id7H7O8081828M8N8Q|ierj797l7m7n8r|ifrk797l7m7n8r|igrk797l7m7n8r|ihlD8c8o|ik7C7X8nab|il7B7X8nab|in7A7X8nab|io2i7W8485|iC2E7b7c838f8x8G8H8I|iI1C838687888i|iK1b7V858h|iL1b7V858h|iM1b7V858h|iRcf7T8d8M8N8Q|iRlf8c8o|iVfc7e7f7h7i7j7N7P7Q7R7S8e|iVmk7_8a8g8o8z|iYcC7y898j8k8l|i-f77B8b8F8J|i_2E848G8H8I|j0ml8c8o8C|ja158687888i8m|jc1f858h8G8H8I|jdd17475768d8V|jed27475768d8V|jfd37475768d8V|jg0L8h8U|jj6U8081828L8O8Papaqar|jllp7_8a8c8g8p8q|jtli8o8E9f9g9h|julh8o8E9f9g9h|jysr7Y7Z7-8s8t8u8v8w8Y8Z8-8_909192949697|jBsz8r8yaK|jBsA8r8yaK|jCsB8r8yaK|jCsC8r8yaK|jCsD8r8yaK|jJ2m848G8H8I|jJsV8s8t8u8v8w8A9x9y9z|jKnr8c8C9S9Uac|jLti8y8Bbl|jLtj8Ab0b2|jOn38g8z9k|jUg-7N7P7Q7R7S8R8S8T8W8X9t9N9O|jVkQ8p8q8K9l|jWe67B8e8V|jX1R848f8i8x93|jX1S848f8i8x93|jX1T848f8i8x93|jXe57B8e8V|j_kQ8E989f9g9h|k3608n9maj|k3a37X8995|k4a47X8995|k55Z8n9maj|k55-8n9maj|k5a57X8995|k5gN8D9B9C9D9E9F9G|k5gO8D9B9C9D9E9F9G|k7gL8D9B9C9D9E9F9G|k90I8m939c|k9dT8j8k8l8F8J9i|kagI8D9B9C9D9E9F9G|kbgH8D9B9C9D9E9F9G|kfrm8r9wagahai|kfrn8r9wagahai|khrj8r9wagahai|kirh8r9wagahai|kiri8r9wagahai|kjrf8r9wagahai|kjrg8r9wagahai|kk1c8G8H8I8U9c|kkre8r9wagahai|klak8M8N8Q999a9b9d9i|klrd8r9wagahai|kmrb8r9wagahai|kokK8K9j9v|ksam959e9J9K9L|ktan959e9J9K9L|kuan959e9J9K9L|kv0r8U93|kvao959e9J9K9L|kAao999a9b9daban|kDmc8p8q8K9j|kEmd8p8q8K9j|kFmd8p8q8K9j|kGdX8V959H|kJmh989f9g9h9k|kLmn8C9j9U|kRjC8E9v9M9P9Q|kW518L8O8P9n9o9p9q9r9A|kY4T9m9s9ual|kY4U9m9s9ual|kZ4Q9m9s9ual|kZ4R9m9s9ual|kZ4S9m9s9ual|l93X9n9o9p9q9raaae|l9hr8D9O|la3U9n9o9p9q9raaae|lek5989l9P|lepr8Y8Z8-8_9091929496979Iagahai|llsj8y9V9X9Ya0a2aWaXaY|lnsi8y9V9X9Ya0a2aWaXaY|lqsh8y9V9X9Ya0a2aWaXaY|ly549mafaHaIaJ|lyfZ8R8S8T8W8X9C9D9E9F9G9O|lAfO8R8S8T8W8X9B9R|lAfP8R8S8T8W8X9B9R|lAfQ8R8S8T8W8X9B9R|lBfM8R8S8T8W8X9B9R|lCfL8R8S8T8W8X9B9R|lOe19i9J9K9L9R|lOol9w9Sam|lSdQ999a9b9d9Ha3|lSdR999a9b9d9Ha3|lTdO999a9b9d9Ha3|lUiF9l9P|lVh28D9O|lXgZ8D9t9B9NaC|m5kc9l9v9M9Q9U|m7iM9l9P|m8es9C9D9E9F9G9Has|m9nP8z9I9T9Uac|mjnI9Sacau|mmmp8z9k9P9Sac|mys29x9y9zb4b5b6b7b8bf|mzv1b0b2bHbI|mAs19x9y9zb4b5b6b7b8bf|mBs19x9y9zb4b5b6b7b8bf|mBv0b0b2bHbI|mDu_b0b2bHbI|mEu_b0b2bHbI|mFs19x9y9zb4b5b6b7b8bf|mGu-b0b2bHbI|mHs19x9y9zb4b5b6b7b8bf|mJcJ9J9K9LaRaSbE|mJuZb0b2bHbI|mK28a6a7a8a9aaa-|mK2sa5a9aP|mK2ta5a9aP|mK2ua5a9aP|mL2ya5a6a7a8aaaT|mL2B9s9ua5a9ae|mM9c8081829ead|mMn08z9S9T9UaDaEaF|mX98abatay|mY399s9uaaal|mZ5W9AaoaL|m-pL8Y8Z8-8_9091929496979wam|m_pL8Y8Z8-8_9091929496979wam|n1pL8Y8Z8-8_9091929496979wam|n46U8L8O8Pakao|n577ajapaqarbN|n73q9n9o9p9q9raeaHaIaJ|n7pK9IagahaiaB|n8az9eayaRaS|nb6IafajaL|nd8q8nakat|nd8r8nakat|nd8s8nakat|nef29RaCbR|nh8SadapaqaravawaxazaAaVbkbm|njp49TaBaDaEaF|nk8Satbkbm|nl8Satbkbm|nn8Satbkbm|nna0adanb9bbbc|no8Satbkbm|np8Satbkbm|nqpOamauaK|nsfl9OasaU|nsnxacauaG|nunAacauaG|nvnAacauaG|nznDaDaEaFaMaNaObq|nF4u9AalaL|nF4v9AalaL|nF4w9AalaL|nHq28s8t8u8v8waBaWaXaY|nK5FafaoaHaIaJ|nLnVaGaQbo|nLnWaGaQbo|nNnYaGaQbo|nV24a6a7a8aTa-|nWoeaMaNaOb1bgbhbi|nZbka3anb9bbbc|n-bka3anb9bbbc|o228a9aPaZa-bd|o7fUaCa_c4|oc9Watbkbm|ogqk9x9y9zaKb1|ohqk9x9y9zaKb1|oiql9x9y9zaKb1|ol25aTa-|on1Ka5aPaTaZbd|oogkaUbFbQ|optw8B9W9Z9-9_a1a4bD|orqnaQaWaXaYb3|ortv8B9W9Z9-9_a1a4bD|otqob1b4b5b6b7b8ba|oyqP9V9X9Ya0a2b3be|ozqQ9V9X9Ya0a2b3be|ozqS9V9X9Ya0a2b3be|oAqU9V9X9Ya0a2b3be|oAqV9V9X9Ya0a2b3be|oCbbayaRaSbkbm|oCqjb3bjbM|oEbbayaRaSbkbm|oFbbayaRaSbkbm|oI1TaTa-|oUrSb4b5b6b7b8bfc5|oXsj9V9X9Ya0a2bebl|p3oWaQbjbn|p3oXaQbjbn|p3oYaQbjbn|p4pfbabgbhbic9|p6baatavawaxazaAaVb9bbbcbE|p6sM8AbfbpbsbtbubwbxbzbA|p7bbatavawaxazaAaVb9bbbcbE|p7ovbgbhbibobP|p8onaMaNaObnbr|p8sOblbBbCc5|p9nYaGbybU|p9olbobybK|p9sPblbBbCc5|p9sQblbBbCc5|pasRblbBbCc5|pbjgbFbY|pbsSblbBbCc5|pbsTblbBbCc5|pcocbqbrbG|pcsUblbBbCc5|pcsVblbBbCc5|pdsVbpbsbtbubwbxbzbAbCbWc5|pdsWbpbsbtbubwbxbzbAbBbDbW|pftab0b2bCbHbI|pobka3bkbmca|pvhwa_bvbTbVbY|pxo8bybOb_|pEtX9W9Z9-9_a1a4bDbJ|pFtY9W9Z9-9_a1a4bDbJ|pMu7bHbIcm|pVosbrbLbP|p_oqbKbOc2|q2qabac0cc|q56EakbSdf|q5o7bGbLb_|q6oAbnbKc2|q8gHa_bVc4|qbe0ascgcr|qi5JbNcfdy|qjkrbFbY|qjmCbqbZcb|qmhzbFbQcK|qmsebBbCc7dn|qn1jcf|qnkubvbFbTb-c1|qnmobUb-cF|qolAbYbZei|qon_bGbOc8|qppDbMc3cc|qrkrbYcHeo|qrolbLbPc6|qvpjc0chcj|qwfGaUbQcg|qwqXbebpbsbtbubwbxbzbAbBcd|qxogc2c8c9|qxrLbWcicp|qAo0b_c6cb|qDoibjc6ck|qFbhbEcrdg|qGnXbUc8cC|qHpvbMc0ce|qKqTc5clct|qLpuccchco|qO2PbSbXcBcDcEcJ|qOftbRc4cN|qOpqc3cecn|qRrgc7clcp|qUp2c3cncq|qWovc9cqcM|qXqYcdcicw|qXu5bJcucz|q_pechcjcy|r0pKcecxcy|r0ric7cicw|r1oGcjckcG|r4cnbRcacs|r9cqcrcZdQ|raqocdcvdadbdcdd|rat_cmcAdpdqdr|rbqjctcxcR|rdq_clcpdRdSd-d_e0|repZcocvcI|rfpfcncocY|rgvAcmdpdqdr|ritWcudndD|rj2AcfdtdudI|rjnycbcFcL|rk2zcfdtdudI|rm2ycfdtdudI|rmn9bZcCcW|rmoAcqcMcV|rniOc1cKeY|rnpUcxcOcP|ro2xcfdtdudI|rqifbVcHcU|rsnAcCd6d9|rtoeckcGd6|rufycgcQcScT|rxpGcIcPd7|rxpZcIcOcR|ryfFcNc-c_d0d1d2d4d5dU|ryp_cvcPd3|rEfecNcZdz|rFfdcNcZdz|rFh-cKd8di|rHoDcGcYdm|rIm-cFcXdk|rKn1cWd9do|rKoVcycVd7|rLegcscScTdx|rLgucQd8dF|rLgvcQd8dF|rMgycQd8dF|rMgzcQd8dF|rMgBcQd8dF|rMq2cRd7dadbdcdd|rNgDcQd8dF|rNgEcQd8dF|rNnZcLcMdj|rPpmcOcYd3|rQgVcUc-c_d0d1d2d4d5dO|rRnwcLcXde|rRqrctd3dRdSe2e4|rSqsctd3dRdSe2e4|rTqsctd3dRdSe2e4|rUqsctd3dRdSe2e4|rVnvd9dldGdHdKdLdM|r-9ubNdgdh|r-9xcadfep|r_9udfdwey|s2hYcUee|s3nRd6dldm|s4mycWdoeh|s9nJdedje8|s9otcVdjevex|s9s9bWcAdT|semNcXdkdGdHdKdLdM|sfvvcuczds|sgvwcuczds|shvxcuczds|sjvzdpdqdrdE|so1OcBcDcEcJes|sp1NcBcDcEcJes|sG5MdBdCdIdP|sG8odhdyeaec|sGdVcZdzdW|sH6wbSdwdA|sJexcScTdxdJ|sO6ndydBdCen|sP6kdvdAdY|sP6ldvdAdY|sPuecAdEdN|sPv2dsdDdN|sQghc-c_d0d1d2d4d5dOdU|sSnkdedoe5|sTnkdedoe5|sU4acBcDcEcJdve6|sUexdzdXdZ|sUnkdedoe5|sVnldedoe5|sWnldedoe5|t6tIdDdEe1|tch2d8dFe9|tg5ndvdYed|tjcAcsdVep|tnrqcwdadbdcddd-d_e0e2e4|tnrrcwdadbdcddd-d_e0e2e4|tnrGdnd-d_e0e1|tog3cQdFe3|tpcGdQdWew|tre4dxdVdX|tre8dJdWem|ts5MdBdCdPej|tsfIdJe3eb|tsrwcwdRdSdTe2e4|ttrucwdRdSdTe2e4|ttrvcwdRdSdTe2e4|tts9dNdTeX|turtdadbdcdddRdSd-d_e0eW|tvg2dUdZe7|tvrsdadbdcdddRdSd-d_e0eW|twnzdGdHdKdLdMe8eg|tx4pdIefeq|tAgae3e9et|tBnWdle5evex|tChbdOe7ee|tE7SdweleC|tEfjdZemeI|tF7RdweleC|tJ52dPefek|tJhodie9|tK4Me6edeB|tKm8e5eh|tNlFdkegei|tOlBb-eheo|tT5zdYekeA|tV5pedejeS|tY7teaeceneM|u1eFdXebeI|u26HdAeleu|u2k_c1eieY|uaaUdgdQer|ub3De6ePeR|ucaVepeyez|ue2jdtdueE|ueghe7eFeGeHeK|ug6AeneAeZ|ujphdme8eW|ukcJdVeDf1f2f3f4|ukpidme8eW|ul8TdhereL|uoa_ereD|ur62ejeueO|uw4AefeNeR|uw8feaeceLeU|uwbGewezf1f2f3f4|ux2pesePeQ|uzfteteJeK|uAfreteJeK|uBfqeteJeK|uEfjebemeJ|uFfkeFeGeHeI|uFgAeteFeGeH|uG8teyeCf0|uI7xeleUf7|uK54eBeSe_|uK5ZeAeSeZ|uL34eqeEeT|uM2ceEf6|uM4meqeBe-|uM5rekeNeO|uO35ePf5f6|uT7KeCeMeV|uX7LeUf0|uZq2e2e4evex|uZuie1|v1k1cHeo|v56peueOf7|v84geRe_f5|v84SeNe-|va88eLeV|vpdfeweD|vrdgeweD|vsdheweD|vtdheweD|vH3SeTe-|vR2meQeT|vT6ueMeZ";


		int previousCalculatedFace = -1;

		IMyTextSurface _drawingSurface;
		RectangleF _viewport;
		MySpriteDrawFrame spriteFrame;

		public Program()
		{
			// The constructor, called only once every session and
			// always before any other method is called. Use it to
			// initialize your script. 
			//     
			// The constructor is optional and can be removed if not
			// needed.
			// 
			// It's recommended to set RuntimeInfo.UpdateFrequency 
			// here, which will allow your script to run itself without a 
			// timer block.

			var Blocks = new List<IMyTerminalBlock>();
			GridTerminalSystem.GetBlocks(Blocks);
			Wheels = Blocks.FindAll(x => x.IsSameConstructAs(Me) && x is IMyMotorSuspension).Select(x => x as IMyMotorSuspension).ToList();
			RemoteControl = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMyRemoteControl) as IMyRemoteControl;
			//Sensor = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMySensorBlock) as IMySensorBlock;


			theAntenna = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMyRadioAntenna) as IMyRadioAntenna;

			theCockpit = Blocks.Find(x => x.IsSameConstructAs(Me) && x is IMyCockpit) as IMyCockpit;

			Runtime.UpdateFrequency = UpdateFrequency.Update10;



			testPointRegionsLinked = new List<Point>();
			// testPointRegionsLinked.Add((int)1016.01,(int)640.0);

			testPointRegionsLinked.Add(new Point(2, 1));
			testPointRegionsLinked.Add(new Point(5, 3));
			testPointRegionsLinked.Add(new Point(6, 1));
			testPointRegionsLinked.Add(new Point(6, 5));
			testPointRegionsLinked.Add(new Point(6, 3));
			testPointRegionsLinked.Add(new Point(6, 2));
			testPointRegionsLinked.Add(new Point(8, 1));
			testPointRegionsLinked.Add(new Point(8, 2));
			testPointRegionsLinked.Add(new Point(11, 3));
			testPointRegionsLinked.Add(new Point(11, 9));
			testPointRegionsLinked.Add(new Point(11, 5));
			testPointRegionsLinked.Add(new Point(14, 1));
			testPointRegionsLinked.Add(new Point(14, 8));
			testPointRegionsLinked.Add(new Point(14, 11));
			testPointRegionsLinked.Add(new Point(14, 6));
			// ================


			// use the PB big display with the keyboard placed toward gravity
			// _drawingSurface = Me.GetSurface(0);
			// use the top center screen to display
			_drawingSurface = theCockpit.GetSurface(0);

			// Calculate the viewport offset by centering the surface size onto the texture size
			_viewport = new RectangleF(
				(_drawingSurface.TextureSize - _drawingSurface.SurfaceSize) / 2f,
				_drawingSurface.SurfaceSize
			);


		}

		public bool initTheCurrentFaceNodes(int faceNumberNodesToApply)
		{

			// 0 is back
			// 1 is down

			// 2 is front
			// 3 is left

			// 4 is right
			// 5 is up

			string s = "";
			switch (faceNumberNodesToApply)
			{
				case 0:
					s = nodesStringBack;
					break;
				case 1:
					s = nodesStringDown;
					break;
				case 2:
					s = nodesStringFront;
					break;
				case 3:
					s = nodesStringLeft;
					break;
				case 4:
					s = nodesStringRight;
					break;
				case 5:
					s = nodesStringUp;
					break;
				default:
					Echo("no faces nodes init available");
					return false;
					break;
			}


			string[] subs = s.Split('|');

			// Echo("a:"+decodeAsCharNumberMax64('a'));
			// Echo("aa:"+decodeStr__NumberMax4095("aa"));


			int indexNumber = 0;

			//for the function
			nodes = new List<Node>();

			foreach (string sub in subs)
			{
				//string[] subs = s.Split('\n');
				//Echo(sub);

				Echo("indexNumber:" + indexNumber);

				//Echo("sub.Length:" + sub.Length);
				// string encodedIndexes = sub.Substring(5,sub.Length-3);
				int end = sub.Length - 1;

				int xNodeInit = decodeStr__NumberMax4095(sub.Substring(0, 2));
				int yNodeInit = decodeStr__NumberMax4095(sub.Substring(2, 2));

				Point position = new Point(xNodeInit, yNodeInit);

				if (end == 3)
                {
					Echo("This node got no neighbors:" + indexNumber);
					nodes.Add(new Node(indexNumber, position, 500));
				}
                else {

					// Echo("end:"+end);

					// string encodedIndexes = sub.Substring(5,sub.Length-1);
					string encodedIndexes = sub.Substring(4);
					// string encodedIndexes = sub.Substring(5,sub.Length);
					//Echo(encodedIndexes);

					string encodedNeighborsIndexes = encodedIndexes.Substring(0);
					//Echo("encodedNeighborsIndexes:" + encodedNeighborsIndexes);

					int currentNodeIndexDecoded = decodeStr__NumberMax4095(encodedIndexes.Substring(0, 2));
					//Echo("currentNodeIndexDecoded:" + currentNodeIndexDecoded);

					//int radius = 0;
					//TODO: encode this
					int radius = 500;
					// int indexNumber = int.Parse(subsub[2]);
					//int indexNumber = currentNodeIndexDecoded;
					nodes.Add(new Node(indexNumber, position, 500));

					int numberOfSubstringNeighbors = encodedNeighborsIndexes.Length / 2;
					//Echo("numberOfSubstringNeighbors:" + numberOfSubstringNeighbors);

					foreach (int tmpIndex in Enumerable.Range(0, numberOfSubstringNeighbors))
					{
						string tmpNeighborStr = encodedNeighborsIndexes.Substring(2 * tmpIndex, 2);
						int tmpNeighborInt = decodeStr__NumberMax4095(tmpNeighborStr);
						nodes[indexNumber].neighborsNodesIndex.Add(tmpNeighborInt);
					}
				}



				indexNumber = indexNumber + 1;
			}

			//Nodes got init
			return true;

		}

		public void Save()
		{
			// Called when the program needs to save its state. Use
			// this method to save your state to the Storage field
			// or some other means. 
			// 
			// This method is optional and can be removed if not
			// needed.
		}


		public int decodeStr__NumberMax4095(string strMax4095)
		{


			int resultInt = decodeAsCharNumberMax64(strMax4095[0]) * 64 + decodeAsCharNumberMax64(strMax4095[1]) * 1;

			// # resultInt = 0
			return resultInt;
		}

		public int decodeAsCharNumberMax64(char character)
		{
			// # print("number:"+str(number))

			// # print("character:",character)
			// int numberToProcess = (int) Char.GetNumericValue(character);
			int numberToProcess = (int)character;
			// # print("numberToProcess:",numberToProcess)
			// Echo("character:"+character);
			// Echo("numberToProcess:"+numberToProcess);

			int resultNumberUnder64 = 0;


			if (character == '-')
			{
				resultNumberUnder64 = 62;
				return resultNumberUnder64;
			}
			if (character == '_')
			{
				resultNumberUnder64 = 63;
				return resultNumberUnder64;
			}

			// # "0" "9" 48 58     0 9       58= 48 +10
			// # "A" "Z" 65 90     36 62     91= 65 + 26
			// # "a" "z" 97 122    10 35     122

			if (numberToProcess < 58)
			{
				// # 48 is "0"
				resultNumberUnder64 = numberToProcess - 48;
				return resultNumberUnder64;
			}
			if (numberToProcess < (90 + 1))
			{
				// # 97 is "A";
				resultNumberUnder64 = numberToProcess - (90 + 1) + 26 + 36;
				return resultNumberUnder64;
			}
			if (numberToProcess < (122 + 1))
			{
				// # 97 is "a";
				resultNumberUnder64 = numberToProcess - (122 + 1) + 10 + 26;
				return resultNumberUnder64;
			}




			return resultNumberUnder64;
		}

		//whip's code
		public void DrawLine(ref MySpriteDrawFrame frame, Vector2 point1, Vector2 point2, float width, Color color)
		{
			Vector2 position = 0.5f * (point1 + point2);
			Vector2 diff = point1 - point2;
			float length = diff.Length();
			if (length > 0)
				diff /= length;

			Vector2 size = new Vector2(length, width);
			float angle = (float)Math.Acos(Vector2.Dot(diff, Vector2.UnitX));
			angle *= Math.Sign(Vector2.Dot(diff, Vector2.UnitY));

			MySprite sprite = MySprite.CreateSprite("SquareSimple", position, size);
			sprite.RotationOrScale = angle;
			sprite.Color = color;
			frame.Add(sprite);
		}

		//TODO:
		//add new heuristic based on angles?
		//do heuristic change mid path ?
		//check for neighbors check at the beginning
		//do best path based on path combining
		//link faces
		//store all faces
		//display the current closest point and neighbors to help with changing path
		public void aStarPathFinding(Point startPoint, Point endPoint, out List<Node> listPathNode, out Dictionary<Node, double> gscoreOut)
		{
			listPathNode = new List<Node>();

			Point startPointGoal = startPoint;
			Point finalPointGoal = endPoint;


			Echo("nodes.Count" + nodes.Count);

			Echo("startPointGoal:" + startPointGoal);
			Echo("finalPointGoal:" + finalPointGoal);

			//TODO: trouver le bon node de start pour avoir l'heuristique correspondant
			int startingIndex = closestNodeToPoint(startPointGoal);

			Node nodeStarting = nodes[startingIndex];

			Echo("nodeStarting.position" + nodeStarting.position);

			//1 make an openlist containing only the starting node
			List<Node> openlist = new List<Node>();
			// openlist.Add(nodes[3]);
			openlist.Add(nodeStarting);

			//2 make an empty closed list
			List<Node> closelist = new List<Node>();

			int endingIndex = closestNodeToPoint(finalPointGoal);

			List<double> nodeGvalue = new List<double>();

			// Node ourDestinationNode = nodes[50];
			Node ourDestinationNode = nodes[endingIndex];
			// Node node = null;
			Node node = nodeStarting;


			Dictionary<Node, double> gscore = new Dictionary<Node, double>();
			Dictionary<Node, double> fscore = new Dictionary<Node, double>();

			Dictionary<Node, Node> came_from = new Dictionary<Node, Node>();


			// is 0 because it does not cost anything to move from starting node
			gscore.Add(node, 0);
			fscore.Add(node, gscore[node] + heuristic(node.position, ourDestinationNode.position));

			Echo("nodeStarting.index:" + nodeStarting.index);


			int debugCount = 0;

			List<Node> listHeapNodes = new List<Node>();
			listHeapNodes.Add(nodeStarting);

			Echo("start.position:" + node.position);
			Echo("goal.position:" + ourDestinationNode.position);

			while (true)
			{

				Echo("heap.C:" + listHeapNodes.Count);
				node = listHeapNodes[listHeapNodes.Count - 1];
				listHeapNodes.RemoveAt(listHeapNodes.Count - 1);
				Echo("node.index:" + node.index);
				// Echo("debugCount=====================:");
				// Echo("fscore["+node.index+"]:"+fscore[node]);
				// Echo("gscore["+node.index+"]:"+gscore[node]);
				// Echo("h:"+heuristic(node.position,ourDestinationNode.position));
				// Echo("node.position:"+node.position);
				// Echo(""+Math.Sqrt(distanceSquarred(node.position,ourDestinationNode.position)));

				if (ourDestinationNode == node)
				{
					Echo("goal reached");
					break;
				}
				else
				{
					if (closelist.Contains(node) == false)
					{
						closelist.Add(node);
					}
					List<Node> neighbors = new List<Node>();
					// Echo("nodes.Count:"+nodes.Count);
					// Echo("node.neighborsNodesIndex.Count:"+node.neighborsNodesIndex.Count);
					foreach (int index in node.neighborsNodesIndex)
					{
						Echo("index:" + index);
						if (closelist.Contains(nodes[index]) == false)
						{
							neighbors.Add(nodes[index]);
						}
					}
					// Echo("neighbors.Count:"+neighbors.Count);

					Dictionary<Node, double> NodeFscore = new Dictionary<Node, double>();
					foreach (Node neighbor in neighbors)
					{
						// Echo("here11");
						double tentative_g_score = gscore[node] + heuristic(node.position, neighbor.position);
						if (closelist.Contains(neighbor) == true)
						{
							double gscoreTmp = gscore.ContainsKey(neighbor) ? gscore[neighbor] : 0;
							if (tentative_g_score >= gscoreTmp)
							{
								continue;
							}
						}

						double gscoreTmp2 = gscore.ContainsKey(neighbor) ? gscore[neighbor] : 0;
						if (tentative_g_score < gscoreTmp2 || listHeapNodes.Contains(neighbor) == false)
						{
							// Echo("here1");
							came_from[neighbor] = node;
							gscore[neighbor] = tentative_g_score;
							fscore[neighbor] = tentative_g_score + heuristic(neighbor.position, ourDestinationNode.position);
							NodeFscore[neighbor] = fscore[neighbor];
							//listHeapNodes.Add(neighbor);
							// Echo("here2");
						}
					}

					foreach (KeyValuePair<Node, double> entry in NodeFscore.OrderByDescending(key => key.Value))
					{
						//Echo("entry.Key:"+entry.Key);
						listHeapNodes.Add(entry.Key);
					}
				}

				if (debugCount == 245)
				{
					break;
				}
				debugCount = debugCount + 1;
			}

			gscoreOut = gscore;

			List<Node> data = new List<Node>();

			while (came_from.ContainsKey(node))
			{
				// Echo("data.Add(node);");
				// Echo("node.position:"+node.position);
				// Echo(""+Math.Sqrt(distanceSquarred(node.position,ourDestinationNode.position)));
				Echo("gscore[node]:" + Math.Round(gscore[node], 3));
				data.Add(node);
				node = came_from[node];
			}

			listPathNode = data;

			string toCustomData = "";

			int gps_number = 0;

			Point previousPointDebug = new Point(0, 0);

			foreach (Node pathNode in data)
			{
				// public Vector3D convertPointToV3D(IMyRemoteControl sc, int faceNumber, Point pointToV3D){
				//toCustomData = toCustomData + pathNode.position;
				Vector3D nodeConverted = convertPointToV3D(RemoteControl, 4, pathNode.position);

				// MyWaypointInfo tmpWPINode  = new MyWaypointInfo("inter", nodeConverted);
				MyWaypointInfo tmpWPINode = new MyWaypointInfo(gps_number.ToString(), nodeConverted);

				// toCustomData = toCustomData + tmpWPINode.ToString() + '\n';

				//toCustomData = toCustomData +"displayLarger(["+pathNode.position.X +","+pathNode.position.Y + "])" + '\n';

				if (previousPointDebug == new Point(0, 0))
				{
					previousPointDebug = pathNode.position;
				}
				else
				{
					toCustomData = toCustomData + "displayLine([" + pathNode.position.X + "," + pathNode.position.Y + "],[" + previousPointDebug.X + "," + previousPointDebug.Y + "])" + '\n';
					previousPointDebug = pathNode.position;
				}

				gps_number = gps_number + 1;
			}
			Me.CustomData = toCustomData;
		}



		public int closestNodeToPoint(Point thisPoint)
		{
			List<int> indexNodes = new List<int>();
			List<double> indexRadiusSq = new List<double>();
			foreach (Node node in nodes)
			{

				Point diffPos = new Point(node.position.X - thisPoint.X, node.position.Y - thisPoint.Y);
				int distSq = diffPos.X * diffPos.X + diffPos.Y * diffPos.Y;
				int radius = node.radius;
				if (radius * radius > distSq)
				{
					// Echo("node.index"+node.index);
					// Echo("nodes.IndexOf(node):"+nodes.IndexOf(node));
					indexNodes.Add(nodes.IndexOf(node));
					indexRadiusSq.Add(distSq);
				}
			}

			int minIndexRadius = indexRadiusSq.IndexOf(indexRadiusSq.Min());

			// Echo("minIndexRadius:"+minIndexRadius);

			int indexOrClosestNode = indexNodes[minIndexRadius];
			Echo("indexOrClosestNode:" + indexOrClosestNode);

			return indexOrClosestNode;

		}

		public double heuristic(Point a, Point b)
		{

			// return heuristicZero(a,b);
			return euclideanDistance(a, b);
			// return manhattanDistance(a,b);
			// return distanceSquarred(a,b);
		}

		public double euclideanDistance(Point a, Point b)
		{

			return Math.Sqrt((b.X - a.X) * (b.X - a.X) + (b.Y - a.Y) * (b.Y - a.Y));
		}

		public double manhattanDistance(Point a, Point b)
		{

			return Math.Abs(b.X - a.X) + Math.Abs(b.Y - a.Y);
		}

		public double distanceSquarred(Point a, Point b)
		{

			return (b.X - a.X) * (b.X - a.X) + (b.Y - a.Y) * (b.Y - a.Y);
		}


		public double heuristicZero(Point a, Point b)
		{

			return 0;
		}


		public void Main(string argument, UpdateType updateSource)
		{
			// The main entry point of the script, invoked every time
			// one of the programmable block's Run actions are invoked,
			// or the script updates itself. The updateSource argument
			// describes where the update came from.
			// 
			// The method itself is required, but the arguments above
			// can be removed if not needed.




			// ==============================================================================

			if (theAntenna != null)
			{
				theAntenna.HudText = str_to_display;
			}

			//var targetGpsString = "";
			//Echo("targetGpsString:" + targetGpsString);
			MyWaypointInfo myWaypointInfoTarget = new MyWaypointInfo("lol", 0, 0, 0);
			//MyWaypointInfo.TryParse("GPS:/// #4:53590.85:-26608.05:11979.08:", out myWaypointInfoTarget);

			if (argument != null)
			{
				if (argument != "")
				{
					Echo("argument:" + argument);
					if (argument.Contains(":#") == true)
					{
						Echo("if (argument.Contains(:#) == true)");
						MyWaypointInfo.TryParse(argument.Substring(0, argument.Length - 10), out myWaypointInfoTarget);
						// MyWaypointInfo.TryParse(argument.Substring(0, argument.Length - 10), out myWaypointInfoTerrainTarget);
					}
					else
					{
						Echo("not if (argument.Contains(:#) == true)");
						MyWaypointInfo.TryParse(argument, out myWaypointInfoTarget);
						// MyWaypointInfo.TryParse(argument, out myWaypointInfoTerrainTarget);
					}
					if (myWaypointInfoTarget.Coords != new Vector3D(0, 0, 0))
					{
						//x,y,z coords is global to remember between each loop
						myTerrainTarget = myWaypointInfoTarget.Coords;
						myWaypointInfoTerrainTarget = myWaypointInfoTarget;
					}
				}
			}

			if (myTerrainTarget == new Vector3D(0, 0, 0))
			{
				// //using the expected remote control to give us the center of the current planet
				// flightIndicatorsShipController.TryGetPlanetPosition(out myTerrainTarget);
			}



			Echo("if the script don't refresh the screen, the Remote Control might be gone, please hit Recompile");


			Echo("myTerrainTarget:" + Vector3D.Round(myTerrainTarget, 3));

            if (RemoteControl == null)
            {
				Echo("Remote Control gone or not existant\n=\n=");
            }


			float SLerror = (float)(RemoteControl.SpeedLimit - RemoteControl.GetShipSpeed());




			spriteFrame = _drawingSurface.DrawFrame();

			int facenumberCalculated = -1;
			Point pixelPosCalculated = new Point(0, 0);

			faceAndPointOnPlanetsCalculated(RemoteControl, out facenumberCalculated, out pixelPosCalculated, false, new Vector3D(0, 0, 0));

			Echo("facenumberMain1:" + facenumberCalculated);
			Echo("pixelPosMain1:" + pixelPosCalculated);

			whichFileShouldIlook(facenumberCalculated);

			// add the direction of the rover on the map
			int faceNumberTipRover = -1;
			Vector3D shipForwardVectorTip = 8 * 1024 * RemoteControl.WorldMatrix.Forward + Me.GetPosition();

			Point pointShipForwardVector = new Point(0, 0);
			faceAndPointOnPlanetsCalculated(RemoteControl, out faceNumberTipRover, out pointShipForwardVector, true, shipForwardVectorTip);
			Echo("shipForwardVectorTip:" + Vector3D.Round(shipForwardVectorTip, 3));
			Echo("pointShipForwardVector:" + pointShipForwardVector);

			Echo("nodes.CountMain:"+ nodes.Count);


			if (myTerrainTarget == new Vector3D(0, 0, 0))
			{

				// foreach (IMyMotorSuspension Wheel in Wheels)
				// {
				// Wheel.SetValue<Single>("Steer override", 0);
				// Wheel.SetValue<float>("Propulsion override", 0);
				// Wheel.Brake = true;

				// RemoteControl.HandBrake = true;

				// }

			}
			else
			{

				Vector3D targetV3Dabs = myWaypointInfoTerrainTarget.Coords;

				Echo("targetV3Dabs:" + Vector3D.Round(targetV3Dabs, 3));



				int facenumberCalculatedTarget = -1;
				Point pixelPosCalculatedTarget = new Point(0, 0);

				faceAndPointOnPlanetsCalculated(RemoteControl, out facenumberCalculatedTarget, out pixelPosCalculatedTarget, true, targetV3Dabs);


				// Echo("facenumberCalculatedTarget:"+facenumberCalculatedTarget);
				Echo("FNCalculatedTarget:" + facenumberCalculatedTarget);
				Echo("pixelPosCalcTarget:" + pixelPosCalculatedTarget);

				whichFileShouldIlook(facenumberCalculatedTarget);

				bool targetIsOnTheSameFace = false;
				if (facenumberCalculatedTarget == facenumberCalculated)
				{
					targetIsOnTheSameFace = true;
				}
				else
				{
					targetIsOnTheSameFace = false;
				}
				Echo("targetIsOnTheSameFace:" + targetIsOnTheSameFace);

				if (targetIsOnTheSameFace == true)
				{
					List<Node> aStarPathNodeList1 = new List<Node>();
					List<Node> aStarPathNodeList2 = new List<Node>();

					// // ok euclidian distance going across with no circles
					// Point startPointGoal  = new Point(2043,1664);
					// Point finalPointGoal = new Point(50,50);

					//todo: checking for simplification
					// Point startPointGoal  = new Point(2043,1664);//this2
					// Point finalPointGoal = new Point(429,1284);
					// Point finalPointGoal  = new Point(2043,1664);//this1
					// Point startPointGoal   = new Point(429,1284);
					// Point finalPointGoal  = new Point(1440,767);
					// Point startPointGoal  = new Point(429,1284);

					// need more test, seems like path finding is jumping around the big obstacle ?
					//TODO: too many links ?
					// Point startPointGoal  = new Point(1101,1791);
					// Point finalPointGoal = new Point(586,1265);


					//ok, 3 point euclidian distance
					// Point startPointGoal  = new Point(1871,2019);
					// Point finalPointGoal = new Point(1733,1852);

					// //testing avoiding the canyons
					// Point startPointGoal  = new Point(600,2043);
					// Point finalPointGoal = new Point(1600,2043);

					// Point startPointGoal  = new Point(1440,767);
					// Point finalPointGoal = new Point(429,1284);
					Echo("nodes.Count:" + nodes.Count);
					if (previousCalculatedFace != facenumberCalculated)
					{
						bool faceNodesInitResult = initTheCurrentFaceNodes(facenumberCalculated);

						Echo("faceNodesInitResult:" + faceNodesInitResult);
						previousCalculatedFace = facenumberCalculated;
						return;
					}

					Point startPointGoal = pixelPosCalculated;
					Point finalPointGoal = pixelPosCalculatedTarget;
					// Point finalPointGoal = new Point(429,-200);
					// Point finalPointGoal = new Point(1500,-200);

					// Point finalPointGoal = new Point(1500,2060);

					Dictionary<Node, double> gscore1 = new Dictionary<Node, double>();
					Dictionary<Node, double> gscore2 = new Dictionary<Node, double>();

					if(nodes.Count == 0)
                    {
						Echo("no nodes init, no path available!");
						return;
                    }

					aStarPathFinding(startPointGoal, finalPointGoal, out aStarPathNodeList1, out gscore1);
					// aStarPathFinding(finalPointGoal,startPointGoal, out aStarPathNodeList2, out gscore2);

					Echo("aStarPathNodeList1.Count:" + aStarPathNodeList1.Count);
					Echo("aStarPathNodeList2.Count:" + aStarPathNodeList2.Count);
					if (aStarPathNodeList1.Count != 0)
					{
						Echo("gscore1_max:" + Math.Round(gscore1[aStarPathNodeList1[0]], 3));
						// Echo("aStarPathNodeList1[0].position:"+aStarPathNodeList1[0].position);
						// Echo("aStarPathNodeList1[aStarPathNodeList1.Count-1].position:"+aStarPathNodeList1[aStarPathNodeList1.Count-1].position);
						Echo("nextPointToGo:" + aStarPathNodeList1[aStarPathNodeList1.Count - 1].position);
						Echo("aStarPathNodeList1.Count:" + aStarPathNodeList1.Count);
					}
					if (aStarPathNodeList2.Count != 0)
					{
						Echo("gscore2_max:" + Math.Round(gscore2[aStarPathNodeList2[0]], 3));
						// Echo("aStarPathNodeList1[0].position:"+aStarPathNodeList1[0].position);
						// Echo("aStarPathNodeList1[aStarPathNodeList1.Count-1].position:"+aStarPathNodeList1[aStarPathNodeList1.Count-1].position);
						Echo("nextPointToGo:" + aStarPathNodeList2[aStarPathNodeList2.Count - 1].position);
						Echo("aStarPathNodeList2.Count:" + aStarPathNodeList2.Count);
					}
					// Point bestPositionToGo = new Point(0,0);
					// if(gscore1[aStarPathNodeList1[0]] < gscore2[aStarPathNodeList2[0]]){
					// bestPositionToGo = aStarPathNodeList1[aStarPathNodeList1.Count-1].position;
					// }
					// else{
					// if(aStarPathNodeList1.Count != 1){
					// bestPositionToGo = aStarPathNodeList2[1].position;	
					// }
					// else{
					// bestPositionToGo = aStarPathNodeList2[0].position;	
					// }
					// }

					// public Vector3D convertPointToV3D(IMyRemoteControl sc, int faceNumber, Point pointToV3D){
					if (aStarPathNodeList1.Count > 2)
					{
						targetV3Dabs = convertPointToV3D(RemoteControl, facenumberCalculated, aStarPathNodeList1[aStarPathNodeList1.Count - 1].position);
						// targetV3Dabs  = convertPointToV3D(RemoteControl, facenumberCalculated, bestPositionToGo);
					}
					else
					{
						targetV3Dabs = new Vector3D(0, 0, 0);

					}

					// DrawLine(ref spriteFrame, new Vector2(256,100), new Vector2(256,160), 30.0f, Color.DarkRed);
					Vector2 startVector2 = new Vector2(0, 0);
					Vector2 endVector2 = new Vector2(0, 0);
					if (aStarPathNodeList1.Count >= 2)
					{
						foreach (int indexNodeTmp in Enumerable.Range(0, aStarPathNodeList1.Count))
						{
							if (indexNodeTmp != aStarPathNodeList1.Count - 1)
							{
								Echo("aStarPathNodeList1[" + indexNodeTmp + "]:" + aStarPathNodeList1[indexNodeTmp]);
								startVector2 = aStarPathNodeList1[indexNodeTmp].toVector2sax() / 8;
								endVector2 = aStarPathNodeList1[indexNodeTmp + 1].toVector2sax() / 8;
								DrawLine(ref spriteFrame, startVector2, endVector2, 3.0f, Color.DarkRed);
								// startVector2 = aStarPathNodeList1[indexNodeTmp].position;
								// endVector2 = aStarPathNodeList1[indexNodeTmp+1].position;
							}
						}
					}
					if (aStarPathNodeList1.Count == 1)
					{
						Vector2 leftLastPointVector2 = new Vector2(aStarPathNodeList1[0].position.Y - 24, aStarPathNodeList1[0].position.X) / 8;
						Vector2 rightLastPointVector2 = new Vector2(aStarPathNodeList1[0].position.Y + 24, aStarPathNodeList1[0].position.X) / 8;
						DrawLine(ref spriteFrame, leftLastPointVector2, rightLastPointVector2, 6.0f, Color.Green);
					}


					Vector2 leftMyGoalVector2 = new Vector2((float)pixelPosCalculatedTarget.Y - 24, (float)pixelPosCalculatedTarget.X) / 8;
					Vector2 rightGoalVector2 = new Vector2((float)pixelPosCalculatedTarget.Y + 24, (float)pixelPosCalculatedTarget.X) / 8;
					DrawLine(ref spriteFrame, leftMyGoalVector2, rightGoalVector2, 6.0f, Color.MediumBlue);
				}





				// isThisPointInThisRegion(int roverCurrentFaceNumber, Point currentRoverPosition, faceRegionPolygon fRP)

				int currentRegionN = -1;
				int targetRegionN = -1;

				Echo("faceRegionPolyList.Count:" + faceRegionPolygonList.Count);
				foreach (faceRegionPolygon faceRegionPolygonCT in faceRegionPolygonList)
				{
					int RegionNumber = faceRegionPolygonCT.regionNumber;
					bool testedRover = isThisPointInThisRegion(facenumberCalculated, pixelPosCalculated, faceRegionPolygonCT);
					if (testedRover == true)
					{
						Echo("testedRover:RegNumber:" + RegionNumber);
						currentRegionN = RegionNumber;
					}
					bool testedTarget = isThisPointInThisRegion(facenumberCalculatedTarget, pixelPosCalculatedTarget, faceRegionPolygonCT);
					if (testedTarget == true)
					{
						Echo("testedTarget:RegNumber:" + RegionNumber);
						targetRegionN = RegionNumber;
					}
				}
				Echo("currentRegionN:" + currentRegionN);
				Echo("targetRegionN:" + targetRegionN);

				// Echo("If any of the two is -1 the script won't run");
				// if(currentRegionN==-1||targetRegionN==-1){
				// str_to_display = "target or rover not in region";
				// return;
				// }

				bool targetIsOnTheSameRegion = false;
				if (currentRegionN == targetRegionN)
				{
					targetIsOnTheSameRegion = true;
				}
				else
				{
					targetIsOnTheSameRegion = false;
				}
				Echo("targetIsSameRegion:" + targetIsOnTheSameRegion);


				//getting vectors to help with angles proposals
				Vector3D shipForwardVector = RemoteControl.WorldMatrix.Forward;
				Vector3D shipLeftVector = RemoteControl.WorldMatrix.Left;
				Vector3D shipDownVector = RemoteControl.WorldMatrix.Down;

				double steerOverride = 0;
				// double steerOverride = shipForwardVector.Dot(Vector3D.Normalize(targetV3Dabs));
				// steerOverride*=100;
				// Echo("steerOverride:"+Math.Round(steerOverride,3))
				// ;
				Point testGetCen1 = getCentroidPointForThisRegion(currentRegionN);
				Echo("testGetCen1:" + testGetCen1);



				Vector3D targetV3Drel = RemoteControl.GetPosition() - targetV3Dabs;

				Vector3D crossForwardTT = shipForwardVector.Cross((targetV3Drel));
				// Vector3D crossForwardTT = shipForwardVector.Cross(Vector3D.Normalize(targetV3Dabs));
				double turnRightOrLeft = crossForwardTT.Dot(shipDownVector);

				Echo("turnRightOrLeft:" + Math.Round(turnRightOrLeft, 3));

				// str_to_display = ""+"turnRightOrLeft:"+Math.Round(turnRightOrLeft,3);


				steerOverride = turnRightOrLeft / crossForwardTT.Length();

				Echo("targetV3Drel.L:" + Math.Round(targetV3Drel.Length(), 3));

				if (targetV3Drel.Length() > 10000)
				{
					steerOverride *= 4;
				}

				if (Math.Abs(steerOverride) < .98)
				{
					steerOverride *= 0.25;
				}
				// steerOverride*=0.25;

				steerOverride *= -1;
				// str_to_display = ""+"steerOverride:"+Math.Round(steerOverride,3);
				Echo("steerOverride:" + Math.Round(steerOverride, 3));


				steerOverride = MyMath.Clamp(Convert.ToSingle(steerOverride), Convert.ToSingle(-1), Convert.ToSingle(1));


				// foreach (IMyMotorSuspension Wheel in Wheels)
				// {
				// double areThisFrontWheel = shipForwardVector.Dot(Wheel.GetPosition() - RemoteControl.GetPosition());
				// Echo("areThisFrontWheel:"+Math.Round(areThisFrontWheel,3));

				// float MultiplierPO = (float) Vector3D.Dot(Wheel.WorldMatrix.Up, RemoteControl.WorldMatrix.Right);

				// // str_to_display = ""+"MultiplierPO:"+Math.Round(MultiplierPO,3);
				// // Echo(str_to_display);
				// //SLerror = -0.2f;

				// float localPO = -MultiplierPO * SLerror;

				// str_to_display = ""+"localPO:"+Math.Round(localPO,3);

				// if(areThisFrontWheel>0){
				// Wheel.SetValue<Single>("Steer override", Convert.ToSingle(steerOverride));
				// Wheel.SetValue<float>("Propulsion override", localPO);

				// }
				// else{
				// // Wheel.SetValue<Single>("Steer override", Convert.ToSingle(-steerOverride));
				// Wheel.SetValue<float>("Propulsion override", localPO);
				// }

				// }

				// //stop when destination is reached
				// if(targetV3Drel.Length()<5){
				// myTerrainTarget = new Vector3D(0, 0, 0);
				// }

				if (facenumberCalculated == facenumberCalculatedTarget)
				{
					if (Math.Abs(pixelPosCalculated.X - pixelPosCalculatedTarget.X) <= 1)
					{
						if (Math.Abs(pixelPosCalculated.Y - pixelPosCalculatedTarget.Y) <= 1)
						{
							myTerrainTarget = new Vector3D(0, 0, 0);
						}
					}
				}



			}

			Vector2 leftMyPosVector2 = new Vector2((float)pixelPosCalculated.Y - 24, (float)pixelPosCalculated.X) / 8;
			Vector2 rightMyPosVector2 = new Vector2((float)pixelPosCalculated.Y + 24, (float)pixelPosCalculated.X) / 8;
			DrawLine(ref spriteFrame, leftMyPosVector2, rightMyPosVector2, 6.0f, Color.Green);

			Vector2 leftMyRoverTipVector2 = new Vector2((float)pixelPosCalculated.Y, (float)pixelPosCalculated.X) / 8;
			Vector2 rightMyRoverTipVector2 = new Vector2((float)pointShipForwardVector.Y, (float)pointShipForwardVector.X) / 8;
			DrawLine(ref spriteFrame, leftMyRoverTipVector2, rightMyRoverTipVector2, 3.0f, Color.Green);

			// x 0 y 0 w 256 h 256

			Echo("_viewport:" + _viewport);
			// DrawSprites(ref spriteFrame);
			spriteFrame.Dispose();

			Echo("regionLinkCount:" + testPointRegionsLinked.Count);

			Echo("planetRegionPolynsLd:" + planetRegionPolygonsLoaded);




			// if (!RemoteControl.IsAutoPilotEnabled) {
			// }
		}



		public void faceAndPointOnPlanetsCalculated(IMyRemoteControl sc, out int facenumber, out Point pixelPos, bool debugMode, Vector3D testedV3D)
		{

			// Echo(Me.GetPosition()+"");
			Vector3D myPos = sc.GetPosition();
			if (debugMode == true)
			{
				myPos = testedV3D;
			}

			// foreach	(Point point in tmpTestNextPoints){
			// Echo("point"+point);
			// }

			Vector3D centerFacePositionOffset = new Vector3D(0, 0, 0);
			double planet_radius = 60000;

			Vector3D planetCenter = new Vector3D(0, 0, 0);

			bool planetDetected = sc.TryGetPlanetPosition(out planetCenter);

			Echo("planetCenter:" + planetCenter);

			// planet_radius = (int) (planetCenter-myPos).Length();
			planet_radius = (int)(myPos - planetCenter).Length();

			Echo("planet_radius:" + planet_radius);

			Vector3D myPosRelToCenter = (myPos - planetCenter);

			double myPosXAbs = Math.Abs(myPosRelToCenter.X);
			double myPosYAbs = Math.Abs(myPosRelToCenter.Y);
			double myPosZAbs = Math.Abs(myPosRelToCenter.Z);

			Vector3D projectedSphereVector = new Vector3D(0, 0, 0);

			int faceNumber = -1;

			double pixelScalingToIGW = (2 * planet_radius / 2048);

			//shorter names formulas
			double intX = 0;
			double intY = 0;
			double intZ = 0;

			Point extractedPoint = new Point(0, 0);
			double extractionX_pointRL = 0;
			double extractionY_pointRL = 0;

			if (myPosXAbs > myPosYAbs)
			{
				if (myPosXAbs > myPosZAbs)
				{
					projectedSphereVector = (planet_radius / myPosXAbs) * myPosRelToCenter;
					intY = projectedSphereVector.Y;
					intZ = projectedSphereVector.Z;
					if (myPosRelToCenter.X > 0)
					{
						faceNumber = 3;
						extractionX_pointRL = planet_radius - intY;
						extractionY_pointRL = planet_radius - intZ;
					}
					else
					{
						faceNumber = 4;
						extractionX_pointRL = planet_radius - intY;
						extractionY_pointRL = planet_radius + intZ;
					}
				}
			}

			if (myPosYAbs > myPosXAbs)
			{
				if (myPosYAbs > myPosZAbs)
				{
					projectedSphereVector = (planet_radius / myPosYAbs) * myPosRelToCenter;
					intX = projectedSphereVector.X;
					intZ = projectedSphereVector.Z;
					if (myPosRelToCenter.Y > 0)
					{
						faceNumber = 5;
						extractionY_pointRL = planet_radius - intX;
						extractionX_pointRL = planet_radius - intZ;
					}
					else
					{
						faceNumber = 1;
						extractionY_pointRL = planet_radius + intX;
						extractionX_pointRL = planet_radius - intZ;
					}
				}
			}

			if (myPosZAbs > myPosXAbs)
			{
				if (myPosZAbs > myPosYAbs)
				{
					projectedSphereVector = (planet_radius / myPosZAbs) * myPosRelToCenter;
					intX = projectedSphereVector.X;
					intY = projectedSphereVector.Y;
					if (myPosRelToCenter.Z > 0)
					{
						faceNumber = 0;
						extractionY_pointRL = planet_radius + intX;
						extractionX_pointRL = planet_radius - intY;
					}
					else
					{
						faceNumber = 2;
						extractionY_pointRL = planet_radius - intX;
						extractionX_pointRL = planet_radius - intY;
					}
				}
			}

			if (extractionX_pointRL == 0)
			{
				//out-ing
				facenumber = faceNumber;
				pixelPos = new Point(0, 0);

				return;
			}

			if (extractionY_pointRL == 0)
			{

				//out-ing
				facenumber = faceNumber;
				pixelPos = new Point(0, 0);
				return;
			}

			double tmpCalcX = extractionX_pointRL / pixelScalingToIGW;
			double tmpCalcY = extractionY_pointRL / pixelScalingToIGW;

			extractedPoint = new Point((int)tmpCalcX, (int)tmpCalcY);

			//Echo("extractedPoint:"+extractedPoint);
			//Echo("faceNumber:"+faceNumber);
			//Echo("projectedSphereVector:"+projectedSphereVector);

			Point calculatedPoint = new Point(-1, -1);


			//out-ing
			facenumber = faceNumber;
			pixelPos = extractedPoint;

		}

		public void whichFileShouldIlook(int facenumber)
		{

			string tmpStr = "" + facenumber + " is ";

			if (facenumber == 0)
			{
				tmpStr += "back";
			}
			if (facenumber == 1)
			{
				tmpStr += "down";
			}

			if (facenumber == 2)
			{
				tmpStr += "front";
			}
			if (facenumber == 3)
			{
				tmpStr += "left";
			}

			if (facenumber == 4)
			{
				tmpStr += "right";
			}
			if (facenumber == 5)
			{
				tmpStr += "up";
			}

			Echo(tmpStr);

			// 0 is back
			// 1 is down

			// 2 is front
			// 3 is left

			// 4 is right
			// 5 is up
		}



		public class Node
		{
			// voronoi vertex
			public int index;
			public Point position;
			public int radius;
			public List<int> neighborsNodesIndex;

			public Node(int index, Point position, int radius)
			{
				this.index = index;
				this.position = position;
				this.radius = radius;
				this.neighborsNodesIndex = new List<int>();
			}

			public String toString()
			{
				return "index is:" + index + "\n" + "position is:" + position + "\n"
				+ "radius is:" + radius;
			}

			public Vector2 toVector2()
			{
				return new Vector2(position.X, position.Y);
			}
			//swaitched axises
			public Vector2 toVector2sax()
			{
				return new Vector2(position.Y, position.X);

			}

		}




		public class faceRegionPolygon
		{

			public int faceNumber;
			public int regionNumber;
			public List<Point> polygon;
			public Point regionCentroid;

			public faceRegionPolygon(int faceNumber, int regionNumber, Point regionCentroid,
			List<Point> polygon
			)
			{
				this.faceNumber = faceNumber;
				this.regionNumber = regionNumber;
				this.polygon = polygon;
				this.regionCentroid = regionCentroid;
			}

			public String toString()
			{
				return "face is:" + faceNumber + "\n" + "regionNumber is:" + regionNumber + "\n"
				+ "regionCentroid is:" + regionCentroid;
			}

		}

		public bool isThisPointInThisRegion(int roverCurrentFaceNumber, Point currentPointT, faceRegionPolygon fRP)
		{
			if (roverCurrentFaceNumber != fRP.faceNumber)
			{
				return false;
			}
			// TODO:implement this

			// Echo("fRP.polygon.Count:"+fRP.polygon.Count);
			Echo("currentPointT:" + currentPointT);
			bool testResultTmp = InsidePolygon(fRP.polygon, fRP.polygon.Count, currentPointT);
			// Echo("testResultTmp:"+testResultTmp);
			return testResultTmp;
		}

		// eecs umich insidepoly
		public bool InsidePolygon(List<Point> polygon, int N, Point p)
		{
			int counter = 0;
			int i;
			double xinters;
			Point p1, p2;


			p1 = polygon[0];
			for (i = 1; i <= N; i++)
			{
				p2 = polygon[i % N];
				if (p.Y > Math.Min(p1.Y, p2.Y))
				{
					if (p.Y <= Math.Max(p1.Y, p2.Y))
					{
						if (p.X <= Math.Max(p1.X, p2.X))
						{
							if (p1.Y != p2.Y)
							{
								xinters = (p.Y - p1.Y) * (p2.X - p1.X) / (p2.Y - p1.Y) + p1.X;
								if (p1.X == p2.X || p.X <= xinters)
									counter++;
							}
						}
					}
				}
				p1 = p2;
			}

			// Echo("counter:"+counter);

			if (counter % 2 == 0)
				return (false);
			else
				return (true);
		}

		public List<Point> getAllConnectedRegions(int regionNumber)
		{
			List<Point> resultNodes = new List<Point>();
			//TODO:implement
			foreach (Point node in testPointRegionsLinked)
			{
				if (node.X == regionNumber)
				{
					resultNodes.Add(node);
				}
				if (node.Y == regionNumber)
				{
					resultNodes.Add(node);
				}
			}
			return resultNodes;
		}


		public bool areThoseRegionsConnected(Point node, int node1reg, int node2reg)
		{
			bool tmpNode = false;
			if ((node.X == node2reg) && (node.Y == node1reg))
			{
				tmpNode = true;
			}
			if ((node.X == node1reg) && (node.Y == node2reg))
			{
				tmpNode = true;
			}
			return tmpNode;
		}

		public Point getCentroidPointForThisRegion(int regionNumberPar)
		{
			Point tmpPoint = new Point(-1, -1);
			foreach (faceRegionPolygon faceRegionPolygon2 in faceRegionPolygonList)
			{
				if (faceRegionPolygon2.regionNumber == regionNumberPar)
				{
					tmpPoint = faceRegionPolygon2.regionCentroid;
				}
			}
			return tmpPoint;
		}

		public Vector3D convertPointToV3D(IMyRemoteControl sc, int faceNumber, Point pointToV3D)
		{
			Vector3D resultV3D = new Vector3D(0, 0, 0);

			// Vector3D cubeCenter = detectedPlanet;

			double intX = 0;
			double intY = 0;
			double intZ = 0;

			Vector3D generated_gps_point_on_cube = new Vector3D(0, 0, 0);


			Vector3D centerFacePositionOffset = new Vector3D(0, 0, 0);
			double planet_radius = 60000;


			//Get the PB Position:
			Vector3D myPos = Me.GetPosition();

			Vector3D planetCenter = new Vector3D(0, 0, 0);

			bool planetDetected = sc.TryGetPlanetPosition(out planetCenter);

			Vector3D cubeCenter = planetCenter;

			double distanceToCenter = (cubeCenter - myPos).Length();

			planet_radius = distanceToCenter;

			Point surface_face_offset = new Point(0, 0);

			// surface_face_offset.X = Convert.ToSingle((int)(pointToV3D.X * 2*planet_radius/2048));
			// surface_face_offset.Y = Convert.ToSingle((int)(pointToV3D.Y * 2*planet_radius/2048));
			surface_face_offset.X = (int)(pointToV3D.X * 2 * planet_radius / 2048);
			surface_face_offset.Y = (int)(pointToV3D.Y * 2 * planet_radius / 2048);



			if (faceNumber == 0)
			{
				intX = 1 * (-planet_radius + surface_face_offset.Y * 1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				//intZ = planet_radius * (centroid_surface_lack[1]-2048/2) * planet_radius;
				generated_gps_point_on_cube = new Vector3D(intX, intY, planet_radius);
			}
			if (faceNumber == 1)
			{
				intX = 1 * (-planet_radius + surface_face_offset.Y * 1);
				//intY = -1*(- planet_radius+surface_face_offset.X*1);
				intZ = -1 * (-planet_radius + surface_face_offset.X * 1);
				generated_gps_point_on_cube = new Vector3D(intX, -planet_radius, intZ);
			}
			if (faceNumber == 2)
			{
				intX = -1 * (-planet_radius + surface_face_offset.Y * 1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				//intZ = planet_radius * (centroid_surface_lack[1]-2048/2) * planet_radius;
				generated_gps_point_on_cube = new Vector3D(intX, intY, -planet_radius);
			}
			if (faceNumber == 3)
			{
				// intX = 1*(- planet_radius+surface_face_offset.Y*1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				intZ = -1 * (-planet_radius + surface_face_offset.Y * 1);
				generated_gps_point_on_cube = new Vector3D(planet_radius, intY, intZ);
			}
			if (faceNumber == 4)
			{
				//intX = 1*(- planet_radius+surface_face_offset.Y*1);
				intY = -1 * (-planet_radius + surface_face_offset.X * 1);
				intZ = 1 * (-planet_radius + surface_face_offset.Y * 1);
				generated_gps_point_on_cube = new Vector3D(-planet_radius, intY, intZ);
			}
			if (faceNumber == 5)
			{
				intX = -1 * (-planet_radius + surface_face_offset.Y * 1);
				// intY = -1*(- planet_radius+surface_face_offset.X*1);
				intZ = -1 * (-planet_radius + surface_face_offset.X * 1);
				//generated_gps_point_on_cube = arr.array('d', [intX,planet_radius, intZ,]+center_of_planet);
				generated_gps_point_on_cube = new Vector3D(intX, planet_radius, intZ);
			}

			Vector3D generated_gps_point_on_planet = new Vector3D(0, 0, 0);

			//Echo("generated_gps_point_on_cube"+generated_gps_point_on_cube);


			Vector3D generated_gps_point_on_cube_norm = Vector3D.Normalize(generated_gps_point_on_cube);


			generated_gps_point_on_planet = planet_radius * Vector3D.Normalize(generated_gps_point_on_cube_norm) + cubeCenter;

			generated_gps_point_on_planet = Vector3D.Round(generated_gps_point_on_planet, 1);

			resultV3D = generated_gps_point_on_planet;

			return resultV3D;
		}


	}
}
